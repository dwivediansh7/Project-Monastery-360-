"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@genkit-ai";
exports.ids = ["vendor-chunks/@genkit-ai"];
exports.modules = {

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/node_modules/@google/generative-ai/dist/index.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/node_modules/@google/generative-ai/dist/index.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\n/**\n * Contains the list of OpenAPI data types\n * as defined by https://swagger.io/docs/specification/data-models/data-types/\n * @public\n */\nexports.FunctionDeclarationSchemaType = void 0;\n(function (FunctionDeclarationSchemaType) {\n    /** String type. */\n    FunctionDeclarationSchemaType[\"STRING\"] = \"STRING\";\n    /** Number type. */\n    FunctionDeclarationSchemaType[\"NUMBER\"] = \"NUMBER\";\n    /** Integer type. */\n    FunctionDeclarationSchemaType[\"INTEGER\"] = \"INTEGER\";\n    /** Boolean type. */\n    FunctionDeclarationSchemaType[\"BOOLEAN\"] = \"BOOLEAN\";\n    /** Array type. */\n    FunctionDeclarationSchemaType[\"ARRAY\"] = \"ARRAY\";\n    /** Object type. */\n    FunctionDeclarationSchemaType[\"OBJECT\"] = \"OBJECT\";\n})(exports.FunctionDeclarationSchemaType || (exports.FunctionDeclarationSchemaType = {}));\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @public\n */\nexports.ExecutableCodeLanguage = void 0;\n(function (ExecutableCodeLanguage) {\n    ExecutableCodeLanguage[\"LANGUAGE_UNSPECIFIED\"] = \"language_unspecified\";\n    ExecutableCodeLanguage[\"PYTHON\"] = \"python\";\n})(exports.ExecutableCodeLanguage || (exports.ExecutableCodeLanguage = {}));\n/**\n * Possible outcomes of code execution.\n * @public\n */\nexports.Outcome = void 0;\n(function (Outcome) {\n    /**\n     * Unspecified status. This value should not be used.\n     */\n    Outcome[\"OUTCOME_UNSPECIFIED\"] = \"outcome_unspecified\";\n    /**\n     * Code execution completed successfully.\n     */\n    Outcome[\"OUTCOME_OK\"] = \"outcome_ok\";\n    /**\n     * Code execution finished but with a failure. `stderr` should contain the\n     * reason.\n     */\n    Outcome[\"OUTCOME_FAILED\"] = \"outcome_failed\";\n    /**\n     * Code execution ran for too long, and was cancelled. There may or may not\n     * be a partial output present.\n     */\n    Outcome[\"OUTCOME_DEADLINE_EXCEEDED\"] = \"outcome_deadline_exceeded\";\n})(exports.Outcome || (exports.Outcome = {}));\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Possible roles.\n * @public\n */\nconst POSSIBLE_ROLES = [\"user\", \"model\", \"function\", \"system\"];\n/**\n * Harm categories that would cause prompts or candidates to be blocked.\n * @public\n */\nexports.HarmCategory = void 0;\n(function (HarmCategory) {\n    HarmCategory[\"HARM_CATEGORY_UNSPECIFIED\"] = \"HARM_CATEGORY_UNSPECIFIED\";\n    HarmCategory[\"HARM_CATEGORY_HATE_SPEECH\"] = \"HARM_CATEGORY_HATE_SPEECH\";\n    HarmCategory[\"HARM_CATEGORY_SEXUALLY_EXPLICIT\"] = \"HARM_CATEGORY_SEXUALLY_EXPLICIT\";\n    HarmCategory[\"HARM_CATEGORY_HARASSMENT\"] = \"HARM_CATEGORY_HARASSMENT\";\n    HarmCategory[\"HARM_CATEGORY_DANGEROUS_CONTENT\"] = \"HARM_CATEGORY_DANGEROUS_CONTENT\";\n})(exports.HarmCategory || (exports.HarmCategory = {}));\n/**\n * Threshold above which a prompt or candidate will be blocked.\n * @public\n */\nexports.HarmBlockThreshold = void 0;\n(function (HarmBlockThreshold) {\n    // Threshold is unspecified.\n    HarmBlockThreshold[\"HARM_BLOCK_THRESHOLD_UNSPECIFIED\"] = \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\";\n    // Content with NEGLIGIBLE will be allowed.\n    HarmBlockThreshold[\"BLOCK_LOW_AND_ABOVE\"] = \"BLOCK_LOW_AND_ABOVE\";\n    // Content with NEGLIGIBLE and LOW will be allowed.\n    HarmBlockThreshold[\"BLOCK_MEDIUM_AND_ABOVE\"] = \"BLOCK_MEDIUM_AND_ABOVE\";\n    // Content with NEGLIGIBLE, LOW, and MEDIUM will be allowed.\n    HarmBlockThreshold[\"BLOCK_ONLY_HIGH\"] = \"BLOCK_ONLY_HIGH\";\n    // All content will be allowed.\n    HarmBlockThreshold[\"BLOCK_NONE\"] = \"BLOCK_NONE\";\n})(exports.HarmBlockThreshold || (exports.HarmBlockThreshold = {}));\n/**\n * Probability that a prompt or candidate matches a harm category.\n * @public\n */\nexports.HarmProbability = void 0;\n(function (HarmProbability) {\n    // Probability is unspecified.\n    HarmProbability[\"HARM_PROBABILITY_UNSPECIFIED\"] = \"HARM_PROBABILITY_UNSPECIFIED\";\n    // Content has a negligible chance of being unsafe.\n    HarmProbability[\"NEGLIGIBLE\"] = \"NEGLIGIBLE\";\n    // Content has a low chance of being unsafe.\n    HarmProbability[\"LOW\"] = \"LOW\";\n    // Content has a medium chance of being unsafe.\n    HarmProbability[\"MEDIUM\"] = \"MEDIUM\";\n    // Content has a high chance of being unsafe.\n    HarmProbability[\"HIGH\"] = \"HIGH\";\n})(exports.HarmProbability || (exports.HarmProbability = {}));\n/**\n * Reason that a prompt was blocked.\n * @public\n */\nexports.BlockReason = void 0;\n(function (BlockReason) {\n    // A blocked reason was not specified.\n    BlockReason[\"BLOCKED_REASON_UNSPECIFIED\"] = \"BLOCKED_REASON_UNSPECIFIED\";\n    // Content was blocked by safety settings.\n    BlockReason[\"SAFETY\"] = \"SAFETY\";\n    // Content was blocked, but the reason is uncategorized.\n    BlockReason[\"OTHER\"] = \"OTHER\";\n})(exports.BlockReason || (exports.BlockReason = {}));\n/**\n * Reason that a candidate finished.\n * @public\n */\nexports.FinishReason = void 0;\n(function (FinishReason) {\n    // Default value. This value is unused.\n    FinishReason[\"FINISH_REASON_UNSPECIFIED\"] = \"FINISH_REASON_UNSPECIFIED\";\n    // Natural stop point of the model or provided stop sequence.\n    FinishReason[\"STOP\"] = \"STOP\";\n    // The maximum number of tokens as specified in the request was reached.\n    FinishReason[\"MAX_TOKENS\"] = \"MAX_TOKENS\";\n    // The candidate content was flagged for safety reasons.\n    FinishReason[\"SAFETY\"] = \"SAFETY\";\n    // The candidate content was flagged for recitation reasons.\n    FinishReason[\"RECITATION\"] = \"RECITATION\";\n    // The candidate content was flagged for using an unsupported language.\n    FinishReason[\"LANGUAGE\"] = \"LANGUAGE\";\n    // Unknown reason.\n    FinishReason[\"OTHER\"] = \"OTHER\";\n})(exports.FinishReason || (exports.FinishReason = {}));\n/**\n * Task type for embedding content.\n * @public\n */\nexports.TaskType = void 0;\n(function (TaskType) {\n    TaskType[\"TASK_TYPE_UNSPECIFIED\"] = \"TASK_TYPE_UNSPECIFIED\";\n    TaskType[\"RETRIEVAL_QUERY\"] = \"RETRIEVAL_QUERY\";\n    TaskType[\"RETRIEVAL_DOCUMENT\"] = \"RETRIEVAL_DOCUMENT\";\n    TaskType[\"SEMANTIC_SIMILARITY\"] = \"SEMANTIC_SIMILARITY\";\n    TaskType[\"CLASSIFICATION\"] = \"CLASSIFICATION\";\n    TaskType[\"CLUSTERING\"] = \"CLUSTERING\";\n})(exports.TaskType || (exports.TaskType = {}));\n/**\n * @public\n */\nexports.FunctionCallingMode = void 0;\n(function (FunctionCallingMode) {\n    // Unspecified function calling mode. This value should not be used.\n    FunctionCallingMode[\"MODE_UNSPECIFIED\"] = \"MODE_UNSPECIFIED\";\n    // Default model behavior, model decides to predict either a function call\n    // or a natural language repspose.\n    FunctionCallingMode[\"AUTO\"] = \"AUTO\";\n    // Model is constrained to always predicting a function call only.\n    // If \"allowed_function_names\" are set, the predicted function call will be\n    // limited to any one of \"allowed_function_names\", else the predicted\n    // function call will be any one of the provided \"function_declarations\".\n    FunctionCallingMode[\"ANY\"] = \"ANY\";\n    // Model will not predict any function call. Model behavior is same as when\n    // not passing any function declarations.\n    FunctionCallingMode[\"NONE\"] = \"NONE\";\n})(exports.FunctionCallingMode || (exports.FunctionCallingMode = {}));\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Basic error type for this SDK.\n * @public\n */\nclass GoogleGenerativeAIError extends Error {\n    constructor(message) {\n        super(`[GoogleGenerativeAI Error]: ${message}`);\n    }\n}\n/**\n * Errors in the contents of a response from the model. This includes parsing\n * errors, or responses including a safety block reason.\n * @public\n */\nclass GoogleGenerativeAIResponseError extends GoogleGenerativeAIError {\n    constructor(message, response) {\n        super(message);\n        this.response = response;\n    }\n}\n/**\n * Error class covering HTTP errors when calling the server. Includes HTTP\n * status, statusText, and optional details, if provided in the server response.\n * @public\n */\nclass GoogleGenerativeAIFetchError extends GoogleGenerativeAIError {\n    constructor(message, status, statusText, errorDetails) {\n        super(message);\n        this.status = status;\n        this.statusText = statusText;\n        this.errorDetails = errorDetails;\n    }\n}\n/**\n * Errors in the contents of a request originating from user input.\n * @public\n */\nclass GoogleGenerativeAIRequestInputError extends GoogleGenerativeAIError {\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst DEFAULT_BASE_URL = \"https://generativelanguage.googleapis.com\";\nconst DEFAULT_API_VERSION = \"v1beta\";\n/**\n * We can't `require` package.json if this runs on web. We will use rollup to\n * swap in the version number here at build time.\n */\nconst PACKAGE_VERSION = \"0.16.1\";\nconst PACKAGE_LOG_HEADER = \"genai-js\";\nvar Task;\n(function (Task) {\n    Task[\"GENERATE_CONTENT\"] = \"generateContent\";\n    Task[\"STREAM_GENERATE_CONTENT\"] = \"streamGenerateContent\";\n    Task[\"COUNT_TOKENS\"] = \"countTokens\";\n    Task[\"EMBED_CONTENT\"] = \"embedContent\";\n    Task[\"BATCH_EMBED_CONTENTS\"] = \"batchEmbedContents\";\n})(Task || (Task = {}));\nclass RequestUrl {\n    constructor(model, task, apiKey, stream, requestOptions) {\n        this.model = model;\n        this.task = task;\n        this.apiKey = apiKey;\n        this.stream = stream;\n        this.requestOptions = requestOptions;\n    }\n    toString() {\n        var _a, _b;\n        const apiVersion = ((_a = this.requestOptions) === null || _a === void 0 ? void 0 : _a.apiVersion) || DEFAULT_API_VERSION;\n        const baseUrl = ((_b = this.requestOptions) === null || _b === void 0 ? void 0 : _b.baseUrl) || DEFAULT_BASE_URL;\n        let url = `${baseUrl}/${apiVersion}/${this.model}:${this.task}`;\n        if (this.stream) {\n            url += \"?alt=sse\";\n        }\n        return url;\n    }\n}\n/**\n * Simple, but may become more complex if we add more versions to log.\n */\nfunction getClientHeaders(requestOptions) {\n    const clientHeaders = [];\n    if (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiClient) {\n        clientHeaders.push(requestOptions.apiClient);\n    }\n    clientHeaders.push(`${PACKAGE_LOG_HEADER}/${PACKAGE_VERSION}`);\n    return clientHeaders.join(\" \");\n}\nasync function getHeaders(url) {\n    var _a;\n    const headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n    headers.append(\"x-goog-api-client\", getClientHeaders(url.requestOptions));\n    headers.append(\"x-goog-api-key\", url.apiKey);\n    let customHeaders = (_a = url.requestOptions) === null || _a === void 0 ? void 0 : _a.customHeaders;\n    if (customHeaders) {\n        if (!(customHeaders instanceof Headers)) {\n            try {\n                customHeaders = new Headers(customHeaders);\n            }\n            catch (e) {\n                throw new GoogleGenerativeAIRequestInputError(`unable to convert customHeaders value ${JSON.stringify(customHeaders)} to Headers: ${e.message}`);\n            }\n        }\n        for (const [headerName, headerValue] of customHeaders.entries()) {\n            if (headerName === \"x-goog-api-key\") {\n                throw new GoogleGenerativeAIRequestInputError(`Cannot set reserved header name ${headerName}`);\n            }\n            else if (headerName === \"x-goog-api-client\") {\n                throw new GoogleGenerativeAIRequestInputError(`Header name ${headerName} can only be set using the apiClient field`);\n            }\n            headers.append(headerName, headerValue);\n        }\n    }\n    return headers;\n}\nasync function constructModelRequest(model, task, apiKey, stream, body, requestOptions) {\n    const url = new RequestUrl(model, task, apiKey, stream, requestOptions);\n    return {\n        url: url.toString(),\n        fetchOptions: Object.assign(Object.assign({}, buildFetchOptions(requestOptions)), { method: \"POST\", headers: await getHeaders(url), body }),\n    };\n}\nasync function makeModelRequest(model, task, apiKey, stream, body, requestOptions = {}, \n// Allows this to be stubbed for tests\nfetchFn = fetch) {\n    const { url, fetchOptions } = await constructModelRequest(model, task, apiKey, stream, body, requestOptions);\n    return makeRequest(url, fetchOptions, fetchFn);\n}\nasync function makeRequest(url, fetchOptions, fetchFn = fetch) {\n    let response;\n    try {\n        response = await fetchFn(url, fetchOptions);\n    }\n    catch (e) {\n        handleResponseError(e, url);\n    }\n    if (!response.ok) {\n        await handleResponseNotOk(response, url);\n    }\n    return response;\n}\nfunction handleResponseError(e, url) {\n    let err = e;\n    if (!(e instanceof GoogleGenerativeAIFetchError ||\n        e instanceof GoogleGenerativeAIRequestInputError)) {\n        err = new GoogleGenerativeAIError(`Error fetching from ${url.toString()}: ${e.message}`);\n        err.stack = e.stack;\n    }\n    throw err;\n}\nasync function handleResponseNotOk(response, url) {\n    let message = \"\";\n    let errorDetails;\n    try {\n        const json = await response.json();\n        message = json.error.message;\n        if (json.error.details) {\n            message += ` ${JSON.stringify(json.error.details)}`;\n            errorDetails = json.error.details;\n        }\n    }\n    catch (e) {\n        // ignored\n    }\n    throw new GoogleGenerativeAIFetchError(`Error fetching from ${url.toString()}: [${response.status} ${response.statusText}] ${message}`, response.status, response.statusText, errorDetails);\n}\n/**\n * Generates the request options to be passed to the fetch API.\n * @param requestOptions - The user-defined request options.\n * @returns The generated request options.\n */\nfunction buildFetchOptions(requestOptions) {\n    const fetchOptions = {};\n    if ((requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.signal) !== undefined || (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeout) >= 0) {\n        const controller = new AbortController();\n        if ((requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeout) >= 0) {\n            setTimeout(() => controller.abort(), requestOptions.timeout);\n        }\n        if (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.signal) {\n            requestOptions.signal.addEventListener(\"abort\", () => {\n                controller.abort();\n            });\n        }\n        fetchOptions.signal = controller.signal;\n    }\n    return fetchOptions;\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Adds convenience helper methods to a response object, including stream\n * chunks (as long as each chunk is a complete GenerateContentResponse JSON).\n */\nfunction addHelpers(response) {\n    response.text = () => {\n        if (response.candidates && response.candidates.length > 0) {\n            if (response.candidates.length > 1) {\n                console.warn(`This response had ${response.candidates.length} ` +\n                    `candidates. Returning text from the first candidate only. ` +\n                    `Access response.candidates directly to use the other candidates.`);\n            }\n            if (hadBadFinishReason(response.candidates[0])) {\n                throw new GoogleGenerativeAIResponseError(`${formatBlockErrorMessage(response)}`, response);\n            }\n            return getText(response);\n        }\n        else if (response.promptFeedback) {\n            throw new GoogleGenerativeAIResponseError(`Text not available. ${formatBlockErrorMessage(response)}`, response);\n        }\n        return \"\";\n    };\n    /**\n     * TODO: remove at next major version\n     */\n    response.functionCall = () => {\n        if (response.candidates && response.candidates.length > 0) {\n            if (response.candidates.length > 1) {\n                console.warn(`This response had ${response.candidates.length} ` +\n                    `candidates. Returning function calls from the first candidate only. ` +\n                    `Access response.candidates directly to use the other candidates.`);\n            }\n            if (hadBadFinishReason(response.candidates[0])) {\n                throw new GoogleGenerativeAIResponseError(`${formatBlockErrorMessage(response)}`, response);\n            }\n            console.warn(`response.functionCall() is deprecated. ` +\n                `Use response.functionCalls() instead.`);\n            return getFunctionCalls(response)[0];\n        }\n        else if (response.promptFeedback) {\n            throw new GoogleGenerativeAIResponseError(`Function call not available. ${formatBlockErrorMessage(response)}`, response);\n        }\n        return undefined;\n    };\n    response.functionCalls = () => {\n        if (response.candidates && response.candidates.length > 0) {\n            if (response.candidates.length > 1) {\n                console.warn(`This response had ${response.candidates.length} ` +\n                    `candidates. Returning function calls from the first candidate only. ` +\n                    `Access response.candidates directly to use the other candidates.`);\n            }\n            if (hadBadFinishReason(response.candidates[0])) {\n                throw new GoogleGenerativeAIResponseError(`${formatBlockErrorMessage(response)}`, response);\n            }\n            return getFunctionCalls(response);\n        }\n        else if (response.promptFeedback) {\n            throw new GoogleGenerativeAIResponseError(`Function call not available. ${formatBlockErrorMessage(response)}`, response);\n        }\n        return undefined;\n    };\n    return response;\n}\n/**\n * Returns all text found in all parts of first candidate.\n */\nfunction getText(response) {\n    var _a, _b, _c, _d;\n    const textStrings = [];\n    if ((_b = (_a = response.candidates) === null || _a === void 0 ? void 0 : _a[0].content) === null || _b === void 0 ? void 0 : _b.parts) {\n        for (const part of (_d = (_c = response.candidates) === null || _c === void 0 ? void 0 : _c[0].content) === null || _d === void 0 ? void 0 : _d.parts) {\n            if (part.text) {\n                textStrings.push(part.text);\n            }\n            if (part.executableCode) {\n                textStrings.push(\"\\n```python\\n\" + part.executableCode.code + \"\\n```\\n\");\n            }\n            if (part.codeExecutionResult) {\n                textStrings.push(\"\\n```\\n\" + part.codeExecutionResult.output + \"\\n```\\n\");\n            }\n        }\n    }\n    if (textStrings.length > 0) {\n        return textStrings.join(\"\");\n    }\n    else {\n        return \"\";\n    }\n}\n/**\n * Returns functionCall of first candidate.\n */\nfunction getFunctionCalls(response) {\n    var _a, _b, _c, _d;\n    const functionCalls = [];\n    if ((_b = (_a = response.candidates) === null || _a === void 0 ? void 0 : _a[0].content) === null || _b === void 0 ? void 0 : _b.parts) {\n        for (const part of (_d = (_c = response.candidates) === null || _c === void 0 ? void 0 : _c[0].content) === null || _d === void 0 ? void 0 : _d.parts) {\n            if (part.functionCall) {\n                functionCalls.push(part.functionCall);\n            }\n        }\n    }\n    if (functionCalls.length > 0) {\n        return functionCalls;\n    }\n    else {\n        return undefined;\n    }\n}\nconst badFinishReasons = [\n    exports.FinishReason.RECITATION,\n    exports.FinishReason.SAFETY,\n    exports.FinishReason.LANGUAGE,\n];\nfunction hadBadFinishReason(candidate) {\n    return (!!candidate.finishReason &&\n        badFinishReasons.includes(candidate.finishReason));\n}\nfunction formatBlockErrorMessage(response) {\n    var _a, _b, _c;\n    let message = \"\";\n    if ((!response.candidates || response.candidates.length === 0) &&\n        response.promptFeedback) {\n        message += \"Response was blocked\";\n        if ((_a = response.promptFeedback) === null || _a === void 0 ? void 0 : _a.blockReason) {\n            message += ` due to ${response.promptFeedback.blockReason}`;\n        }\n        if ((_b = response.promptFeedback) === null || _b === void 0 ? void 0 : _b.blockReasonMessage) {\n            message += `: ${response.promptFeedback.blockReasonMessage}`;\n        }\n    }\n    else if ((_c = response.candidates) === null || _c === void 0 ? void 0 : _c[0]) {\n        const firstCandidate = response.candidates[0];\n        if (hadBadFinishReason(firstCandidate)) {\n            message += `Candidate was blocked due to ${firstCandidate.finishReason}`;\n            if (firstCandidate.finishMessage) {\n                message += `: ${firstCandidate.finishMessage}`;\n            }\n        }\n    }\n    return message;\n}\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst responseLineRE = /^data\\: (.*)(?:\\n\\n|\\r\\r|\\r\\n\\r\\n)/;\n/**\n * Process a response.body stream from the backend and return an\n * iterator that provides one complete GenerateContentResponse at a time\n * and a promise that resolves with a single aggregated\n * GenerateContentResponse.\n *\n * @param response - Response from a fetch call\n */\nfunction processStream(response) {\n    const inputStream = response.body.pipeThrough(new TextDecoderStream(\"utf8\", { fatal: true }));\n    const responseStream = getResponseStream(inputStream);\n    const [stream1, stream2] = responseStream.tee();\n    return {\n        stream: generateResponseSequence(stream1),\n        response: getResponsePromise(stream2),\n    };\n}\nasync function getResponsePromise(stream) {\n    const allResponses = [];\n    const reader = stream.getReader();\n    while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n            return addHelpers(aggregateResponses(allResponses));\n        }\n        allResponses.push(value);\n    }\n}\nfunction generateResponseSequence(stream) {\n    return __asyncGenerator(this, arguments, function* generateResponseSequence_1() {\n        const reader = stream.getReader();\n        while (true) {\n            const { value, done } = yield __await(reader.read());\n            if (done) {\n                break;\n            }\n            yield yield __await(addHelpers(value));\n        }\n    });\n}\n/**\n * Reads a raw stream from the fetch response and join incomplete\n * chunks, returning a new stream that provides a single complete\n * GenerateContentResponse in each iteration.\n */\nfunction getResponseStream(inputStream) {\n    const reader = inputStream.getReader();\n    const stream = new ReadableStream({\n        start(controller) {\n            let currentText = \"\";\n            return pump();\n            function pump() {\n                return reader.read().then(({ value, done }) => {\n                    if (done) {\n                        if (currentText.trim()) {\n                            controller.error(new GoogleGenerativeAIError(\"Failed to parse stream\"));\n                            return;\n                        }\n                        controller.close();\n                        return;\n                    }\n                    currentText += value;\n                    let match = currentText.match(responseLineRE);\n                    let parsedResponse;\n                    while (match) {\n                        try {\n                            parsedResponse = JSON.parse(match[1]);\n                        }\n                        catch (e) {\n                            controller.error(new GoogleGenerativeAIError(`Error parsing JSON response: \"${match[1]}\"`));\n                            return;\n                        }\n                        controller.enqueue(parsedResponse);\n                        currentText = currentText.substring(match[0].length);\n                        match = currentText.match(responseLineRE);\n                    }\n                    return pump();\n                });\n            }\n        },\n    });\n    return stream;\n}\n/**\n * Aggregates an array of `GenerateContentResponse`s into a single\n * GenerateContentResponse.\n */\nfunction aggregateResponses(responses) {\n    const lastResponse = responses[responses.length - 1];\n    const aggregatedResponse = {\n        promptFeedback: lastResponse === null || lastResponse === void 0 ? void 0 : lastResponse.promptFeedback,\n    };\n    for (const response of responses) {\n        if (response.candidates) {\n            for (const candidate of response.candidates) {\n                const i = candidate.index;\n                if (!aggregatedResponse.candidates) {\n                    aggregatedResponse.candidates = [];\n                }\n                if (!aggregatedResponse.candidates[i]) {\n                    aggregatedResponse.candidates[i] = {\n                        index: candidate.index,\n                    };\n                }\n                // Keep overwriting, the last one will be final\n                aggregatedResponse.candidates[i].citationMetadata =\n                    candidate.citationMetadata;\n                aggregatedResponse.candidates[i].finishReason = candidate.finishReason;\n                aggregatedResponse.candidates[i].finishMessage =\n                    candidate.finishMessage;\n                aggregatedResponse.candidates[i].safetyRatings =\n                    candidate.safetyRatings;\n                /**\n                 * Candidates should always have content and parts, but this handles\n                 * possible malformed responses.\n                 */\n                if (candidate.content && candidate.content.parts) {\n                    if (!aggregatedResponse.candidates[i].content) {\n                        aggregatedResponse.candidates[i].content = {\n                            role: candidate.content.role || \"user\",\n                            parts: [],\n                        };\n                    }\n                    const newPart = {};\n                    for (const part of candidate.content.parts) {\n                        if (part.text) {\n                            newPart.text = part.text;\n                        }\n                        if (part.functionCall) {\n                            newPart.functionCall = part.functionCall;\n                        }\n                        if (part.executableCode) {\n                            newPart.executableCode = part.executableCode;\n                        }\n                        if (part.codeExecutionResult) {\n                            newPart.codeExecutionResult = part.codeExecutionResult;\n                        }\n                        if (Object.keys(newPart).length === 0) {\n                            newPart.text = \"\";\n                        }\n                        aggregatedResponse.candidates[i].content.parts.push(newPart);\n                    }\n                }\n            }\n        }\n        if (response.usageMetadata) {\n            aggregatedResponse.usageMetadata = response.usageMetadata;\n        }\n    }\n    return aggregatedResponse;\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function generateContentStream(apiKey, model, params, requestOptions) {\n    const response = await makeModelRequest(model, Task.STREAM_GENERATE_CONTENT, apiKey, \n    /* stream */ true, JSON.stringify(params), requestOptions);\n    return processStream(response);\n}\nasync function generateContent(apiKey, model, params, requestOptions) {\n    const response = await makeModelRequest(model, Task.GENERATE_CONTENT, apiKey, \n    /* stream */ false, JSON.stringify(params), requestOptions);\n    const responseJson = await response.json();\n    const enhancedResponse = addHelpers(responseJson);\n    return {\n        response: enhancedResponse,\n    };\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction formatSystemInstruction(input) {\n    // null or undefined\n    if (input == null) {\n        return undefined;\n    }\n    else if (typeof input === \"string\") {\n        return { role: \"system\", parts: [{ text: input }] };\n    }\n    else if (input.text) {\n        return { role: \"system\", parts: [input] };\n    }\n    else if (input.parts) {\n        if (!input.role) {\n            return { role: \"system\", parts: input.parts };\n        }\n        else {\n            return input;\n        }\n    }\n}\nfunction formatNewContent(request) {\n    let newParts = [];\n    if (typeof request === \"string\") {\n        newParts = [{ text: request }];\n    }\n    else {\n        for (const partOrString of request) {\n            if (typeof partOrString === \"string\") {\n                newParts.push({ text: partOrString });\n            }\n            else {\n                newParts.push(partOrString);\n            }\n        }\n    }\n    return assignRoleToPartsAndValidateSendMessageRequest(newParts);\n}\n/**\n * When multiple Part types (i.e. FunctionResponsePart and TextPart) are\n * passed in a single Part array, we may need to assign different roles to each\n * part. Currently only FunctionResponsePart requires a role other than 'user'.\n * @private\n * @param parts Array of parts to pass to the model\n * @returns Array of content items\n */\nfunction assignRoleToPartsAndValidateSendMessageRequest(parts) {\n    const userContent = { role: \"user\", parts: [] };\n    const functionContent = { role: \"function\", parts: [] };\n    let hasUserContent = false;\n    let hasFunctionContent = false;\n    for (const part of parts) {\n        if (\"functionResponse\" in part) {\n            functionContent.parts.push(part);\n            hasFunctionContent = true;\n        }\n        else {\n            userContent.parts.push(part);\n            hasUserContent = true;\n        }\n    }\n    if (hasUserContent && hasFunctionContent) {\n        throw new GoogleGenerativeAIError(\"Within a single message, FunctionResponse cannot be mixed with other type of part in the request for sending chat message.\");\n    }\n    if (!hasUserContent && !hasFunctionContent) {\n        throw new GoogleGenerativeAIError(\"No content is provided for sending chat message.\");\n    }\n    if (hasUserContent) {\n        return userContent;\n    }\n    return functionContent;\n}\nfunction formatCountTokensInput(params, modelParams) {\n    var _a;\n    let formattedGenerateContentRequest = {\n        model: modelParams === null || modelParams === void 0 ? void 0 : modelParams.model,\n        generationConfig: modelParams === null || modelParams === void 0 ? void 0 : modelParams.generationConfig,\n        safetySettings: modelParams === null || modelParams === void 0 ? void 0 : modelParams.safetySettings,\n        tools: modelParams === null || modelParams === void 0 ? void 0 : modelParams.tools,\n        toolConfig: modelParams === null || modelParams === void 0 ? void 0 : modelParams.toolConfig,\n        systemInstruction: modelParams === null || modelParams === void 0 ? void 0 : modelParams.systemInstruction,\n        cachedContent: (_a = modelParams === null || modelParams === void 0 ? void 0 : modelParams.cachedContent) === null || _a === void 0 ? void 0 : _a.name,\n        contents: [],\n    };\n    const containsGenerateContentRequest = params.generateContentRequest != null;\n    if (params.contents) {\n        if (containsGenerateContentRequest) {\n            throw new GoogleGenerativeAIRequestInputError(\"CountTokensRequest must have one of contents or generateContentRequest, not both.\");\n        }\n        formattedGenerateContentRequest.contents = params.contents;\n    }\n    else if (containsGenerateContentRequest) {\n        formattedGenerateContentRequest = Object.assign(Object.assign({}, formattedGenerateContentRequest), params.generateContentRequest);\n    }\n    else {\n        // Array or string\n        const content = formatNewContent(params);\n        formattedGenerateContentRequest.contents = [content];\n    }\n    return { generateContentRequest: formattedGenerateContentRequest };\n}\nfunction formatGenerateContentInput(params) {\n    let formattedRequest;\n    if (params.contents) {\n        formattedRequest = params;\n    }\n    else {\n        // Array or string\n        const content = formatNewContent(params);\n        formattedRequest = { contents: [content] };\n    }\n    if (params.systemInstruction) {\n        formattedRequest.systemInstruction = formatSystemInstruction(params.systemInstruction);\n    }\n    return formattedRequest;\n}\nfunction formatEmbedContentInput(params) {\n    if (typeof params === \"string\" || Array.isArray(params)) {\n        const content = formatNewContent(params);\n        return { content };\n    }\n    return params;\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// https://ai.google.dev/api/rest/v1beta/Content#part\nconst VALID_PART_FIELDS = [\n    \"text\",\n    \"inlineData\",\n    \"functionCall\",\n    \"functionResponse\",\n    \"executableCode\",\n    \"codeExecutionResult\",\n];\nconst VALID_PARTS_PER_ROLE = {\n    user: [\"text\", \"inlineData\"],\n    function: [\"functionResponse\"],\n    model: [\"text\", \"functionCall\", \"executableCode\", \"codeExecutionResult\"],\n    // System instructions shouldn't be in history anyway.\n    system: [\"text\"],\n};\nfunction validateChatHistory(history) {\n    let prevContent = false;\n    for (const currContent of history) {\n        const { role, parts } = currContent;\n        if (!prevContent && role !== \"user\") {\n            throw new GoogleGenerativeAIError(`First content should be with role 'user', got ${role}`);\n        }\n        if (!POSSIBLE_ROLES.includes(role)) {\n            throw new GoogleGenerativeAIError(`Each item should include role field. Got ${role} but valid roles are: ${JSON.stringify(POSSIBLE_ROLES)}`);\n        }\n        if (!Array.isArray(parts)) {\n            throw new GoogleGenerativeAIError(\"Content should have 'parts' property with an array of Parts\");\n        }\n        if (parts.length === 0) {\n            throw new GoogleGenerativeAIError(\"Each Content should have at least one part\");\n        }\n        const countFields = {\n            text: 0,\n            inlineData: 0,\n            functionCall: 0,\n            functionResponse: 0,\n            fileData: 0,\n            executableCode: 0,\n            codeExecutionResult: 0,\n        };\n        for (const part of parts) {\n            for (const key of VALID_PART_FIELDS) {\n                if (key in part) {\n                    countFields[key] += 1;\n                }\n            }\n        }\n        const validParts = VALID_PARTS_PER_ROLE[role];\n        for (const key of VALID_PART_FIELDS) {\n            if (!validParts.includes(key) && countFields[key] > 0) {\n                throw new GoogleGenerativeAIError(`Content with role '${role}' can't contain '${key}' part`);\n            }\n        }\n        prevContent = true;\n    }\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Do not log a message for this error.\n */\nconst SILENT_ERROR = \"SILENT_ERROR\";\n/**\n * ChatSession class that enables sending chat messages and stores\n * history of sent and received messages so far.\n *\n * @public\n */\nclass ChatSession {\n    constructor(apiKey, model, params, _requestOptions = {}) {\n        this.model = model;\n        this.params = params;\n        this._requestOptions = _requestOptions;\n        this._history = [];\n        this._sendPromise = Promise.resolve();\n        this._apiKey = apiKey;\n        if (params === null || params === void 0 ? void 0 : params.history) {\n            validateChatHistory(params.history);\n            this._history = params.history;\n        }\n    }\n    /**\n     * Gets the chat history so far. Blocked prompts are not added to history.\n     * Blocked candidates are not added to history, nor are the prompts that\n     * generated them.\n     */\n    async getHistory() {\n        await this._sendPromise;\n        return this._history;\n    }\n    /**\n     * Sends a chat message and receives a non-streaming\n     * {@link GenerateContentResult}.\n     *\n     * Fields set in the optional {@link SingleRequestOptions} parameter will\n     * take precedence over the {@link RequestOptions} values provided at the\n     * time of the {@link GoogleAIFileManager} initialization.\n     */\n    async sendMessage(request, requestOptions = {}) {\n        var _a, _b, _c, _d, _e, _f;\n        await this._sendPromise;\n        const newContent = formatNewContent(request);\n        const generateContentRequest = {\n            safetySettings: (_a = this.params) === null || _a === void 0 ? void 0 : _a.safetySettings,\n            generationConfig: (_b = this.params) === null || _b === void 0 ? void 0 : _b.generationConfig,\n            tools: (_c = this.params) === null || _c === void 0 ? void 0 : _c.tools,\n            toolConfig: (_d = this.params) === null || _d === void 0 ? void 0 : _d.toolConfig,\n            systemInstruction: (_e = this.params) === null || _e === void 0 ? void 0 : _e.systemInstruction,\n            cachedContent: (_f = this.params) === null || _f === void 0 ? void 0 : _f.cachedContent,\n            contents: [...this._history, newContent],\n        };\n        const chatSessionRequestOptions = Object.assign(Object.assign({}, this._requestOptions), requestOptions);\n        let finalResult;\n        // Add onto the chain.\n        this._sendPromise = this._sendPromise\n            .then(() => generateContent(this._apiKey, this.model, generateContentRequest, chatSessionRequestOptions))\n            .then((result) => {\n            var _a;\n            if (result.response.candidates &&\n                result.response.candidates.length > 0) {\n                this._history.push(newContent);\n                const responseContent = Object.assign({ parts: [], \n                    // Response seems to come back without a role set.\n                    role: \"model\" }, (_a = result.response.candidates) === null || _a === void 0 ? void 0 : _a[0].content);\n                this._history.push(responseContent);\n            }\n            else {\n                const blockErrorMessage = formatBlockErrorMessage(result.response);\n                if (blockErrorMessage) {\n                    console.warn(`sendMessage() was unsuccessful. ${blockErrorMessage}. Inspect response object for details.`);\n                }\n            }\n            finalResult = result;\n        });\n        await this._sendPromise;\n        return finalResult;\n    }\n    /**\n     * Sends a chat message and receives the response as a\n     * {@link GenerateContentStreamResult} containing an iterable stream\n     * and a response promise.\n     *\n     * Fields set in the optional {@link SingleRequestOptions} parameter will\n     * take precedence over the {@link RequestOptions} values provided at the\n     * time of the {@link GoogleAIFileManager} initialization.\n     */\n    async sendMessageStream(request, requestOptions = {}) {\n        var _a, _b, _c, _d, _e, _f;\n        await this._sendPromise;\n        const newContent = formatNewContent(request);\n        const generateContentRequest = {\n            safetySettings: (_a = this.params) === null || _a === void 0 ? void 0 : _a.safetySettings,\n            generationConfig: (_b = this.params) === null || _b === void 0 ? void 0 : _b.generationConfig,\n            tools: (_c = this.params) === null || _c === void 0 ? void 0 : _c.tools,\n            toolConfig: (_d = this.params) === null || _d === void 0 ? void 0 : _d.toolConfig,\n            systemInstruction: (_e = this.params) === null || _e === void 0 ? void 0 : _e.systemInstruction,\n            cachedContent: (_f = this.params) === null || _f === void 0 ? void 0 : _f.cachedContent,\n            contents: [...this._history, newContent],\n        };\n        const chatSessionRequestOptions = Object.assign(Object.assign({}, this._requestOptions), requestOptions);\n        const streamPromise = generateContentStream(this._apiKey, this.model, generateContentRequest, chatSessionRequestOptions);\n        // Add onto the chain.\n        this._sendPromise = this._sendPromise\n            .then(() => streamPromise)\n            // This must be handled to avoid unhandled rejection, but jump\n            // to the final catch block with a label to not log this error.\n            .catch((_ignored) => {\n            throw new Error(SILENT_ERROR);\n        })\n            .then((streamResult) => streamResult.response)\n            .then((response) => {\n            if (response.candidates && response.candidates.length > 0) {\n                this._history.push(newContent);\n                const responseContent = Object.assign({}, response.candidates[0].content);\n                // Response seems to come back without a role set.\n                if (!responseContent.role) {\n                    responseContent.role = \"model\";\n                }\n                this._history.push(responseContent);\n            }\n            else {\n                const blockErrorMessage = formatBlockErrorMessage(response);\n                if (blockErrorMessage) {\n                    console.warn(`sendMessageStream() was unsuccessful. ${blockErrorMessage}. Inspect response object for details.`);\n                }\n            }\n        })\n            .catch((e) => {\n            // Errors in streamPromise are already catchable by the user as\n            // streamPromise is returned.\n            // Avoid duplicating the error message in logs.\n            if (e.message !== SILENT_ERROR) {\n                // Users do not have access to _sendPromise to catch errors\n                // downstream from streamPromise, so they should not throw.\n                console.error(e);\n            }\n        });\n        return streamPromise;\n    }\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function countTokens(apiKey, model, params, singleRequestOptions) {\n    const response = await makeModelRequest(model, Task.COUNT_TOKENS, apiKey, false, JSON.stringify(params), singleRequestOptions);\n    return response.json();\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function embedContent(apiKey, model, params, requestOptions) {\n    const response = await makeModelRequest(model, Task.EMBED_CONTENT, apiKey, false, JSON.stringify(params), requestOptions);\n    return response.json();\n}\nasync function batchEmbedContents(apiKey, model, params, requestOptions) {\n    const requestsWithModel = params.requests.map((request) => {\n        return Object.assign(Object.assign({}, request), { model });\n    });\n    const response = await makeModelRequest(model, Task.BATCH_EMBED_CONTENTS, apiKey, false, JSON.stringify({ requests: requestsWithModel }), requestOptions);\n    return response.json();\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Class for generative model APIs.\n * @public\n */\nclass GenerativeModel {\n    constructor(apiKey, modelParams, _requestOptions = {}) {\n        this.apiKey = apiKey;\n        this._requestOptions = _requestOptions;\n        if (modelParams.model.includes(\"/\")) {\n            // Models may be named \"models/model-name\" or \"tunedModels/model-name\"\n            this.model = modelParams.model;\n        }\n        else {\n            // If path is not included, assume it's a non-tuned model.\n            this.model = `models/${modelParams.model}`;\n        }\n        this.generationConfig = modelParams.generationConfig || {};\n        this.safetySettings = modelParams.safetySettings || [];\n        this.tools = modelParams.tools;\n        this.toolConfig = modelParams.toolConfig;\n        this.systemInstruction = formatSystemInstruction(modelParams.systemInstruction);\n        this.cachedContent = modelParams.cachedContent;\n    }\n    /**\n     * Makes a single non-streaming call to the model\n     * and returns an object containing a single {@link GenerateContentResponse}.\n     *\n     * Fields set in the optional {@link SingleRequestOptions} parameter will\n     * take precedence over the {@link RequestOptions} values provided at the\n     * time of the {@link GoogleAIFileManager} initialization.\n     */\n    async generateContent(request, requestOptions = {}) {\n        var _a;\n        const formattedParams = formatGenerateContentInput(request);\n        const generativeModelRequestOptions = Object.assign(Object.assign({}, this._requestOptions), requestOptions);\n        return generateContent(this.apiKey, this.model, Object.assign({ generationConfig: this.generationConfig, safetySettings: this.safetySettings, tools: this.tools, toolConfig: this.toolConfig, systemInstruction: this.systemInstruction, cachedContent: (_a = this.cachedContent) === null || _a === void 0 ? void 0 : _a.name }, formattedParams), generativeModelRequestOptions);\n    }\n    /**\n     * Makes a single streaming call to the model and returns an object\n     * containing an iterable stream that iterates over all chunks in the\n     * streaming response as well as a promise that returns the final\n     * aggregated response.\n     *\n     * Fields set in the optional {@link SingleRequestOptions} parameter will\n     * take precedence over the {@link RequestOptions} values provided at the\n     * time of the {@link GoogleAIFileManager} initialization.\n     */\n    async generateContentStream(request, requestOptions = {}) {\n        var _a;\n        const formattedParams = formatGenerateContentInput(request);\n        const generativeModelRequestOptions = Object.assign(Object.assign({}, this._requestOptions), requestOptions);\n        return generateContentStream(this.apiKey, this.model, Object.assign({ generationConfig: this.generationConfig, safetySettings: this.safetySettings, tools: this.tools, toolConfig: this.toolConfig, systemInstruction: this.systemInstruction, cachedContent: (_a = this.cachedContent) === null || _a === void 0 ? void 0 : _a.name }, formattedParams), generativeModelRequestOptions);\n    }\n    /**\n     * Gets a new {@link ChatSession} instance which can be used for\n     * multi-turn chats.\n     */\n    startChat(startChatParams) {\n        var _a;\n        return new ChatSession(this.apiKey, this.model, Object.assign({ generationConfig: this.generationConfig, safetySettings: this.safetySettings, tools: this.tools, toolConfig: this.toolConfig, systemInstruction: this.systemInstruction, cachedContent: (_a = this.cachedContent) === null || _a === void 0 ? void 0 : _a.name }, startChatParams), this._requestOptions);\n    }\n    /**\n     * Counts the tokens in the provided request.\n     *\n     * Fields set in the optional {@link SingleRequestOptions} parameter will\n     * take precedence over the {@link RequestOptions} values provided at the\n     * time of the {@link GoogleAIFileManager} initialization.\n     */\n    async countTokens(request, requestOptions = {}) {\n        const formattedParams = formatCountTokensInput(request, {\n            model: this.model,\n            generationConfig: this.generationConfig,\n            safetySettings: this.safetySettings,\n            tools: this.tools,\n            toolConfig: this.toolConfig,\n            systemInstruction: this.systemInstruction,\n            cachedContent: this.cachedContent,\n        });\n        const generativeModelRequestOptions = Object.assign(Object.assign({}, this._requestOptions), requestOptions);\n        return countTokens(this.apiKey, this.model, formattedParams, generativeModelRequestOptions);\n    }\n    /**\n     * Embeds the provided content.\n     *\n     * Fields set in the optional {@link SingleRequestOptions} parameter will\n     * take precedence over the {@link RequestOptions} values provided at the\n     * time of the {@link GoogleAIFileManager} initialization.\n     */\n    async embedContent(request, requestOptions = {}) {\n        const formattedParams = formatEmbedContentInput(request);\n        const generativeModelRequestOptions = Object.assign(Object.assign({}, this._requestOptions), requestOptions);\n        return embedContent(this.apiKey, this.model, formattedParams, generativeModelRequestOptions);\n    }\n    /**\n     * Embeds an array of {@link EmbedContentRequest}s.\n     *\n     * Fields set in the optional {@link SingleRequestOptions} parameter will\n     * take precedence over the {@link RequestOptions} values provided at the\n     * time of the {@link GoogleAIFileManager} initialization.\n     */\n    async batchEmbedContents(batchEmbedContentRequest, requestOptions = {}) {\n        const generativeModelRequestOptions = Object.assign(Object.assign({}, this._requestOptions), requestOptions);\n        return batchEmbedContents(this.apiKey, this.model, batchEmbedContentRequest, generativeModelRequestOptions);\n    }\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Top-level class for this SDK\n * @public\n */\nclass GoogleGenerativeAI {\n    constructor(apiKey) {\n        this.apiKey = apiKey;\n    }\n    /**\n     * Gets a {@link GenerativeModel} instance for the provided model name.\n     */\n    getGenerativeModel(modelParams, requestOptions) {\n        if (!modelParams.model) {\n            throw new GoogleGenerativeAIError(`Must provide a model name. ` +\n                `Example: genai.getGenerativeModel({ model: 'my-model-name' })`);\n        }\n        return new GenerativeModel(this.apiKey, modelParams, requestOptions);\n    }\n    /**\n     * Creates a {@link GenerativeModel} instance from provided content cache.\n     */\n    getGenerativeModelFromCachedContent(cachedContent, requestOptions) {\n        if (!cachedContent.name) {\n            throw new GoogleGenerativeAIRequestInputError(\"Cached content must contain a `name` field.\");\n        }\n        if (!cachedContent.model) {\n            throw new GoogleGenerativeAIRequestInputError(\"Cached content must contain a `model` field.\");\n        }\n        const modelParamsFromCache = {\n            model: cachedContent.model,\n            tools: cachedContent.tools,\n            toolConfig: cachedContent.toolConfig,\n            systemInstruction: cachedContent.systemInstruction,\n            cachedContent,\n        };\n        return new GenerativeModel(this.apiKey, modelParamsFromCache, requestOptions);\n    }\n}\n\nexports.ChatSession = ChatSession;\nexports.GenerativeModel = GenerativeModel;\nexports.GoogleGenerativeAI = GoogleGenerativeAI;\nexports.GoogleGenerativeAIError = GoogleGenerativeAIError;\nexports.GoogleGenerativeAIFetchError = GoogleGenerativeAIFetchError;\nexports.GoogleGenerativeAIRequestInputError = GoogleGenerativeAIRequestInputError;\nexports.GoogleGenerativeAIResponseError = GoogleGenerativeAIResponseError;\nexports.POSSIBLE_ROLES = POSSIBLE_ROLES;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/node_modules/@google/generative-ai/dist/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/document.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar document_exports = {};\n__export(document_exports, {\n  Document: () => Document,\n  DocumentDataSchema: () => DocumentDataSchema,\n  MediaPartSchema: () => MediaPartSchema,\n  PartSchema: () => PartSchema,\n  TextPartSchema: () => TextPartSchema\n});\nmodule.exports = __toCommonJS(document_exports);\nvar import_zod = __toESM(__webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/index.cjs\"));\nconst EmptyPartSchema = import_zod.default.object({\n  text: import_zod.default.never().optional(),\n  media: import_zod.default.never().optional()\n});\nconst TextPartSchema = EmptyPartSchema.extend({\n  /** The text of the document. */\n  text: import_zod.default.string()\n});\nconst MediaPartSchema = EmptyPartSchema.extend({\n  media: import_zod.default.object({\n    /** The media content type. Inferred from data uri if not provided. */\n    contentType: import_zod.default.string().optional(),\n    /** A `data:` or `https:` uri containing the media content.  */\n    url: import_zod.default.string()\n  })\n});\nconst PartSchema = import_zod.default.union([TextPartSchema, MediaPartSchema]);\nconst DocumentDataSchema = import_zod.default.object({\n  content: import_zod.default.array(PartSchema),\n  metadata: import_zod.default.record(import_zod.default.string(), import_zod.default.any()).optional()\n});\nclass Document {\n  constructor(data) {\n    this.content = data.content;\n    this.metadata = data.metadata;\n  }\n  static fromText(text, metadata) {\n    return new Document({\n      content: [{ text }],\n      metadata\n    });\n  }\n  /**\n   * Concatenates all `text` parts present in the document with no delimiter.\n   * @returns A string of all concatenated text parts.\n   */\n  text() {\n    return this.content.map((part) => part.text || \"\").join(\"\");\n  }\n  /**\n   * Returns the first media part detected in the document. Useful for extracting\n   * (for example) an image.\n   * @returns The first detected `media` part in the document.\n   */\n  media() {\n    var _a;\n    return ((_a = this.content.find((part) => part.media)) == null ? void 0 : _a.media) || null;\n  }\n  toJSON() {\n    return {\n      content: this.content,\n      metadata: this.metadata\n    };\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=document.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9kb2N1bWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG1HQUFtRztBQUNuRztBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSw4QkFBOEI7QUFDdkc7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLHlCQUF5QixtQkFBTyxDQUFDLDBEQUFLO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixNQUFNO0FBQ3hCO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQU1MO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25hc3RlcnkzNjAvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9saWIvZG9jdW1lbnQuanM/ZGY5YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19nZXRQcm90b09mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0VTTSA9IChtb2QsIGlzTm9kZU1vZGUsIHRhcmdldCkgPT4gKHRhcmdldCA9IG1vZCAhPSBudWxsID8gX19jcmVhdGUoX19nZXRQcm90b09mKG1vZCkpIDoge30sIF9fY29weVByb3BzKFxuICAvLyBJZiB0aGUgaW1wb3J0ZXIgaXMgaW4gbm9kZSBjb21wYXRpYmlsaXR5IG1vZGUgb3IgdGhpcyBpcyBub3QgYW4gRVNNXG4gIC8vIGZpbGUgdGhhdCBoYXMgYmVlbiBjb252ZXJ0ZWQgdG8gYSBDb21tb25KUyBmaWxlIHVzaW5nIGEgQmFiZWwtXG4gIC8vIGNvbXBhdGlibGUgdHJhbnNmb3JtIChpLmUuIFwiX19lc01vZHVsZVwiIGhhcyBub3QgYmVlbiBzZXQpLCB0aGVuIHNldFxuICAvLyBcImRlZmF1bHRcIiB0byB0aGUgQ29tbW9uSlMgXCJtb2R1bGUuZXhwb3J0c1wiIGZvciBub2RlIGNvbXBhdGliaWxpdHkuXG4gIGlzTm9kZU1vZGUgfHwgIW1vZCB8fCAhbW9kLl9fZXNNb2R1bGUgPyBfX2RlZlByb3AodGFyZ2V0LCBcImRlZmF1bHRcIiwgeyB2YWx1ZTogbW9kLCBlbnVtZXJhYmxlOiB0cnVlIH0pIDogdGFyZ2V0LFxuICBtb2RcbikpO1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgZG9jdW1lbnRfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoZG9jdW1lbnRfZXhwb3J0cywge1xuICBEb2N1bWVudDogKCkgPT4gRG9jdW1lbnQsXG4gIERvY3VtZW50RGF0YVNjaGVtYTogKCkgPT4gRG9jdW1lbnREYXRhU2NoZW1hLFxuICBNZWRpYVBhcnRTY2hlbWE6ICgpID0+IE1lZGlhUGFydFNjaGVtYSxcbiAgUGFydFNjaGVtYTogKCkgPT4gUGFydFNjaGVtYSxcbiAgVGV4dFBhcnRTY2hlbWE6ICgpID0+IFRleHRQYXJ0U2NoZW1hXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGRvY3VtZW50X2V4cG9ydHMpO1xudmFyIGltcG9ydF96b2QgPSBfX3RvRVNNKHJlcXVpcmUoXCJ6b2RcIikpO1xuY29uc3QgRW1wdHlQYXJ0U2NoZW1hID0gaW1wb3J0X3pvZC5kZWZhdWx0Lm9iamVjdCh7XG4gIHRleHQ6IGltcG9ydF96b2QuZGVmYXVsdC5uZXZlcigpLm9wdGlvbmFsKCksXG4gIG1lZGlhOiBpbXBvcnRfem9kLmRlZmF1bHQubmV2ZXIoKS5vcHRpb25hbCgpXG59KTtcbmNvbnN0IFRleHRQYXJ0U2NoZW1hID0gRW1wdHlQYXJ0U2NoZW1hLmV4dGVuZCh7XG4gIC8qKiBUaGUgdGV4dCBvZiB0aGUgZG9jdW1lbnQuICovXG4gIHRleHQ6IGltcG9ydF96b2QuZGVmYXVsdC5zdHJpbmcoKVxufSk7XG5jb25zdCBNZWRpYVBhcnRTY2hlbWEgPSBFbXB0eVBhcnRTY2hlbWEuZXh0ZW5kKHtcbiAgbWVkaWE6IGltcG9ydF96b2QuZGVmYXVsdC5vYmplY3Qoe1xuICAgIC8qKiBUaGUgbWVkaWEgY29udGVudCB0eXBlLiBJbmZlcnJlZCBmcm9tIGRhdGEgdXJpIGlmIG5vdCBwcm92aWRlZC4gKi9cbiAgICBjb250ZW50VHlwZTogaW1wb3J0X3pvZC5kZWZhdWx0LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgLyoqIEEgYGRhdGE6YCBvciBgaHR0cHM6YCB1cmkgY29udGFpbmluZyB0aGUgbWVkaWEgY29udGVudC4gICovXG4gICAgdXJsOiBpbXBvcnRfem9kLmRlZmF1bHQuc3RyaW5nKClcbiAgfSlcbn0pO1xuY29uc3QgUGFydFNjaGVtYSA9IGltcG9ydF96b2QuZGVmYXVsdC51bmlvbihbVGV4dFBhcnRTY2hlbWEsIE1lZGlhUGFydFNjaGVtYV0pO1xuY29uc3QgRG9jdW1lbnREYXRhU2NoZW1hID0gaW1wb3J0X3pvZC5kZWZhdWx0Lm9iamVjdCh7XG4gIGNvbnRlbnQ6IGltcG9ydF96b2QuZGVmYXVsdC5hcnJheShQYXJ0U2NoZW1hKSxcbiAgbWV0YWRhdGE6IGltcG9ydF96b2QuZGVmYXVsdC5yZWNvcmQoaW1wb3J0X3pvZC5kZWZhdWx0LnN0cmluZygpLCBpbXBvcnRfem9kLmRlZmF1bHQuYW55KCkpLm9wdGlvbmFsKClcbn0pO1xuY2xhc3MgRG9jdW1lbnQge1xuICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgdGhpcy5jb250ZW50ID0gZGF0YS5jb250ZW50O1xuICAgIHRoaXMubWV0YWRhdGEgPSBkYXRhLm1ldGFkYXRhO1xuICB9XG4gIHN0YXRpYyBmcm9tVGV4dCh0ZXh0LCBtZXRhZGF0YSkge1xuICAgIHJldHVybiBuZXcgRG9jdW1lbnQoe1xuICAgICAgY29udGVudDogW3sgdGV4dCB9XSxcbiAgICAgIG1ldGFkYXRhXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIENvbmNhdGVuYXRlcyBhbGwgYHRleHRgIHBhcnRzIHByZXNlbnQgaW4gdGhlIGRvY3VtZW50IHdpdGggbm8gZGVsaW1pdGVyLlxuICAgKiBAcmV0dXJucyBBIHN0cmluZyBvZiBhbGwgY29uY2F0ZW5hdGVkIHRleHQgcGFydHMuXG4gICAqL1xuICB0ZXh0KCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRlbnQubWFwKChwYXJ0KSA9PiBwYXJ0LnRleHQgfHwgXCJcIikuam9pbihcIlwiKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZmlyc3QgbWVkaWEgcGFydCBkZXRlY3RlZCBpbiB0aGUgZG9jdW1lbnQuIFVzZWZ1bCBmb3IgZXh0cmFjdGluZ1xuICAgKiAoZm9yIGV4YW1wbGUpIGFuIGltYWdlLlxuICAgKiBAcmV0dXJucyBUaGUgZmlyc3QgZGV0ZWN0ZWQgYG1lZGlhYCBwYXJ0IGluIHRoZSBkb2N1bWVudC5cbiAgICovXG4gIG1lZGlhKCkge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKChfYSA9IHRoaXMuY29udGVudC5maW5kKChwYXJ0KSA9PiBwYXJ0Lm1lZGlhKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLm1lZGlhKSB8fCBudWxsO1xuICB9XG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29udGVudDogdGhpcy5jb250ZW50LFxuICAgICAgbWV0YWRhdGE6IHRoaXMubWV0YWRhdGFcbiAgICB9O1xuICB9XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgRG9jdW1lbnQsXG4gIERvY3VtZW50RGF0YVNjaGVtYSxcbiAgTWVkaWFQYXJ0U2NoZW1hLFxuICBQYXJ0U2NoZW1hLFxuICBUZXh0UGFydFNjaGVtYVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kb2N1bWVudC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/embedder.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/embedder.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar embedder_exports = {};\n__export(embedder_exports, {\n  EmbedderInfoSchema: () => EmbedderInfoSchema,\n  EmbeddingSchema: () => EmbeddingSchema,\n  defineEmbedder: () => defineEmbedder,\n  embed: () => embed,\n  embedMany: () => embedMany,\n  embedderRef: () => embedderRef\n});\nmodule.exports = __toCommonJS(embedder_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_registry = __webpack_require__(/*! @genkit-ai/core/registry */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/registry.js\");\nvar z = __toESM(__webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/index.cjs\"));\nvar import_document = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nconst EmbeddingSchema = z.array(z.number());\nconst EmbedRequestSchema = z.object({\n  input: z.array(import_document.DocumentDataSchema),\n  options: z.any().optional()\n});\nconst EmbedResponseSchema = z.object({\n  embeddings: z.array(z.object({ embedding: EmbeddingSchema }))\n  // TODO: stats, etc.\n});\nfunction withMetadata(embedder, configSchema) {\n  const withMeta = embedder;\n  withMeta.__configSchema = configSchema;\n  return withMeta;\n}\nfunction defineEmbedder(options, runner) {\n  const embedder = (0, import_core.defineAction)(\n    {\n      actionType: \"embedder\",\n      name: options.name,\n      inputSchema: options.configSchema ? EmbedRequestSchema.extend({\n        options: options.configSchema.optional()\n      }) : EmbedRequestSchema,\n      outputSchema: EmbedResponseSchema,\n      metadata: {\n        type: \"embedder\",\n        info: options.info\n      }\n    },\n    (i) => runner(\n      i.input.map((dd) => new import_document.Document(dd)),\n      i.options\n    )\n  );\n  const ewm = withMetadata(\n    embedder,\n    options.configSchema\n  );\n  return ewm;\n}\nfunction embed(params) {\n  return __async(this, null, function* () {\n    let embedder;\n    if (typeof params.embedder === \"string\") {\n      embedder = yield (0, import_registry.lookupAction)(`/embedder/${params.embedder}`);\n    } else if (Object.hasOwnProperty.call(params.embedder, \"info\")) {\n      embedder = yield (0, import_registry.lookupAction)(\n        `/embedder/${params.embedder.name}`\n      );\n    } else {\n      embedder = params.embedder;\n    }\n    if (!embedder) {\n      throw new Error(\"Unable to utilize the provided embedder\");\n    }\n    const response = yield embedder({\n      input: typeof params.content === \"string\" ? [import_document.Document.fromText(params.content, params.metadata)] : [params.content],\n      options: params.options\n    });\n    return response.embeddings[0].embedding;\n  });\n}\nfunction embedMany(params) {\n  return __async(this, null, function* () {\n    let embedder;\n    if (typeof params.embedder === \"string\") {\n      embedder = yield (0, import_registry.lookupAction)(`/embedder/${params.embedder}`);\n    } else if (Object.hasOwnProperty.call(params.embedder, \"info\")) {\n      embedder = yield (0, import_registry.lookupAction)(\n        `/embedder/${params.embedder.name}`\n      );\n    } else {\n      embedder = params.embedder;\n    }\n    if (!embedder) {\n      throw new Error(\"Unable to utilize the provided embedder\");\n    }\n    const response = yield embedder({\n      input: params.content.map(\n        (i) => typeof i === \"string\" ? import_document.Document.fromText(i, params.metadata) : i\n      ),\n      options: params.options\n    });\n    return response.embeddings;\n  });\n}\nconst EmbedderInfoSchema = z.object({\n  /** Friendly label for this model (e.g. \"Google AI - Gemini Pro\") */\n  label: z.string().optional(),\n  /** Supported model capabilities. */\n  supports: z.object({\n    /** Model can input this type of data. */\n    input: z.array(z.enum([\"text\", \"image\"])).optional(),\n    /** Model can support multiple languages */\n    multilingual: z.boolean().optional()\n  }).optional(),\n  /** Embedding dimension */\n  dimensions: z.number().optional()\n});\nfunction embedderRef(options) {\n  return __spreadValues({}, options);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=embedder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/embedder.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/evaluator.js":
/*!*****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/evaluator.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar evaluator_exports = {};\n__export(evaluator_exports, {\n  ATTR_PREFIX: () => ATTR_PREFIX,\n  BaseDataPointSchema: () => BaseDataPointSchema,\n  EVALUATOR_METADATA_KEY_DEFINITION: () => EVALUATOR_METADATA_KEY_DEFINITION,\n  EVALUATOR_METADATA_KEY_DISPLAY_NAME: () => EVALUATOR_METADATA_KEY_DISPLAY_NAME,\n  EVALUATOR_METADATA_KEY_IS_BILLED: () => EVALUATOR_METADATA_KEY_IS_BILLED,\n  EvalResponseSchema: () => EvalResponseSchema,\n  EvalResponsesSchema: () => EvalResponsesSchema,\n  EvaluatorInfoSchema: () => EvaluatorInfoSchema,\n  SPAN_STATE_ATTR: () => SPAN_STATE_ATTR,\n  ScoreSchema: () => ScoreSchema,\n  defineEvaluator: () => defineEvaluator,\n  evaluate: () => evaluate,\n  evaluatorRef: () => evaluatorRef\n});\nmodule.exports = __toCommonJS(evaluator_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_logging = __webpack_require__(/*! @genkit-ai/core/logging */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_registry = __webpack_require__(/*! @genkit-ai/core/registry */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/registry.js\");\nvar import_tracing = __webpack_require__(/*! @genkit-ai/core/tracing */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar z = __toESM(__webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/index.cjs\"));\nconst ATTR_PREFIX = \"genkit\";\nconst SPAN_STATE_ATTR = ATTR_PREFIX + \":state\";\nconst BaseDataPointSchema = z.object({\n  input: z.unknown(),\n  output: z.unknown().optional(),\n  context: z.array(z.unknown()).optional(),\n  reference: z.unknown().optional(),\n  testCaseId: z.string().optional(),\n  traceIds: z.array(z.string()).optional()\n});\nconst ScoreSchema = z.object({\n  score: z.union([z.number(), z.string(), z.boolean()]).optional(),\n  // TODO: use StatusSchema\n  error: z.string().optional(),\n  details: z.object({\n    reasoning: z.string().optional()\n  }).passthrough().optional()\n});\nconst EVALUATOR_METADATA_KEY_DISPLAY_NAME = \"evaluatorDisplayName\";\nconst EVALUATOR_METADATA_KEY_DEFINITION = \"evaluatorDefinition\";\nconst EVALUATOR_METADATA_KEY_IS_BILLED = \"evaluatorIsBilled\";\nconst EvalResponseSchema = z.object({\n  sampleIndex: z.number().optional(),\n  testCaseId: z.string().optional(),\n  traceId: z.string().optional(),\n  spanId: z.string().optional(),\n  evaluation: ScoreSchema\n});\nconst EvalResponsesSchema = z.array(EvalResponseSchema);\nfunction withMetadata(evaluator, dataPointType, configSchema) {\n  const withMeta = evaluator;\n  withMeta.__dataPointType = dataPointType;\n  withMeta.__configSchema = configSchema;\n  return withMeta;\n}\nconst EvalRequestSchema = z.object({\n  dataset: z.array(BaseDataPointSchema),\n  options: z.unknown()\n});\nfunction defineEvaluator(options, runner) {\n  var _a;\n  const metadata = {};\n  metadata[EVALUATOR_METADATA_KEY_IS_BILLED] = options.isBilled == void 0 ? true : options.isBilled;\n  metadata[EVALUATOR_METADATA_KEY_DISPLAY_NAME] = options.displayName;\n  metadata[EVALUATOR_METADATA_KEY_DEFINITION] = options.definition;\n  const evaluator = (0, import_core.defineAction)(\n    {\n      actionType: \"evaluator\",\n      name: options.name,\n      inputSchema: EvalRequestSchema.extend({\n        dataset: options.dataPointType ? z.array(options.dataPointType) : z.array(BaseDataPointSchema),\n        options: (_a = options.configSchema) != null ? _a : z.unknown(),\n        evalRunId: z.string()\n      }),\n      outputSchema: EvalResponsesSchema,\n      metadata\n    },\n    (i) => __async(this, null, function* () {\n      let evalResponses = [];\n      for (let index = 0; index < i.dataset.length; index++) {\n        const datapoint = i.dataset[index];\n        try {\n          yield (0, import_tracing.runInNewSpan)(\n            {\n              metadata: {\n                name: `Test Case ${datapoint.testCaseId}`,\n                metadata: { \"evaluator:evalRunId\": i.evalRunId }\n              },\n              labels: {\n                [import_tracing.SPAN_TYPE_ATTR]: \"evaluator\"\n              }\n            },\n            (metadata2, otSpan) => __async(this, null, function* () {\n              const spanId = otSpan.spanContext().spanId;\n              const traceId = otSpan.spanContext().traceId;\n              try {\n                metadata2.input = {\n                  input: datapoint.input,\n                  output: datapoint.output,\n                  context: datapoint.context\n                };\n                const testCaseOutput = yield runner(datapoint, i.options);\n                testCaseOutput.sampleIndex = index;\n                testCaseOutput.spanId = spanId;\n                testCaseOutput.traceId = traceId;\n                metadata2.output = testCaseOutput;\n                evalResponses.push(testCaseOutput);\n                return testCaseOutput;\n              } catch (e) {\n                evalResponses.push({\n                  sampleIndex: index,\n                  spanId,\n                  traceId,\n                  testCaseId: datapoint.testCaseId,\n                  evaluation: {\n                    error: `Evaluation of test case ${datapoint.testCaseId} failed: \n${e.stack}`\n                  }\n                });\n                throw e;\n              }\n            })\n          );\n        } catch (e) {\n          import_logging.logger.error(\n            `Evaluation of test case ${datapoint.testCaseId} failed: \n${e.stack}`\n          );\n          continue;\n        }\n      }\n      return evalResponses;\n    })\n  );\n  const ewm = withMetadata(\n    evaluator,\n    options.dataPointType,\n    options.configSchema\n  );\n  return ewm;\n}\nfunction evaluate(params) {\n  return __async(this, null, function* () {\n    let evaluator;\n    if (typeof params.evaluator === \"string\") {\n      evaluator = yield (0, import_registry.lookupAction)(`/evaluator/${params.evaluator}`);\n    } else if (Object.hasOwnProperty.call(params.evaluator, \"info\")) {\n      evaluator = yield (0, import_registry.lookupAction)(`/evaluator/${params.evaluator.name}`);\n    } else {\n      evaluator = params.evaluator;\n    }\n    if (!evaluator) {\n      throw new Error(\"Unable to utilize the provided evaluator\");\n    }\n    return yield evaluator({\n      dataset: params.dataset,\n      options: params.options\n    });\n  });\n}\nconst EvaluatorInfoSchema = z.object({\n  /** Friendly label for this evaluator */\n  label: z.string().optional(),\n  metrics: z.array(z.string())\n});\nfunction evaluatorRef(options) {\n  return __spreadValues({}, options);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=evaluator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/evaluator.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/extract.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar extract_exports = {};\n__export(extract_exports, {\n  extractJson: () => extractJson,\n  parsePartialJson: () => parsePartialJson\n});\nmodule.exports = __toCommonJS(extract_exports);\nvar import_json5 = __toESM(__webpack_require__(/*! json5 */ \"(action-browser)/./node_modules/json5/dist/index.mjs\"));\nvar import_partial_json = __webpack_require__(/*! partial-json */ \"(action-browser)/./node_modules/partial-json/dist/index.js\");\nfunction parsePartialJson(jsonString) {\n  return import_json5.default.parse(JSON.stringify((0, import_partial_json.parse)(jsonString, import_partial_json.Allow.ALL)));\n}\nfunction extractJson(text, throwOnBadJson) {\n  let openingChar;\n  let closingChar;\n  let startPos;\n  let nestingCount = 0;\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i].replace(/\\u00A0/g, \" \");\n    if (!openingChar && (char === \"{\" || char === \"[\")) {\n      openingChar = char;\n      closingChar = char === \"{\" ? \"}\" : \"]\";\n      startPos = i;\n      nestingCount++;\n    } else if (char === openingChar) {\n      nestingCount++;\n    } else if (char === closingChar) {\n      nestingCount--;\n      if (!nestingCount) {\n        return import_json5.default.parse(text.substring(startPos || 0, i + 1));\n      }\n    }\n  }\n  if (startPos !== void 0 && nestingCount > 0) {\n    try {\n      return parsePartialJson(text.substring(startPos));\n    } catch (e) {\n      if (throwOnBadJson) {\n        throw new Error(`Invalid JSON extracted from model output: ${text}`);\n      }\n      return null;\n    }\n  }\n  if (throwOnBadJson) {\n    throw new Error(`Invalid JSON extracted from model output: ${text}`);\n  }\n  return null;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=extract.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9leHRyYWN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0EsbUdBQW1HO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLDhCQUE4QjtBQUN2RztBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMkJBQTJCLG1CQUFPLENBQUMsbUVBQU87QUFDMUMsMEJBQTBCLG1CQUFPLENBQUMsZ0ZBQWM7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQSwrQkFBK0IsTUFBTTtBQUNyQztBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLHFFQUFxRSxLQUFLO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBaUUsS0FBSztBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FHTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9uYXN0ZXJ5MzYwLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvYWkvbGliL2V4dHJhY3QuanM/NGMwZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19nZXRQcm90b09mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0VTTSA9IChtb2QsIGlzTm9kZU1vZGUsIHRhcmdldCkgPT4gKHRhcmdldCA9IG1vZCAhPSBudWxsID8gX19jcmVhdGUoX19nZXRQcm90b09mKG1vZCkpIDoge30sIF9fY29weVByb3BzKFxuICAvLyBJZiB0aGUgaW1wb3J0ZXIgaXMgaW4gbm9kZSBjb21wYXRpYmlsaXR5IG1vZGUgb3IgdGhpcyBpcyBub3QgYW4gRVNNXG4gIC8vIGZpbGUgdGhhdCBoYXMgYmVlbiBjb252ZXJ0ZWQgdG8gYSBDb21tb25KUyBmaWxlIHVzaW5nIGEgQmFiZWwtXG4gIC8vIGNvbXBhdGlibGUgdHJhbnNmb3JtIChpLmUuIFwiX19lc01vZHVsZVwiIGhhcyBub3QgYmVlbiBzZXQpLCB0aGVuIHNldFxuICAvLyBcImRlZmF1bHRcIiB0byB0aGUgQ29tbW9uSlMgXCJtb2R1bGUuZXhwb3J0c1wiIGZvciBub2RlIGNvbXBhdGliaWxpdHkuXG4gIGlzTm9kZU1vZGUgfHwgIW1vZCB8fCAhbW9kLl9fZXNNb2R1bGUgPyBfX2RlZlByb3AodGFyZ2V0LCBcImRlZmF1bHRcIiwgeyB2YWx1ZTogbW9kLCBlbnVtZXJhYmxlOiB0cnVlIH0pIDogdGFyZ2V0LFxuICBtb2RcbikpO1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgZXh0cmFjdF9leHBvcnRzID0ge307XG5fX2V4cG9ydChleHRyYWN0X2V4cG9ydHMsIHtcbiAgZXh0cmFjdEpzb246ICgpID0+IGV4dHJhY3RKc29uLFxuICBwYXJzZVBhcnRpYWxKc29uOiAoKSA9PiBwYXJzZVBhcnRpYWxKc29uXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGV4dHJhY3RfZXhwb3J0cyk7XG52YXIgaW1wb3J0X2pzb241ID0gX190b0VTTShyZXF1aXJlKFwianNvbjVcIikpO1xudmFyIGltcG9ydF9wYXJ0aWFsX2pzb24gPSByZXF1aXJlKFwicGFydGlhbC1qc29uXCIpO1xuZnVuY3Rpb24gcGFyc2VQYXJ0aWFsSnNvbihqc29uU3RyaW5nKSB7XG4gIHJldHVybiBpbXBvcnRfanNvbjUuZGVmYXVsdC5wYXJzZShKU09OLnN0cmluZ2lmeSgoMCwgaW1wb3J0X3BhcnRpYWxfanNvbi5wYXJzZSkoanNvblN0cmluZywgaW1wb3J0X3BhcnRpYWxfanNvbi5BbGxvdy5BTEwpKSk7XG59XG5mdW5jdGlvbiBleHRyYWN0SnNvbih0ZXh0LCB0aHJvd09uQmFkSnNvbikge1xuICBsZXQgb3BlbmluZ0NoYXI7XG4gIGxldCBjbG9zaW5nQ2hhcjtcbiAgbGV0IHN0YXJ0UG9zO1xuICBsZXQgbmVzdGluZ0NvdW50ID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZXh0Lmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY2hhciA9IHRleHRbaV0ucmVwbGFjZSgvXFx1MDBBMC9nLCBcIiBcIik7XG4gICAgaWYgKCFvcGVuaW5nQ2hhciAmJiAoY2hhciA9PT0gXCJ7XCIgfHwgY2hhciA9PT0gXCJbXCIpKSB7XG4gICAgICBvcGVuaW5nQ2hhciA9IGNoYXI7XG4gICAgICBjbG9zaW5nQ2hhciA9IGNoYXIgPT09IFwie1wiID8gXCJ9XCIgOiBcIl1cIjtcbiAgICAgIHN0YXJ0UG9zID0gaTtcbiAgICAgIG5lc3RpbmdDb3VudCsrO1xuICAgIH0gZWxzZSBpZiAoY2hhciA9PT0gb3BlbmluZ0NoYXIpIHtcbiAgICAgIG5lc3RpbmdDb3VudCsrO1xuICAgIH0gZWxzZSBpZiAoY2hhciA9PT0gY2xvc2luZ0NoYXIpIHtcbiAgICAgIG5lc3RpbmdDb3VudC0tO1xuICAgICAgaWYgKCFuZXN0aW5nQ291bnQpIHtcbiAgICAgICAgcmV0dXJuIGltcG9ydF9qc29uNS5kZWZhdWx0LnBhcnNlKHRleHQuc3Vic3RyaW5nKHN0YXJ0UG9zIHx8IDAsIGkgKyAxKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChzdGFydFBvcyAhPT0gdm9pZCAwICYmIG5lc3RpbmdDb3VudCA+IDApIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHBhcnNlUGFydGlhbEpzb24odGV4dC5zdWJzdHJpbmcoc3RhcnRQb3MpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAodGhyb3dPbkJhZEpzb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIEpTT04gZXh0cmFjdGVkIGZyb20gbW9kZWwgb3V0cHV0OiAke3RleHR9YCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbiAgaWYgKHRocm93T25CYWRKc29uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIEpTT04gZXh0cmFjdGVkIGZyb20gbW9kZWwgb3V0cHV0OiAke3RleHR9YCk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZXh0cmFjdEpzb24sXG4gIHBhcnNlUGFydGlhbEpzb25cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXh0cmFjdC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/generate.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/generate.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __knownSymbol = (name, symbol) => {\n  return (symbol = Symbol[name]) ? symbol : Symbol.for(\"Symbol.\" + name);\n};\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar __await = function(promise, isYieldStar) {\n  this[0] = promise;\n  this[1] = isYieldStar;\n};\nvar __asyncGenerator = (__this, __arguments, generator) => {\n  var resume = (k, v, yes, no) => {\n    try {\n      var x = generator[k](v), isAwait = (v = x.value) instanceof __await, done = x.done;\n      Promise.resolve(isAwait ? v[0] : v).then((y) => isAwait ? resume(k === \"return\" ? k : \"next\", v[1] ? { done: y.done, value: y.value } : y, yes, no) : yes({ value: y, done })).catch((e) => resume(\"throw\", e, yes, no));\n    } catch (e) {\n      no(e);\n    }\n  };\n  var method = (k) => it[k] = (x) => new Promise((yes, no) => resume(k, x, yes, no));\n  var it = {};\n  return generator = generator.apply(__this, __arguments), it[__knownSymbol(\"asyncIterator\")] = () => it, method(\"next\"), method(\"throw\"), method(\"return\"), it;\n};\nvar generate_exports = {};\n__export(generate_exports, {\n  Candidate: () => Candidate,\n  GenerateResponse: () => GenerateResponse,\n  GenerateResponseChunk: () => GenerateResponseChunk,\n  Message: () => Message,\n  NoValidCandidatesError: () => NoValidCandidatesError,\n  generate: () => generate,\n  generateStream: () => generateStream,\n  toGenerateRequest: () => toGenerateRequest\n});\nmodule.exports = __toCommonJS(generate_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_registry = __webpack_require__(/*! @genkit-ai/core/registry */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/registry.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_extract = __webpack_require__(/*! ./extract.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js\");\nvar import_tool = __webpack_require__(/*! ./tool.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/tool.js\");\nclass Message {\n  constructor(message) {\n    this.role = message.role;\n    this.content = message.content;\n  }\n  /**\n   * If a message contains a `data` part, it is returned. Otherwise, the `output()`\n   * method extracts the first valid JSON object or array from the text contained in\n   * the message and returns it.\n   *\n   * @returns The structured output contained in the message.\n   */\n  output() {\n    return this.data() || (0, import_extract.extractJson)(this.text());\n  }\n  toolResponseParts() {\n    const res = this.content.filter((part) => !!part.toolResponse);\n    return res;\n  }\n  /**\n   * Concatenates all `text` parts present in the message with no delimiter.\n   * @returns A string of all concatenated text parts.\n   */\n  text() {\n    return this.content.map((part) => part.text || \"\").join(\"\");\n  }\n  /**\n   * Returns the first media part detected in the message. Useful for extracting\n   * (for example) an image from a generation expected to create one.\n   * @returns The first detected `media` part in the message.\n   */\n  media() {\n    var _a;\n    return ((_a = this.content.find((part) => part.media)) == null ? void 0 : _a.media) || null;\n  }\n  /**\n   * Returns the first detected `data` part of a message.\n   * @returns The first `data` part detected in the message (if any).\n   */\n  data() {\n    var _a;\n    return (_a = this.content.find((part) => part.data)) == null ? void 0 : _a.data;\n  }\n  /**\n   * Returns all tool request found in this message.\n   * @returns Array of all tool request found in this message.\n   */\n  toolRequests() {\n    return this.content.filter(\n      (part) => !!part.toolRequest\n    );\n  }\n  /**\n   * Converts the Message to a plain JS object.\n   * @returns Plain JS object representing the data contained in the message.\n   */\n  toJSON() {\n    return {\n      role: this.role,\n      content: [...this.content]\n    };\n  }\n}\nclass Candidate {\n  constructor(candidate, request) {\n    this.message = new Message(candidate.message);\n    this.index = candidate.index;\n    this.usage = candidate.usage || {};\n    this.finishReason = candidate.finishReason;\n    this.finishMessage = candidate.finishMessage || \"\";\n    this.custom = candidate.custom;\n    this.request = request;\n  }\n  /**\n   * If a candidate's message contains a `data` part, it is returned. Otherwise, the `output()`\n   * method extracts the first valid JSON object or array from the text contained in\n   * the candidate's message and returns it.\n   *\n   * @returns The structured output contained in the candidate.\n   */\n  output() {\n    return this.message.output();\n  }\n  /**\n   * Concatenates all `text` parts present in the candidate's message with no delimiter.\n   * @returns A string of all concatenated text parts.\n   */\n  text() {\n    return this.message.text();\n  }\n  /**\n   * Returns the first detected media part in the candidate's message. Useful for extracting\n   * (for example) an image from a generation expected to create one.\n   * @returns The first detected `media` part in the candidate.\n   */\n  media() {\n    return this.message.media();\n  }\n  /**\n   * Returns the first detected `data` part of a candidate's message.\n   * @returns The first `data` part detected in the candidate (if any).\n   */\n  data() {\n    return this.message.data();\n  }\n  /**\n   * Returns all tool request found in this candidate.\n   * @returns Array of all tool request found in this candidate.\n   */\n  toolRequests() {\n    return this.message.toolRequests();\n  }\n  /**\n   * Determine whether this candidate has output that conforms to a provided schema.\n   *\n   * @param request A request containing output schema to validate against. If not provided, uses request embedded in candidate.\n   * @returns True if output matches request schema or if no request schema is provided.\n   */\n  hasValidOutput(request) {\n    var _a, _b, _c;\n    const o = this.output();\n    if (!request && !this.request) {\n      return true;\n    }\n    const { valid } = (0, import_schema.validateSchema)(o, {\n      jsonSchema: ((_a = request == null ? void 0 : request.output) == null ? void 0 : _a.schema) || ((_c = (_b = this.request) == null ? void 0 : _b.output) == null ? void 0 : _c.schema)\n    });\n    return valid;\n  }\n  /**\n   * Appends the message generated by this candidate to the messages already\n   * present in the generation request. The result of this method can be safely\n   * serialized to JSON for persistence in a database.\n   * @returns A serializable list of messages compatible with `generate({history})`.\n   */\n  toHistory() {\n    var _a;\n    if (!this.request)\n      throw new Error(\n        \"Can't construct history for candidate without request data.\"\n      );\n    return [...(_a = this.request) == null ? void 0 : _a.messages, this.message.toJSON()];\n  }\n  /**\n   * Converts the Candidate to a plain JS object.\n   * @returns Plain JS object representing the data contained in the candidate.\n   */\n  toJSON() {\n    var _a, _b;\n    return {\n      message: this.message.toJSON(),\n      index: this.index,\n      usage: this.usage,\n      finishReason: this.finishReason,\n      finishMessage: this.finishMessage,\n      custom: !!this.custom && ((_b = (_a = this.custom).toJSON) == null ? void 0 : _b.call(_a)) || this.custom\n    };\n  }\n}\nclass GenerateResponse {\n  /**\n   * If the selected candidate's message contains a `data` part, it is returned. Otherwise,\n   * the `output()` method extracts the first valid JSON object or array from the text\n   * contained in the selected candidate's message and returns it.\n   *\n   * @param index The candidate index from which to extract output. If not provided, finds first candidate that conforms to output schema.\n   * @returns The structured output contained in the selected candidate.\n   */\n  output(index) {\n    var _a, _b;\n    if (index === void 0) {\n      const c = this.candidates.find((c2) => c2.hasValidOutput(this.request));\n      return (c == null ? void 0 : c.output()) || ((_a = this.candidates[0]) == null ? void 0 : _a.output());\n    }\n    return ((_b = this.candidates[index]) == null ? void 0 : _b.output()) || null;\n  }\n  /**\n   * Concatenates all `text` parts present in the candidate's message with no delimiter.\n   * @param index The candidate index from which to extract text, defaults to first candidate.\n   * @returns A string of all concatenated text parts.\n   */\n  text(index = 0) {\n    var _a;\n    return ((_a = this.candidates[index]) == null ? void 0 : _a.text()) || \"\";\n  }\n  /**\n   * Returns the first detected media part in the selected candidate's message. Useful for\n   * extracting (for example) an image from a generation expected to create one.\n   * @param index The candidate index from which to extract media, defaults to first candidate.\n   * @returns The first detected `media` part in the candidate.\n   */\n  media(index = 0) {\n    var _a;\n    return ((_a = this.candidates[index]) == null ? void 0 : _a.media()) || null;\n  }\n  /**\n   * Returns the first detected `data` part of the selected candidate's message.\n   * @param index The candidate index from which to extract data, defaults to first candidate.\n   * @returns The first `data` part detected in the candidate (if any).\n   */\n  data(index = 0) {\n    var _a;\n    return ((_a = this.candidates[index]) == null ? void 0 : _a.data()) || null;\n  }\n  /**\n   * Returns all tool request found in the candidate.\n   * @param index The candidate index from which to extract tool requests, defaults to first candidate.\n   * @returns Array of all tool request found in the candidate.\n   */\n  toolRequests(index = 0) {\n    return this.candidates[index].toolRequests();\n  }\n  /**\n   * Appends the message generated by the selected candidate to the messages already\n   * present in the generation request. The result of this method can be safely\n   * serialized to JSON for persistence in a database.\n   * @param index The candidate index to utilize during conversion, defaults to first candidate.\n   * @returns A serializable list of messages compatible with `generate({history})`.\n   */\n  toHistory(index = 0) {\n    return this.candidates[index].toHistory();\n  }\n  constructor(response, request) {\n    this.candidates = (response.candidates || []).map(\n      (candidate) => new Candidate(candidate, request)\n    );\n    this.usage = response.usage || {};\n    this.custom = response.custom || {};\n    this.request = request;\n  }\n  toJSON() {\n    var _a, _b;\n    return {\n      candidates: this.candidates.map((candidate) => candidate.toJSON()),\n      usage: this.usage,\n      custom: ((_b = (_a = this.custom).toJSON) == null ? void 0 : _b.call(_a)) || this.custom,\n      request: this.request\n    };\n  }\n}\nclass GenerateResponseChunk {\n  constructor(data, accumulatedChunks) {\n    this.index = data.index;\n    this.content = data.content || [];\n    this.custom = data.custom;\n    this.accumulatedChunks = accumulatedChunks;\n  }\n  /**\n   * Concatenates all `text` parts present in the chunk with no delimiter.\n   * @returns A string of all concatenated text parts.\n   */\n  text() {\n    return this.content.map((part) => part.text || \"\").join(\"\");\n  }\n  /**\n   * Returns the first media part detected in the chunk. Useful for extracting\n   * (for example) an image from a generation expected to create one.\n   * @returns The first detected `media` part in the chunk.\n   */\n  media() {\n    var _a;\n    return ((_a = this.content.find((part) => part.media)) == null ? void 0 : _a.media) || null;\n  }\n  /**\n   * Returns the first detected `data` part of a chunk.\n   * @returns The first `data` part detected in the chunk (if any).\n   */\n  data() {\n    var _a;\n    return (_a = this.content.find((part) => part.data)) == null ? void 0 : _a.data;\n  }\n  /**\n   * Returns all tool request found in this chunk.\n   * @returns Array of all tool request found in this chunk.\n   */\n  toolRequests() {\n    return this.content.filter(\n      (part) => !!part.toolRequest\n    );\n  }\n  /**\n   * Attempts to extract the longest valid JSON substring from the accumulated chunks.\n   * @returns The longest valid JSON substring found in the accumulated chunks.\n   */\n  output() {\n    if (!this.accumulatedChunks)\n      return null;\n    const accumulatedText = this.accumulatedChunks.map((chunk) => chunk.content.map((part) => part.text || \"\").join(\"\")).join(\"\");\n    return (0, import_extract.extractJson)(accumulatedText, false);\n  }\n  toJSON() {\n    return { index: this.index, content: this.content, custom: this.custom };\n  }\n}\nfunction getRoleFromPart(part) {\n  if (part.toolRequest !== void 0)\n    return \"model\";\n  if (part.toolResponse !== void 0)\n    return \"tool\";\n  if (part.text !== void 0)\n    return \"user\";\n  if (part.media !== void 0)\n    return \"user\";\n  if (part.data !== void 0)\n    return \"user\";\n  throw new Error(\"No recognized fields in content\");\n}\nfunction inferRoleFromParts(parts) {\n  const uniqueRoles = /* @__PURE__ */ new Set();\n  for (const part of parts) {\n    const role = getRoleFromPart(part);\n    uniqueRoles.add(role);\n    if (uniqueRoles.size > 1) {\n      throw new Error(\"Contents contain mixed roles\");\n    }\n  }\n  return Array.from(uniqueRoles)[0];\n}\nfunction toGenerateRequest(options) {\n  return __async(this, null, function* () {\n    var _a, _b, _c, _d, _e;\n    const promptMessage = { role: \"user\", content: [] };\n    if (typeof options.prompt === \"string\") {\n      promptMessage.content.push({ text: options.prompt });\n    } else if (Array.isArray(options.prompt)) {\n      promptMessage.role = inferRoleFromParts(options.prompt);\n      promptMessage.content.push(...options.prompt);\n    } else {\n      promptMessage.role = inferRoleFromParts([options.prompt]);\n      promptMessage.content.push(options.prompt);\n    }\n    const messages = [...options.history || [], promptMessage];\n    let tools;\n    if (options.tools) {\n      tools = yield (0, import_tool.resolveTools)(options.tools);\n    }\n    const out = {\n      messages,\n      candidates: options.candidates,\n      config: options.config,\n      context: options.context,\n      tools: (tools == null ? void 0 : tools.map((tool) => (0, import_tool.toToolDefinition)(tool))) || [],\n      output: {\n        format: ((_a = options.output) == null ? void 0 : _a.format) || (((_b = options.output) == null ? void 0 : _b.schema) || ((_c = options.output) == null ? void 0 : _c.jsonSchema) ? \"json\" : \"text\"),\n        schema: (0, import_schema.toJsonSchema)({\n          schema: (_d = options.output) == null ? void 0 : _d.schema,\n          jsonSchema: (_e = options.output) == null ? void 0 : _e.jsonSchema\n        })\n      }\n    };\n    if (!out.output.schema)\n      delete out.output.schema;\n    return out;\n  });\n}\nconst isValidCandidate = (candidate, tools) => {\n  const toolCalls = candidate.message.content.filter(\n    (part) => !!part.toolRequest\n  );\n  return toolCalls.every((toolCall) => {\n    var _a;\n    const tool = tools == null ? void 0 : tools.find(\n      (tool2) => {\n        var _a2;\n        return tool2.__action.name === ((_a2 = toolCall.toolRequest) == null ? void 0 : _a2.name);\n      }\n    );\n    if (!tool)\n      return false;\n    const { valid } = (0, import_schema.validateSchema)((_a = toolCall.toolRequest) == null ? void 0 : _a.input, {\n      schema: tool.__action.inputSchema,\n      jsonSchema: tool.__action.inputJsonSchema\n    });\n    return valid;\n  });\n};\nfunction resolveModel(options) {\n  return __async(this, null, function* () {\n    var _a, _b;\n    let model = options.model;\n    if (!model) {\n      if ((_b = (_a = import_core.config) == null ? void 0 : _a.options) == null ? void 0 : _b.defaultModel) {\n        model = typeof import_core.config.options.defaultModel.name === \"string\" ? import_core.config.options.defaultModel.name : import_core.config.options.defaultModel.name.name;\n        if ((!options.config || Object.keys(options.config).length === 0) && import_core.config.options.defaultModel.config) {\n          options.config = import_core.config.options.defaultModel.config;\n        }\n      } else {\n        throw new Error(\"Unable to resolve model.\");\n      }\n    }\n    if (typeof model === \"string\") {\n      return yield (0, import_registry.lookupAction)(`/model/${model}`);\n    } else if (model.hasOwnProperty(\"info\")) {\n      const ref = model;\n      return yield (0, import_registry.lookupAction)(`/model/${ref.name}`);\n    } else {\n      return model;\n    }\n  });\n}\nclass NoValidCandidatesError extends import_core.GenkitError {\n  constructor({\n    message,\n    response,\n    detail\n  }) {\n    super({\n      status: \"FAILED_PRECONDITION\",\n      message,\n      detail\n    });\n    this.detail = __spreadValues({ response }, detail);\n  }\n}\nfunction generate(options) {\n  return __async(this, null, function* () {\n    var _a, _b, _c, _d, _e;\n    const resolvedOptions = yield Promise.resolve(options);\n    const model = yield resolveModel(resolvedOptions);\n    if (!model) {\n      throw new Error(`Model ${JSON.stringify(resolvedOptions.model)} not found`);\n    }\n    let tools;\n    if ((_a = resolvedOptions.tools) == null ? void 0 : _a.length) {\n      if (!((_c = (_b = model.__action.metadata) == null ? void 0 : _b.model.supports) == null ? void 0 : _c.tools)) {\n        throw new Error(\n          `Model ${JSON.stringify(resolvedOptions.model)} does not support tools, but some tools were supplied to generate(). Please call generate() without tools if you would like to use this model.`\n        );\n      }\n      tools = yield (0, import_tool.resolveTools)(resolvedOptions.tools);\n    }\n    const request = yield toGenerateRequest(resolvedOptions);\n    const accumulatedChunks = [];\n    const response = yield (0, import_core.runWithStreamingCallback)(\n      resolvedOptions.streamingCallback ? (chunk) => {\n        accumulatedChunks.push(chunk);\n        if (resolvedOptions.streamingCallback) {\n          resolvedOptions.streamingCallback(\n            new GenerateResponseChunk(chunk, accumulatedChunks)\n          );\n        }\n      } : void 0,\n      () => __async(this, null, function* () {\n        return new GenerateResponse(yield model(request), request);\n      })\n    );\n    if (!response.candidates.some(\n      (c) => [\"stop\", \"length\"].includes(c.finishReason)\n    )) {\n      throw new NoValidCandidatesError({\n        message: `All candidates returned finishReason issues: ${JSON.stringify(response.candidates.map((c) => c.finishReason))}`,\n        response\n      });\n    }\n    if (((_d = resolvedOptions.output) == null ? void 0 : _d.schema) || ((_e = resolvedOptions.output) == null ? void 0 : _e.jsonSchema)) {\n      const candidateErrors = response.candidates.map((c) => {\n        var _a2, _b2;\n        if (c.text() === \"\" && c.data() === null)\n          return null;\n        try {\n          (0, import_schema.parseSchema)(c.output(), {\n            jsonSchema: (_a2 = resolvedOptions.output) == null ? void 0 : _a2.jsonSchema,\n            schema: (_b2 = resolvedOptions.output) == null ? void 0 : _b2.schema\n          });\n          return null;\n        } catch (e) {\n          return e;\n        }\n      });\n      if (candidateErrors.every((c) => !!c)) {\n        throw new NoValidCandidatesError({\n          message: `Generation resulted in no candidates matching provided output schema.${candidateErrors.map((e, i) => `\n\nCandidate[${i}] ${e.toString()}`)}`,\n          response,\n          detail: {\n            candidateErrors\n          }\n        });\n      }\n    }\n    let selected;\n    for (const candidate of response.candidates) {\n      if (isValidCandidate(candidate, tools || [])) {\n        selected = candidate;\n        break;\n      }\n    }\n    if (!selected) {\n      throw new Error(\"No valid candidates found\");\n    }\n    const toolCalls = selected.message.content.filter(\n      (part) => !!part.toolRequest\n    );\n    if (resolvedOptions.returnToolRequests || toolCalls.length === 0) {\n      return response;\n    }\n    const toolResponses = yield Promise.all(\n      toolCalls.map((part) => __async(this, null, function* () {\n        var _a2;\n        if (!part.toolRequest) {\n          throw Error(\n            \"Tool request expected but not provided in tool request part\"\n          );\n        }\n        const tool = tools == null ? void 0 : tools.find(\n          (tool2) => {\n            var _a3;\n            return tool2.__action.name === ((_a3 = part.toolRequest) == null ? void 0 : _a3.name);\n          }\n        );\n        if (!tool) {\n          throw Error(\"Tool not found\");\n        }\n        return {\n          toolResponse: {\n            name: part.toolRequest.name,\n            ref: part.toolRequest.ref,\n            output: yield tool((_a2 = part.toolRequest) == null ? void 0 : _a2.input)\n          }\n        };\n      }))\n    );\n    resolvedOptions.history = request.messages;\n    resolvedOptions.history.push(selected.message);\n    resolvedOptions.prompt = toolResponses;\n    return yield generate(resolvedOptions);\n  });\n}\nfunction createPromise() {\n  let resolve, reject;\n  let promise = new Promise((res, rej) => [resolve, reject] = [res, rej]);\n  return { resolve, reject, promise };\n}\nfunction generateStream(options) {\n  return __async(this, null, function* () {\n    let firstChunkSent = false;\n    return new Promise(\n      (initialResolve, initialReject) => {\n        const {\n          resolve: finalResolve,\n          reject: finalReject,\n          promise: finalPromise\n        } = createPromise();\n        let provideNextChunk, nextChunk;\n        ({ resolve: provideNextChunk, promise: nextChunk } = createPromise());\n        function chunkStream() {\n          return __asyncGenerator(this, null, function* () {\n            while (true) {\n              const next = yield new __await(nextChunk);\n              if (!next)\n                break;\n              yield next;\n            }\n          });\n        }\n        try {\n          generate(__spreadProps(__spreadValues({}, options), {\n            streamingCallback: (chunk) => {\n              firstChunkSent = true;\n              provideNextChunk(chunk);\n              ({ resolve: provideNextChunk, promise: nextChunk } = createPromise());\n            }\n          })).then((result) => {\n            provideNextChunk(null);\n            finalResolve(result);\n          });\n        } catch (e) {\n          if (!firstChunkSent) {\n            initialReject(e);\n            return;\n          }\n          provideNextChunk(null);\n          finalReject(e);\n        }\n        initialResolve({\n          response: () => finalPromise,\n          stream: chunkStream\n        });\n      }\n    );\n  });\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=generate.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/generate.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/model.js":
/*!*************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/model.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar model_exports = {};\n__export(model_exports, {\n  CandidateErrorSchema: () => CandidateErrorSchema,\n  CandidateSchema: () => CandidateSchema,\n  CustomPartSchema: () => CustomPartSchema,\n  DataPartSchema: () => DataPartSchema,\n  GenerateRequestSchema: () => GenerateRequestSchema,\n  GenerateResponseChunkSchema: () => GenerateResponseChunkSchema,\n  GenerateResponseSchema: () => GenerateResponseSchema,\n  GenerationCommonConfigSchema: () => GenerationCommonConfigSchema,\n  GenerationUsageSchema: () => GenerationUsageSchema,\n  MediaPartSchema: () => MediaPartSchema,\n  MessageSchema: () => MessageSchema,\n  ModelInfoSchema: () => ModelInfoSchema,\n  PartSchema: () => PartSchema,\n  RoleSchema: () => RoleSchema,\n  TextPartSchema: () => TextPartSchema,\n  ToolDefinitionSchema: () => ToolDefinitionSchema,\n  ToolRequestPartSchema: () => ToolRequestPartSchema,\n  ToolResponsePartSchema: () => ToolResponsePartSchema,\n  defineModel: () => defineModel,\n  getBasicUsageStats: () => getBasicUsageStats,\n  modelRef: () => modelRef\n});\nmodule.exports = __toCommonJS(model_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar clc = __toESM(__webpack_require__(/*! colorette */ \"(action-browser)/./node_modules/colorette/index.cjs\"));\nvar import_node_perf_hooks = __webpack_require__(/*! node:perf_hooks */ \"node:perf_hooks\");\nvar import_zod = __webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/index.cjs\");\nvar import_document = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nvar import_middleware = __webpack_require__(/*! ./model/middleware.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model/middleware.js\");\nconst EmptyPartSchema = import_zod.z.object({\n  text: import_zod.z.never().optional(),\n  media: import_zod.z.never().optional(),\n  toolRequest: import_zod.z.never().optional(),\n  toolResponse: import_zod.z.never().optional(),\n  data: import_zod.z.unknown().optional(),\n  metadata: import_zod.z.record(import_zod.z.unknown()).optional(),\n  custom: import_zod.z.record(import_zod.z.unknown()).optional()\n});\nconst TextPartSchema = EmptyPartSchema.extend({\n  /** The text of the message. */\n  text: import_zod.z.string()\n});\nconst MediaPartSchema = EmptyPartSchema.extend({\n  media: import_zod.z.object({\n    /** The media content type. Inferred from data uri if not provided. */\n    contentType: import_zod.z.string().optional(),\n    /** A `data:` or `https:` uri containing the media content.  */\n    url: import_zod.z.string()\n  })\n});\nconst ToolRequestPartSchema = EmptyPartSchema.extend({\n  /** A request for a tool to be executed, usually provided by a model. */\n  toolRequest: import_zod.z.object({\n    /** The call id or reference for a specific request. */\n    ref: import_zod.z.string().optional(),\n    /** The name of the tool to call. */\n    name: import_zod.z.string(),\n    /** The input parameters for the tool, usually a JSON object. */\n    input: import_zod.z.unknown().optional()\n  })\n});\nconst ToolResponsePartSchema = EmptyPartSchema.extend({\n  /** A provided response to a tool call. */\n  toolResponse: import_zod.z.object({\n    /** The call id or reference for a specific request. */\n    ref: import_zod.z.string().optional(),\n    /** The name of the tool. */\n    name: import_zod.z.string(),\n    /** The output data returned from the tool, usually a JSON object. */\n    output: import_zod.z.unknown().optional()\n  })\n});\nconst DataPartSchema = EmptyPartSchema.extend({\n  data: import_zod.z.unknown()\n});\nconst CustomPartSchema = EmptyPartSchema.extend({\n  custom: import_zod.z.record(import_zod.z.any())\n});\nconst PartSchema = import_zod.z.union([\n  TextPartSchema,\n  MediaPartSchema,\n  ToolRequestPartSchema,\n  ToolResponsePartSchema,\n  DataPartSchema,\n  CustomPartSchema\n]);\nconst RoleSchema = import_zod.z.enum([\"system\", \"user\", \"model\", \"tool\"]);\nconst MessageSchema = import_zod.z.object({\n  role: RoleSchema,\n  content: import_zod.z.array(PartSchema),\n  metadata: import_zod.z.record(import_zod.z.unknown()).optional()\n});\nconst OutputFormatSchema = import_zod.z.enum([\"json\", \"text\", \"media\"]);\nconst ModelInfoSchema = import_zod.z.object({\n  /** Acceptable names for this model (e.g. different versions). */\n  versions: import_zod.z.array(import_zod.z.string()).optional(),\n  /** Friendly label for this model (e.g. \"Google AI - Gemini Pro\") */\n  label: import_zod.z.string().optional(),\n  /** Supported model capabilities. */\n  supports: import_zod.z.object({\n    /** Model can process historical messages passed with a prompt. */\n    multiturn: import_zod.z.boolean().optional(),\n    /** Model can process media as part of the prompt (multimodal input). */\n    media: import_zod.z.boolean().optional(),\n    /** Model can perform tool calls. */\n    tools: import_zod.z.boolean().optional(),\n    /** Model can accept messages with role \"system\". */\n    systemRole: import_zod.z.boolean().optional(),\n    /** Model can output this type of data. */\n    output: import_zod.z.array(OutputFormatSchema).optional(),\n    /** Model can natively support document-based context grounding. */\n    context: import_zod.z.boolean().optional()\n  }).optional(),\n  /** At which stage of development this model is.\n   * - `featured` models are recommended for general use.\n   * - `stable` models are well-tested and reliable.\n   * - `unstable` models are experimental and may change.\n   * - `legacy` models are no longer recommended for new projects.\n   * - `deprecated` models are deprecated by the provider and may be removed in future versions.\n   */\n  stage: import_zod.z.enum([\"featured\", \"stable\", \"unstable\", \"legacy\", \"deprecated\"]).optional()\n});\nconst ToolDefinitionSchema = import_zod.z.object({\n  name: import_zod.z.string(),\n  description: import_zod.z.string(),\n  inputSchema: import_zod.z.record(import_zod.z.any()).describe(\"Valid JSON Schema representing the input of the tool.\"),\n  outputSchema: import_zod.z.record(import_zod.z.any()).describe(\"Valid JSON Schema describing the output of the tool.\").optional()\n});\nconst GenerationCommonConfigSchema = import_zod.z.object({\n  /** A specific version of a model family, e.g. `gemini-1.0-pro-001` for the `gemini-1.0-pro` family. */\n  version: import_zod.z.string().optional(),\n  temperature: import_zod.z.number().optional(),\n  maxOutputTokens: import_zod.z.number().optional(),\n  topK: import_zod.z.number().optional(),\n  topP: import_zod.z.number().optional(),\n  stopSequences: import_zod.z.array(import_zod.z.string()).optional()\n});\nconst OutputConfigSchema = import_zod.z.object({\n  format: OutputFormatSchema.optional(),\n  schema: import_zod.z.record(import_zod.z.any()).optional()\n});\nconst GenerateRequestSchema = import_zod.z.object({\n  messages: import_zod.z.array(MessageSchema),\n  config: import_zod.z.any().optional(),\n  tools: import_zod.z.array(ToolDefinitionSchema).optional(),\n  output: OutputConfigSchema.optional(),\n  context: import_zod.z.array(import_document.DocumentDataSchema).optional(),\n  candidates: import_zod.z.number().optional()\n});\nconst GenerationUsageSchema = import_zod.z.object({\n  inputTokens: import_zod.z.number().optional(),\n  outputTokens: import_zod.z.number().optional(),\n  totalTokens: import_zod.z.number().optional(),\n  inputCharacters: import_zod.z.number().optional(),\n  outputCharacters: import_zod.z.number().optional(),\n  inputImages: import_zod.z.number().optional(),\n  outputImages: import_zod.z.number().optional(),\n  inputVideos: import_zod.z.number().optional(),\n  outputVideos: import_zod.z.number().optional(),\n  inputAudioFiles: import_zod.z.number().optional(),\n  outputAudioFiles: import_zod.z.number().optional(),\n  custom: import_zod.z.record(import_zod.z.number()).optional()\n});\nconst CandidateSchema = import_zod.z.object({\n  index: import_zod.z.number(),\n  message: MessageSchema,\n  usage: GenerationUsageSchema.optional(),\n  finishReason: import_zod.z.enum([\"stop\", \"length\", \"blocked\", \"other\", \"unknown\"]),\n  finishMessage: import_zod.z.string().optional(),\n  custom: import_zod.z.unknown()\n});\nconst CandidateErrorSchema = import_zod.z.object({\n  index: import_zod.z.number(),\n  code: import_zod.z.enum([\"blocked\", \"other\", \"unknown\"]),\n  message: import_zod.z.string().optional()\n});\nconst GenerateResponseSchema = import_zod.z.object({\n  candidates: import_zod.z.array(CandidateSchema),\n  latencyMs: import_zod.z.number().optional(),\n  usage: GenerationUsageSchema.optional(),\n  custom: import_zod.z.unknown(),\n  request: GenerateRequestSchema.optional()\n});\nconst GenerateResponseChunkSchema = import_zod.z.object({\n  /** The index of the candidate this chunk belongs to. */\n  index: import_zod.z.number(),\n  /** The chunk of content to stream right now. */\n  content: import_zod.z.array(PartSchema),\n  /** Model-specific extra information attached to this chunk. */\n  custom: import_zod.z.unknown().optional()\n});\nfunction defineModel(options, runner) {\n  var _a;\n  const label = options.label || options.name;\n  const middleware = [\n    ...options.use || [],\n    (0, import_middleware.validateSupport)(options)\n  ];\n  if (!((_a = options == null ? void 0 : options.supports) == null ? void 0 : _a.context))\n    middleware.push((0, import_middleware.augmentWithContext)());\n  middleware.push((0, import_middleware.conformOutput)());\n  const act = (0, import_core.defineAction)(\n    {\n      actionType: \"model\",\n      name: options.name,\n      description: label,\n      inputSchema: GenerateRequestSchema,\n      outputSchema: GenerateResponseSchema,\n      metadata: {\n        model: {\n          label,\n          customOptions: options.configSchema ? (0, import_schema.toJsonSchema)({ schema: options.configSchema }) : void 0,\n          versions: options.versions,\n          supports: options.supports\n        }\n      },\n      use: middleware\n    },\n    (input) => {\n      const startTimeMs = import_node_perf_hooks.performance.now();\n      return runner(input, (0, import_core.getStreamingCallback)()).then((response) => {\n        const timedResponse = __spreadProps(__spreadValues({}, response), {\n          latencyMs: import_node_perf_hooks.performance.now() - startTimeMs\n        });\n        return timedResponse;\n      });\n    }\n  );\n  Object.assign(act, {\n    __configSchema: options.configSchema || import_zod.z.unknown()\n  });\n  return act;\n}\nfunction modelRef(options) {\n  var _a;\n  if (((_a = options.info) == null ? void 0 : _a.stage) === \"deprecated\") {\n    deprecateModel({ name: options.name });\n  }\n  return __spreadValues({}, options);\n}\nfunction deprecateModel(options) {\n  console.warn(\n    `${clc.bold(clc.yellow(\"Warning:\"))} Model '${options.name}' is deprecated and may be removed in a future release.`\n  );\n}\nfunction getBasicUsageStats(input, candidates) {\n  const inputCounts = getPartCounts(input.flatMap((md) => md.content));\n  const outputCounts = getPartCounts(\n    candidates.flatMap((c) => c.message.content)\n  );\n  return {\n    inputCharacters: inputCounts.characters,\n    inputImages: inputCounts.images,\n    inputVideos: inputCounts.videos,\n    inputAudioFiles: inputCounts.audio,\n    outputCharacters: outputCounts.characters,\n    outputImages: outputCounts.images,\n    outputVideos: outputCounts.videos,\n    outputAudioFiles: outputCounts.audio\n  };\n}\nfunction getPartCounts(parts) {\n  return parts.reduce(\n    (counts, part) => {\n      var _a, _b, _c, _d, _e, _f, _g;\n      return {\n        characters: counts.characters + (((_a = part.text) == null ? void 0 : _a.length) || 0),\n        images: counts.images + (((_c = (_b = part.media) == null ? void 0 : _b.contentType) == null ? void 0 : _c.startsWith(\"image\")) ? 1 : 0),\n        videos: counts.videos + (((_e = (_d = part.media) == null ? void 0 : _d.contentType) == null ? void 0 : _e.startsWith(\"video\")) ? 1 : 0),\n        audio: counts.audio + (((_g = (_f = part.media) == null ? void 0 : _f.contentType) == null ? void 0 : _g.startsWith(\"audio\")) ? 1 : 0)\n      };\n    },\n    { characters: 0, images: 0, videos: 0, audio: 0 }\n  );\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=model.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/model.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/model/middleware.js":
/*!************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/model/middleware.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar middleware_exports = {};\n__export(middleware_exports, {\n  CONTEXT_PREFACE: () => CONTEXT_PREFACE,\n  augmentWithContext: () => augmentWithContext,\n  conformOutput: () => conformOutput,\n  downloadRequestMedia: () => downloadRequestMedia,\n  simulateSystemPrompt: () => simulateSystemPrompt,\n  validateSupport: () => validateSupport\n});\nmodule.exports = __toCommonJS(middleware_exports);\nvar import_document = __webpack_require__(/*! ../document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nfunction downloadRequestMedia(options) {\n  return (req, next) => __async(this, null, function* () {\n    const { default: fetch } = yield Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/node-fetch\"), __webpack_require__.e(\"vendor-chunks/fetch-blob\"), __webpack_require__.e(\"vendor-chunks/formdata-polyfill\"), __webpack_require__.e(\"vendor-chunks/data-uri-to-buffer\"), __webpack_require__.e(\"vendor-chunks/web-streams-polyfill\"), __webpack_require__.e(\"vendor-chunks/node-domexception\")]).then(__webpack_require__.bind(__webpack_require__, /*! node-fetch */ \"(action-browser)/./node_modules/node-fetch/src/index.js\"));\n    const newReq = __spreadProps(__spreadValues({}, req), {\n      messages: yield Promise.all(\n        req.messages.map((message) => __async(this, null, function* () {\n          const content = yield Promise.all(\n            message.content.map((part) => __async(this, null, function* () {\n              if (!part.media || !part.media.url.startsWith(\"http\") || (options == null ? void 0 : options.filter) && !(options == null ? void 0 : options.filter(part))) {\n                return part;\n              }\n              const response = yield fetch(part.media.url, {\n                size: options == null ? void 0 : options.maxBytes\n              });\n              if (response.status !== 200)\n                throw new Error(\n                  `HTTP error downloading media '${part.media.url}': ${yield response.text()}`\n                );\n              const contentType = part.media.contentType || response.headers.get(\"content-type\") || \"\";\n              return {\n                media: {\n                  contentType,\n                  url: `data:${contentType};base64,${Buffer.from(\n                    yield response.arrayBuffer()\n                  ).toString(\"base64\")}`\n                }\n              };\n            }))\n          );\n          return __spreadProps(__spreadValues({}, message), {\n            content\n          });\n        }))\n      )\n    });\n    return next(newReq);\n  });\n}\nfunction validateSupport(options) {\n  const supports = options.supports || {};\n  return (req, next) => __async(this, null, function* () {\n    var _a, _b, _c, _d;\n    function invalid(message) {\n      throw new Error(\n        `Model '${options.name}' does not support ${message}. Request: ${JSON.stringify(\n          req,\n          null,\n          2\n        )}`\n      );\n    }\n    if (supports.media === false && req.messages.some((message) => message.content.some((part) => part.media)))\n      invalid(\"media, but media was provided\");\n    if (supports.tools === false && ((_a = req.tools) == null ? void 0 : _a.length))\n      invalid(\"tool use, but tools were provided\");\n    if (supports.multiturn === false && req.messages.length > 1)\n      invalid(`multiple messages, but ${req.messages.length} were provided`);\n    if (typeof supports.output !== \"undefined\" && ((_b = req.output) == null ? void 0 : _b.format) && !supports.output.includes((_c = req.output) == null ? void 0 : _c.format))\n      invalid(`requested output format '${(_d = req.output) == null ? void 0 : _d.format}'`);\n    return next();\n  });\n}\nfunction lastUserMessage(messages) {\n  for (let i = messages.length - 1; i >= 0; i--) {\n    if (messages[i].role === \"user\") {\n      return messages[i];\n    }\n  }\n}\nfunction conformOutput() {\n  return (req, next) => __async(this, null, function* () {\n    var _a, _b;\n    const lastMessage = lastUserMessage(req.messages);\n    if (!lastMessage)\n      return next(req);\n    const outputPartIndex = lastMessage.content.findIndex(\n      (p) => {\n        var _a2;\n        return ((_a2 = p.metadata) == null ? void 0 : _a2.purpose) === \"output\";\n      }\n    );\n    const outputPart = outputPartIndex >= 0 ? lastMessage.content[outputPartIndex] : void 0;\n    if (!((_a = req.output) == null ? void 0 : _a.schema) || outputPart && !((_b = outputPart == null ? void 0 : outputPart.metadata) == null ? void 0 : _b.pending)) {\n      return next(req);\n    }\n    const instructions = `\n\nOutput should be in JSON format and conform to the following schema:\n\n\\`\\`\\`\n${JSON.stringify(req.output.schema)}\n\\`\\`\\`\n`;\n    if (outputPart) {\n      lastMessage.content[outputPartIndex] = __spreadProps(__spreadValues({}, outputPart), {\n        metadata: {\n          purpose: \"output\",\n          source: \"default\"\n        },\n        text: instructions\n      });\n    } else {\n      lastMessage == null ? void 0 : lastMessage.content.push({\n        text: instructions,\n        metadata: { purpose: \"output\", source: \"default\" }\n      });\n    }\n    return next(req);\n  });\n}\nfunction simulateSystemPrompt(options) {\n  const preface = (options == null ? void 0 : options.preface) || \"SYSTEM INSTRUCTIONS:\\n\";\n  const acknowledgement = (options == null ? void 0 : options.acknowledgement) || \"Understood.\";\n  return (req, next) => {\n    const messages = [...req.messages];\n    for (let i = 0; i < messages.length; i++) {\n      if (req.messages[i].role === \"system\") {\n        const systemPrompt = messages[i].content;\n        messages.splice(\n          i,\n          1,\n          { role: \"user\", content: [{ text: preface }, ...systemPrompt] },\n          { role: \"model\", content: [{ text: acknowledgement }] }\n        );\n        break;\n      }\n    }\n    return next(__spreadProps(__spreadValues({}, req), { messages }));\n  };\n}\nconst CONTEXT_PREFACE = \"\\n\\nUse the following information to complete your task:\\n\\n\";\nconst CONTEXT_ITEM_TEMPLATE = (d, index, options) => {\n  var _a, _b;\n  let out = \"- \";\n  if (options == null ? void 0 : options.citationKey) {\n    out += `[${d.metadata[options.citationKey]}]: `;\n  } else if ((options == null ? void 0 : options.citationKey) === void 0) {\n    out += `[${((_a = d.metadata) == null ? void 0 : _a[\"ref\"]) || ((_b = d.metadata) == null ? void 0 : _b[\"id\"]) || index}]: `;\n  }\n  out += d.text() + \"\\n\";\n  return out;\n};\nfunction augmentWithContext(options) {\n  const preface = typeof (options == null ? void 0 : options.preface) === \"undefined\" ? CONTEXT_PREFACE : options.preface;\n  const itemTemplate = (options == null ? void 0 : options.itemTemplate) || CONTEXT_ITEM_TEMPLATE;\n  return (req, next) => {\n    var _a, _b, _c;\n    if (!((_a = req.context) == null ? void 0 : _a.length))\n      return next(req);\n    const userMessage = lastUserMessage(req.messages);\n    if (!userMessage)\n      return next(req);\n    const contextPartIndex = userMessage == null ? void 0 : userMessage.content.findIndex(\n      (p) => {\n        var _a2;\n        return ((_a2 = p.metadata) == null ? void 0 : _a2.purpose) === \"context\";\n      }\n    );\n    const contextPart = contextPartIndex >= 0 && userMessage.content[contextPartIndex];\n    if (contextPart && !((_b = contextPart.metadata) == null ? void 0 : _b.pending)) {\n      return next(req);\n    }\n    let out = `${preface || \"\"}`;\n    (_c = req.context) == null ? void 0 : _c.forEach((d, i) => {\n      out += itemTemplate(new import_document.Document(d), i, options);\n    });\n    out += \"\\n\";\n    if (contextPartIndex >= 0) {\n      userMessage.content[contextPartIndex] = __spreadProps(__spreadValues({}, contextPart), {\n        text: out,\n        metadata: { purpose: \"context\" }\n      });\n    } else {\n      userMessage.content.push({ text: out, metadata: { purpose: \"context\" } });\n    }\n    return next(req);\n  };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=middleware.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/model/middleware.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/prompt.js":
/*!**************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/prompt.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar prompt_exports = {};\n__export(prompt_exports, {\n  definePrompt: () => definePrompt,\n  isPrompt: () => isPrompt,\n  renderPrompt: () => renderPrompt\n});\nmodule.exports = __toCommonJS(prompt_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_registry = __webpack_require__(/*! @genkit-ai/core/registry */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/registry.js\");\nfunction isPrompt(arg) {\n  var _a, _b;\n  return typeof arg === \"function\" && ((_b = (_a = arg.__action) == null ? void 0 : _a.metadata) == null ? void 0 : _b.type) === \"prompt\";\n}\nfunction definePrompt({\n  name,\n  description,\n  inputSchema,\n  inputJsonSchema,\n  metadata\n}, fn) {\n  const a = (0, import_core.defineAction)(\n    {\n      actionType: \"prompt\",\n      name,\n      description,\n      inputSchema,\n      inputJsonSchema,\n      metadata: __spreadProps(__spreadValues({}, metadata || { prompt: {} }), { type: \"prompt\" })\n    },\n    fn\n  );\n  return a;\n}\nfunction renderPrompt(params) {\n  return __async(this, null, function* () {\n    var _a, _b;\n    let prompt;\n    if (typeof params.prompt === \"string\") {\n      prompt = yield (0, import_registry.lookupAction)(`/prompt/${params.prompt}`);\n    } else {\n      prompt = params.prompt;\n    }\n    const rendered = yield prompt(\n      params.input\n    );\n    return {\n      model: params.model,\n      config: __spreadValues(__spreadValues({}, rendered.config || {}), params.config),\n      history: rendered.messages.slice(0, rendered.messages.length - 1),\n      prompt: rendered.messages[rendered.messages.length - 1].content,\n      context: params.context,\n      candidates: rendered.candidates || 1,\n      output: {\n        format: (_a = rendered.output) == null ? void 0 : _a.format,\n        schema: (_b = rendered.output) == null ? void 0 : _b.schema\n      },\n      tools: rendered.tools || []\n    };\n  });\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=prompt.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9wcm9tcHQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEVBQThFLDZEQUE2RDtBQUMzSTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLGtCQUFrQixtQkFBTyxDQUFDLHFGQUFpQjtBQUMzQyxzQkFBc0IsbUJBQU8sQ0FBQyxpR0FBMEI7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsZ0JBQWdCLFlBQVksS0FBSyxnQkFBZ0I7QUFDaEcsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSxjQUFjO0FBQ2hGLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4Qyx1QkFBdUI7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsTUFBTSxDQUlMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25hc3RlcnkzNjAvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9saWIvcHJvbXB0LmpzPzNjNTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZGVmUHJvcHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydGllcztcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BEZXNjcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19nZXRPd25Qcm9wU3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX3Byb3BJc0VudW0gPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIF9fZGVmTm9ybWFsUHJvcCA9IChvYmosIGtleSwgdmFsdWUpID0+IGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWUgfSkgOiBvYmpba2V5XSA9IHZhbHVlO1xudmFyIF9fc3ByZWFkVmFsdWVzID0gKGEsIGIpID0+IHtcbiAgZm9yICh2YXIgcHJvcCBpbiBiIHx8IChiID0ge30pKVxuICAgIGlmIChfX2hhc093blByb3AuY2FsbChiLCBwcm9wKSlcbiAgICAgIF9fZGVmTm9ybWFsUHJvcChhLCBwcm9wLCBiW3Byb3BdKTtcbiAgaWYgKF9fZ2V0T3duUHJvcFN5bWJvbHMpXG4gICAgZm9yICh2YXIgcHJvcCBvZiBfX2dldE93blByb3BTeW1ib2xzKGIpKSB7XG4gICAgICBpZiAoX19wcm9wSXNFbnVtLmNhbGwoYiwgcHJvcCkpXG4gICAgICAgIF9fZGVmTm9ybWFsUHJvcChhLCBwcm9wLCBiW3Byb3BdKTtcbiAgICB9XG4gIHJldHVybiBhO1xufTtcbnZhciBfX3NwcmVhZFByb3BzID0gKGEsIGIpID0+IF9fZGVmUHJvcHMoYSwgX19nZXRPd25Qcm9wRGVzY3MoYikpO1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgX19hc3luYyA9IChfX3RoaXMsIF9fYXJndW1lbnRzLCBnZW5lcmF0b3IpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB2YXIgZnVsZmlsbGVkID0gKHZhbHVlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciByZWplY3RlZCA9ICh2YWx1ZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RlcChnZW5lcmF0b3IudGhyb3codmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHN0ZXAgPSAoeCkgPT4geC5kb25lID8gcmVzb2x2ZSh4LnZhbHVlKSA6IFByb21pc2UucmVzb2x2ZSh4LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpO1xuICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseShfX3RoaXMsIF9fYXJndW1lbnRzKSkubmV4dCgpKTtcbiAgfSk7XG59O1xudmFyIHByb21wdF9leHBvcnRzID0ge307XG5fX2V4cG9ydChwcm9tcHRfZXhwb3J0cywge1xuICBkZWZpbmVQcm9tcHQ6ICgpID0+IGRlZmluZVByb21wdCxcbiAgaXNQcm9tcHQ6ICgpID0+IGlzUHJvbXB0LFxuICByZW5kZXJQcm9tcHQ6ICgpID0+IHJlbmRlclByb21wdFxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhwcm9tcHRfZXhwb3J0cyk7XG52YXIgaW1wb3J0X2NvcmUgPSByZXF1aXJlKFwiQGdlbmtpdC1haS9jb3JlXCIpO1xudmFyIGltcG9ydF9yZWdpc3RyeSA9IHJlcXVpcmUoXCJAZ2Vua2l0LWFpL2NvcmUvcmVnaXN0cnlcIik7XG5mdW5jdGlvbiBpc1Byb21wdChhcmcpIHtcbiAgdmFyIF9hLCBfYjtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09IFwiZnVuY3Rpb25cIiAmJiAoKF9iID0gKF9hID0gYXJnLl9fYWN0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX2EubWV0YWRhdGEpID09IG51bGwgPyB2b2lkIDAgOiBfYi50eXBlKSA9PT0gXCJwcm9tcHRcIjtcbn1cbmZ1bmN0aW9uIGRlZmluZVByb21wdCh7XG4gIG5hbWUsXG4gIGRlc2NyaXB0aW9uLFxuICBpbnB1dFNjaGVtYSxcbiAgaW5wdXRKc29uU2NoZW1hLFxuICBtZXRhZGF0YVxufSwgZm4pIHtcbiAgY29uc3QgYSA9ICgwLCBpbXBvcnRfY29yZS5kZWZpbmVBY3Rpb24pKFxuICAgIHtcbiAgICAgIGFjdGlvblR5cGU6IFwicHJvbXB0XCIsXG4gICAgICBuYW1lLFxuICAgICAgZGVzY3JpcHRpb24sXG4gICAgICBpbnB1dFNjaGVtYSxcbiAgICAgIGlucHV0SnNvblNjaGVtYSxcbiAgICAgIG1ldGFkYXRhOiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBtZXRhZGF0YSB8fCB7IHByb21wdDoge30gfSksIHsgdHlwZTogXCJwcm9tcHRcIiB9KVxuICAgIH0sXG4gICAgZm5cbiAgKTtcbiAgcmV0dXJuIGE7XG59XG5mdW5jdGlvbiByZW5kZXJQcm9tcHQocGFyYW1zKSB7XG4gIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBsZXQgcHJvbXB0O1xuICAgIGlmICh0eXBlb2YgcGFyYW1zLnByb21wdCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcHJvbXB0ID0geWllbGQgKDAsIGltcG9ydF9yZWdpc3RyeS5sb29rdXBBY3Rpb24pKGAvcHJvbXB0LyR7cGFyYW1zLnByb21wdH1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbXB0ID0gcGFyYW1zLnByb21wdDtcbiAgICB9XG4gICAgY29uc3QgcmVuZGVyZWQgPSB5aWVsZCBwcm9tcHQoXG4gICAgICBwYXJhbXMuaW5wdXRcbiAgICApO1xuICAgIHJldHVybiB7XG4gICAgICBtb2RlbDogcGFyYW1zLm1vZGVsLFxuICAgICAgY29uZmlnOiBfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7fSwgcmVuZGVyZWQuY29uZmlnIHx8IHt9KSwgcGFyYW1zLmNvbmZpZyksXG4gICAgICBoaXN0b3J5OiByZW5kZXJlZC5tZXNzYWdlcy5zbGljZSgwLCByZW5kZXJlZC5tZXNzYWdlcy5sZW5ndGggLSAxKSxcbiAgICAgIHByb21wdDogcmVuZGVyZWQubWVzc2FnZXNbcmVuZGVyZWQubWVzc2FnZXMubGVuZ3RoIC0gMV0uY29udGVudCxcbiAgICAgIGNvbnRleHQ6IHBhcmFtcy5jb250ZXh0LFxuICAgICAgY2FuZGlkYXRlczogcmVuZGVyZWQuY2FuZGlkYXRlcyB8fCAxLFxuICAgICAgb3V0cHV0OiB7XG4gICAgICAgIGZvcm1hdDogKF9hID0gcmVuZGVyZWQub3V0cHV0KSA9PSBudWxsID8gdm9pZCAwIDogX2EuZm9ybWF0LFxuICAgICAgICBzY2hlbWE6IChfYiA9IHJlbmRlcmVkLm91dHB1dCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLnNjaGVtYVxuICAgICAgfSxcbiAgICAgIHRvb2xzOiByZW5kZXJlZC50b29scyB8fCBbXVxuICAgIH07XG4gIH0pO1xufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRlZmluZVByb21wdCxcbiAgaXNQcm9tcHQsXG4gIHJlbmRlclByb21wdFxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9tcHQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/prompt.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/retriever.js":
/*!*****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/retriever.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar retriever_exports = {};\n__export(retriever_exports, {\n  CommonRetrieverOptionsSchema: () => CommonRetrieverOptionsSchema,\n  Document: () => import_document2.Document,\n  DocumentDataSchema: () => import_document2.DocumentDataSchema,\n  IndexerInfoSchema: () => IndexerInfoSchema,\n  RetrieverInfoSchema: () => RetrieverInfoSchema,\n  defineIndexer: () => defineIndexer,\n  defineRetriever: () => defineRetriever,\n  defineSimpleRetriever: () => defineSimpleRetriever,\n  index: () => index,\n  indexerRef: () => indexerRef,\n  retrieve: () => retrieve,\n  retrieverRef: () => retrieverRef\n});\nmodule.exports = __toCommonJS(retriever_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_registry = __webpack_require__(/*! @genkit-ai/core/registry */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/registry.js\");\nvar z = __toESM(__webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/index.cjs\"));\nvar import_document = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nvar import_document2 = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nconst RetrieverRequestSchema = z.object({\n  query: import_document.DocumentDataSchema,\n  options: z.any().optional()\n});\nconst RetrieverResponseSchema = z.object({\n  documents: z.array(import_document.DocumentDataSchema)\n  // TODO: stats, etc.\n});\nconst IndexerRequestSchema = z.object({\n  documents: z.array(import_document.DocumentDataSchema),\n  options: z.any().optional()\n});\nconst RetrieverInfoSchema = z.object({\n  label: z.string().optional(),\n  /** Supported model capabilities. */\n  supports: z.object({\n    /** Model can process media as part of the prompt (multimodal input). */\n    media: z.boolean().optional()\n  }).optional()\n});\nfunction retrieverWithMetadata(retriever, configSchema) {\n  const withMeta = retriever;\n  withMeta.__configSchema = configSchema;\n  return withMeta;\n}\nfunction indexerWithMetadata(indexer, configSchema) {\n  const withMeta = indexer;\n  withMeta.__configSchema = configSchema;\n  return withMeta;\n}\nfunction defineRetriever(options, runner) {\n  const retriever = (0, import_core.defineAction)(\n    {\n      actionType: \"retriever\",\n      name: options.name,\n      inputSchema: options.configSchema ? RetrieverRequestSchema.extend({\n        options: options.configSchema.optional()\n      }) : RetrieverRequestSchema,\n      outputSchema: RetrieverResponseSchema,\n      metadata: {\n        type: \"retriever\",\n        info: options.info\n      }\n    },\n    (i) => runner(new import_document.Document(i.query), i.options)\n  );\n  const rwm = retrieverWithMetadata(\n    retriever,\n    options.configSchema\n  );\n  return rwm;\n}\nfunction defineIndexer(options, runner) {\n  const indexer = (0, import_core.defineAction)(\n    {\n      actionType: \"indexer\",\n      name: options.name,\n      inputSchema: options.configSchema ? IndexerRequestSchema.extend({\n        options: options.configSchema.optional()\n      }) : IndexerRequestSchema,\n      outputSchema: z.void(),\n      metadata: {\n        type: \"indexer\",\n        embedderInfo: options.embedderInfo\n      }\n    },\n    (i) => runner(\n      i.documents.map((dd) => new import_document.Document(dd)),\n      i.options\n    )\n  );\n  const iwm = indexerWithMetadata(\n    indexer,\n    options.configSchema\n  );\n  return iwm;\n}\nfunction retrieve(params) {\n  return __async(this, null, function* () {\n    let retriever;\n    if (typeof params.retriever === \"string\") {\n      retriever = yield (0, import_registry.lookupAction)(`/retriever/${params.retriever}`);\n    } else if (Object.hasOwnProperty.call(params.retriever, \"info\")) {\n      retriever = yield (0, import_registry.lookupAction)(`/retriever/${params.retriever.name}`);\n    } else {\n      retriever = params.retriever;\n    }\n    if (!retriever) {\n      throw new Error(\"Unable to resolve the retriever\");\n    }\n    const response = yield retriever({\n      query: typeof params.query === \"string\" ? import_document.Document.fromText(params.query) : params.query,\n      options: params.options\n    });\n    return response.documents.map((d) => new import_document.Document(d));\n  });\n}\nfunction index(params) {\n  return __async(this, null, function* () {\n    let indexer;\n    if (typeof params.indexer === \"string\") {\n      indexer = yield (0, import_registry.lookupAction)(`/indexer/${params.indexer}`);\n    } else if (Object.hasOwnProperty.call(params.indexer, \"info\")) {\n      indexer = yield (0, import_registry.lookupAction)(`/indexer/${params.indexer.name}`);\n    } else {\n      indexer = params.indexer;\n    }\n    if (!indexer) {\n      throw new Error(\"Unable to utilize the provided indexer\");\n    }\n    return yield indexer({\n      documents: params.documents,\n      options: params.options\n    });\n  });\n}\nconst CommonRetrieverOptionsSchema = z.object({\n  k: z.number().describe(\"Number of documents to retrieve\").optional()\n});\nfunction retrieverRef(options) {\n  return __spreadValues({}, options);\n}\nconst IndexerInfoSchema = RetrieverInfoSchema;\nfunction indexerRef(options) {\n  return __spreadValues({}, options);\n}\nfunction itemToDocument(item, options) {\n  if (!item)\n    throw new import_core.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: `Items returned from simple retriever must be non-null.`\n    });\n  if (typeof item === \"string\")\n    return import_document.Document.fromText(item);\n  if (typeof options.content === \"function\") {\n    const transformed = options.content(item);\n    return typeof transformed === \"string\" ? import_document.Document.fromText(transformed) : new import_document.Document({ content: transformed });\n  }\n  if (typeof options.content === \"string\" && typeof item === \"object\")\n    return import_document.Document.fromText(item[options.content]);\n  throw new import_core.GenkitError({\n    status: \"INVALID_ARGUMENT\",\n    message: `Cannot convert item to document without content option. Item: ${JSON.stringify(item)}`\n  });\n}\nfunction itemToMetadata(item, options) {\n  if (typeof item === \"string\")\n    return void 0;\n  if (Array.isArray(options.metadata) && typeof item === \"object\") {\n    const out = {};\n    options.metadata.forEach((key) => out[key] = item[key]);\n  }\n  if (typeof options.metadata === \"function\")\n    return options.metadata(item);\n  if (!options.metadata && typeof item === \"object\") {\n    const out = __spreadValues({}, item);\n    if (typeof options.content === \"string\")\n      delete out[options.content];\n    return out;\n  }\n  throw new import_core.GenkitError({\n    status: \"INVALID_ARGUMENT\",\n    message: `Unable to extract metadata from item with supplied options. Item: ${JSON.stringify(item)}`\n  });\n}\nfunction defineSimpleRetriever(options, handler) {\n  return defineRetriever(\n    {\n      name: options.name,\n      configSchema: options.configSchema\n    },\n    (query, config) => __async(this, null, function* () {\n      const result = yield handler(query, config);\n      return {\n        documents: result.map((item) => {\n          const doc = itemToDocument(item, options);\n          if (typeof item !== \"string\")\n            doc.metadata = itemToMetadata(item, options);\n          return doc;\n        })\n      };\n    })\n  );\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=retriever.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/retriever.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/tool.js":
/*!************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/tool.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar tool_exports = {};\n__export(tool_exports, {\n  asTool: () => asTool,\n  defineTool: () => defineTool,\n  resolveTools: () => resolveTools,\n  toToolDefinition: () => toToolDefinition\n});\nmodule.exports = __toCommonJS(tool_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_registry = __webpack_require__(/*! @genkit-ai/core/registry */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/registry.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_tracing = __webpack_require__(/*! @genkit-ai/core/tracing */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nfunction asTool(action) {\n  var _a, _b;\n  if (((_b = (_a = action.__action) == null ? void 0 : _a.metadata) == null ? void 0 : _b.type) === \"tool\") {\n    return action;\n  }\n  const fn = (input) => {\n    (0, import_tracing.setCustomMetadataAttributes)({ subtype: \"tool\" });\n    return action(input);\n  };\n  fn.__action = __spreadProps(__spreadValues({}, action.__action), {\n    metadata: __spreadProps(__spreadValues({}, action.__action.metadata), { type: \"tool\" })\n  });\n  return fn;\n}\nfunction resolveTools() {\n  return __async(this, arguments, function* (tools = []) {\n    return yield Promise.all(\n      tools.map((ref) => __async(this, null, function* () {\n        if (typeof ref === \"string\") {\n          const tool = yield (0, import_registry.lookupAction)(`/tool/${ref}`);\n          if (!tool) {\n            throw new Error(`Tool ${ref} not found`);\n          }\n          return tool;\n        } else if (ref.__action) {\n          return asTool(ref);\n        } else if (ref.name) {\n          const tool = yield (0, import_registry.lookupAction)(`/tool/${ref.name}`);\n          if (!tool) {\n            throw new Error(`Tool ${ref} not found`);\n          }\n        }\n        throw new Error(\"Tools must be strings, tool definitions, or actions.\");\n      }))\n    );\n  });\n}\nfunction toToolDefinition(tool) {\n  return {\n    name: tool.__action.name,\n    description: tool.__action.description || \"\",\n    outputSchema: (0, import_schema.toJsonSchema)({\n      schema: tool.__action.outputSchema,\n      jsonSchema: tool.__action.outputJsonSchema\n    }),\n    inputSchema: (0, import_schema.toJsonSchema)({\n      schema: tool.__action.inputSchema,\n      jsonSchema: tool.__action.inputJsonSchema\n    })\n  };\n}\nfunction defineTool({\n  name,\n  description,\n  inputSchema,\n  inputJsonSchema,\n  outputSchema,\n  outputJsonSchema,\n  metadata\n}, fn) {\n  const a = (0, import_core.defineAction)(\n    {\n      actionType: \"tool\",\n      name,\n      description,\n      inputSchema,\n      inputJsonSchema,\n      outputSchema,\n      outputJsonSchema,\n      metadata: __spreadProps(__spreadValues({}, metadata || {}), { type: \"tool\" })\n    },\n    (i) => fn(i)\n  );\n  return a;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=tool.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/tool.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/types.js":
/*!*************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/types.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar types_exports = {};\n__export(types_exports, {\n  CommonLlmOptions: () => CommonLlmOptions,\n  LlmResponseSchema: () => LlmResponseSchema,\n  LlmStatsSchema: () => LlmStatsSchema,\n  ModelIdSchema: () => ModelIdSchema,\n  ToolCallSchema: () => ToolCallSchema,\n  ToolSchema: () => ToolSchema,\n  toToolWireFormat: () => toToolWireFormat\n});\nmodule.exports = __toCommonJS(types_exports);\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_zod = __webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/index.cjs\");\nconst ModelIdSchema = import_zod.z.object({\n  modelProvider: import_zod.z.string().readonly(),\n  modelName: import_zod.z.string().readonly()\n});\nconst LlmStatsSchema = import_zod.z.object({\n  latencyMs: import_zod.z.number().optional(),\n  inputTokenCount: import_zod.z.number().optional(),\n  outputTokenCount: import_zod.z.number().optional()\n});\nconst ToolSchema = import_zod.z.object({\n  name: import_zod.z.string(),\n  description: import_zod.z.string().optional(),\n  schema: import_zod.z.any()\n});\nconst ToolCallSchema = import_zod.z.object({\n  toolName: import_zod.z.string(),\n  arguments: import_zod.z.any()\n});\nconst LlmResponseSchema = import_zod.z.object({\n  completion: import_zod.z.string(),\n  toolCalls: import_zod.z.array(ToolCallSchema).optional(),\n  stats: LlmStatsSchema\n});\nfunction toToolWireFormat(actions) {\n  if (!actions)\n    return void 0;\n  return actions.map((a) => {\n    return {\n      name: a.__action.name,\n      description: a.__action.description,\n      schema: {\n        input: (0, import_schema.toJsonSchema)({\n          schema: a.__action.inputSchema,\n          jsonSchema: a.__action.inputJsonSchema\n        }),\n        output: (0, import_schema.toJsonSchema)({\n          schema: a.__action.outputSchema,\n          jsonSchema: a.__action.outputJsonSchema\n        })\n      }\n    };\n  });\n}\nconst CommonLlmOptions = import_zod.z.object({\n  temperature: import_zod.z.number().optional(),\n  topK: import_zod.z.number().optional(),\n  topP: import_zod.z.number().optional()\n});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi90eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLG9CQUFvQixtQkFBTyxDQUFDLDZGQUF3QjtBQUNwRCxpQkFBaUIsbUJBQU8sQ0FBQywwREFBSztBQUM5QjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLE1BQU0sQ0FRTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9uYXN0ZXJ5MzYwLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvYWkvbGliL3R5cGVzLmpzPzllM2YiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIHR5cGVzX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHR5cGVzX2V4cG9ydHMsIHtcbiAgQ29tbW9uTGxtT3B0aW9uczogKCkgPT4gQ29tbW9uTGxtT3B0aW9ucyxcbiAgTGxtUmVzcG9uc2VTY2hlbWE6ICgpID0+IExsbVJlc3BvbnNlU2NoZW1hLFxuICBMbG1TdGF0c1NjaGVtYTogKCkgPT4gTGxtU3RhdHNTY2hlbWEsXG4gIE1vZGVsSWRTY2hlbWE6ICgpID0+IE1vZGVsSWRTY2hlbWEsXG4gIFRvb2xDYWxsU2NoZW1hOiAoKSA9PiBUb29sQ2FsbFNjaGVtYSxcbiAgVG9vbFNjaGVtYTogKCkgPT4gVG9vbFNjaGVtYSxcbiAgdG9Ub29sV2lyZUZvcm1hdDogKCkgPT4gdG9Ub29sV2lyZUZvcm1hdFxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyh0eXBlc19leHBvcnRzKTtcbnZhciBpbXBvcnRfc2NoZW1hID0gcmVxdWlyZShcIkBnZW5raXQtYWkvY29yZS9zY2hlbWFcIik7XG52YXIgaW1wb3J0X3pvZCA9IHJlcXVpcmUoXCJ6b2RcIik7XG5jb25zdCBNb2RlbElkU2NoZW1hID0gaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gIG1vZGVsUHJvdmlkZXI6IGltcG9ydF96b2Quei5zdHJpbmcoKS5yZWFkb25seSgpLFxuICBtb2RlbE5hbWU6IGltcG9ydF96b2Quei5zdHJpbmcoKS5yZWFkb25seSgpXG59KTtcbmNvbnN0IExsbVN0YXRzU2NoZW1hID0gaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gIGxhdGVuY3lNczogaW1wb3J0X3pvZC56Lm51bWJlcigpLm9wdGlvbmFsKCksXG4gIGlucHV0VG9rZW5Db3VudDogaW1wb3J0X3pvZC56Lm51bWJlcigpLm9wdGlvbmFsKCksXG4gIG91dHB1dFRva2VuQ291bnQ6IGltcG9ydF96b2Quei5udW1iZXIoKS5vcHRpb25hbCgpXG59KTtcbmNvbnN0IFRvb2xTY2hlbWEgPSBpbXBvcnRfem9kLnoub2JqZWN0KHtcbiAgbmFtZTogaW1wb3J0X3pvZC56LnN0cmluZygpLFxuICBkZXNjcmlwdGlvbjogaW1wb3J0X3pvZC56LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIHNjaGVtYTogaW1wb3J0X3pvZC56LmFueSgpXG59KTtcbmNvbnN0IFRvb2xDYWxsU2NoZW1hID0gaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gIHRvb2xOYW1lOiBpbXBvcnRfem9kLnouc3RyaW5nKCksXG4gIGFyZ3VtZW50czogaW1wb3J0X3pvZC56LmFueSgpXG59KTtcbmNvbnN0IExsbVJlc3BvbnNlU2NoZW1hID0gaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gIGNvbXBsZXRpb246IGltcG9ydF96b2Quei5zdHJpbmcoKSxcbiAgdG9vbENhbGxzOiBpbXBvcnRfem9kLnouYXJyYXkoVG9vbENhbGxTY2hlbWEpLm9wdGlvbmFsKCksXG4gIHN0YXRzOiBMbG1TdGF0c1NjaGVtYVxufSk7XG5mdW5jdGlvbiB0b1Rvb2xXaXJlRm9ybWF0KGFjdGlvbnMpIHtcbiAgaWYgKCFhY3Rpb25zKVxuICAgIHJldHVybiB2b2lkIDA7XG4gIHJldHVybiBhY3Rpb25zLm1hcCgoYSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBhLl9fYWN0aW9uLm5hbWUsXG4gICAgICBkZXNjcmlwdGlvbjogYS5fX2FjdGlvbi5kZXNjcmlwdGlvbixcbiAgICAgIHNjaGVtYToge1xuICAgICAgICBpbnB1dDogKDAsIGltcG9ydF9zY2hlbWEudG9Kc29uU2NoZW1hKSh7XG4gICAgICAgICAgc2NoZW1hOiBhLl9fYWN0aW9uLmlucHV0U2NoZW1hLFxuICAgICAgICAgIGpzb25TY2hlbWE6IGEuX19hY3Rpb24uaW5wdXRKc29uU2NoZW1hXG4gICAgICAgIH0pLFxuICAgICAgICBvdXRwdXQ6ICgwLCBpbXBvcnRfc2NoZW1hLnRvSnNvblNjaGVtYSkoe1xuICAgICAgICAgIHNjaGVtYTogYS5fX2FjdGlvbi5vdXRwdXRTY2hlbWEsXG4gICAgICAgICAganNvblNjaGVtYTogYS5fX2FjdGlvbi5vdXRwdXRKc29uU2NoZW1hXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG59XG5jb25zdCBDb21tb25MbG1PcHRpb25zID0gaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gIHRlbXBlcmF0dXJlOiBpbXBvcnRfem9kLnoubnVtYmVyKCkub3B0aW9uYWwoKSxcbiAgdG9wSzogaW1wb3J0X3pvZC56Lm51bWJlcigpLm9wdGlvbmFsKCksXG4gIHRvcFA6IGltcG9ydF96b2Quei5udW1iZXIoKS5vcHRpb25hbCgpXG59KTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBDb21tb25MbG1PcHRpb25zLFxuICBMbG1SZXNwb25zZVNjaGVtYSxcbiAgTGxtU3RhdHNTY2hlbWEsXG4gIE1vZGVsSWRTY2hlbWEsXG4gIFRvb2xDYWxsU2NoZW1hLFxuICBUb29sU2NoZW1hLFxuICB0b1Rvb2xXaXJlRm9ybWF0XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/types.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/__codegen/version.js":
/*!***************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/__codegen/version.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar version_exports = {};\n__export(version_exports, {\n  version: () => version\n});\nmodule.exports = __toCommonJS(version_exports);\nconst version = \"0.5.17\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL19fY29kZWdlbi92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FFTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9uYXN0ZXJ5MzYwLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvX19jb2RlZ2VuL3ZlcnNpb24uanM/ZDFkNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgdmVyc2lvbl9leHBvcnRzID0ge307XG5fX2V4cG9ydCh2ZXJzaW9uX2V4cG9ydHMsIHtcbiAgdmVyc2lvbjogKCkgPT4gdmVyc2lvblxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyh2ZXJzaW9uX2V4cG9ydHMpO1xuY29uc3QgdmVyc2lvbiA9IFwiMC41LjE3XCI7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgdmVyc2lvblxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/__codegen/version.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/action.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/action.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar action_exports = {};\n__export(action_exports, {\n  JSONSchema7: () => import_json_schema.JSONSchema7,\n  Status: () => import_statusTypes.Status,\n  StatusCodes: () => import_statusTypes.StatusCodes,\n  StatusSchema: () => import_statusTypes.StatusSchema,\n  action: () => action,\n  actionWithMiddleware: () => actionWithMiddleware,\n  defineAction: () => defineAction,\n  getStreamingCallback: () => getStreamingCallback,\n  runWithStreamingCallback: () => runWithStreamingCallback\n});\nmodule.exports = __toCommonJS(action_exports);\nvar import_json_schema = __webpack_require__(/*! json-schema */ \"(action-browser)/./node_modules/json-schema/lib/validate.js\");\nvar import_node_async_hooks = __webpack_require__(/*! node:async_hooks */ \"node:async_hooks\");\nvar import_registry = __webpack_require__(/*! ./registry.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/registry.js\");\nvar import_schema = __webpack_require__(/*! ./schema.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_tracing = __webpack_require__(/*! ./tracing.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar import_statusTypes = __webpack_require__(/*! ./statusTypes.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/statusTypes.js\");\nfunction actionWithMiddleware(action2, middleware) {\n  const wrapped = (req) => __async(this, null, function* () {\n    const dispatch = (index, req2) => __async(this, null, function* () {\n      if (index === middleware.length) {\n        return yield action2(req2);\n      }\n      const currentMiddleware = middleware[index];\n      return currentMiddleware(\n        req2,\n        (modifiedReq) => __async(this, null, function* () {\n          return dispatch(index + 1, modifiedReq || req2);\n        })\n      );\n    });\n    return yield dispatch(0, req);\n  });\n  wrapped.__action = action2.__action;\n  return wrapped;\n}\nfunction action(config, fn) {\n  const actionName = typeof config.name === \"string\" ? validateActionName(config.name) : `${validatePluginName(config.name.pluginId)}/${validateActionId(config.name.actionId)}`;\n  const actionFn = (input) => __async(this, null, function* () {\n    input = (0, import_schema.parseSchema)(input, {\n      schema: config.inputSchema,\n      jsonSchema: config.inputJsonSchema\n    });\n    let output = yield (0, import_tracing.runInNewSpan)(\n      {\n        metadata: {\n          name: actionName\n        },\n        labels: {\n          [import_tracing.SPAN_TYPE_ATTR]: \"action\"\n        }\n      },\n      (metadata) => __async(this, null, function* () {\n        metadata.name = actionName;\n        metadata.input = input;\n        const output2 = yield fn(input);\n        metadata.output = JSON.stringify(output2);\n        return output2;\n      })\n    );\n    output = (0, import_schema.parseSchema)(output, {\n      schema: config.outputSchema,\n      jsonSchema: config.outputJsonSchema\n    });\n    return output;\n  });\n  actionFn.__action = {\n    name: actionName,\n    description: config.description,\n    inputSchema: config.inputSchema,\n    inputJsonSchema: config.inputJsonSchema,\n    outputSchema: config.outputSchema,\n    outputJsonSchema: config.outputJsonSchema,\n    metadata: config.metadata\n  };\n  if (config.use) {\n    return actionWithMiddleware(actionFn, config.use);\n  }\n  return actionFn;\n}\nfunction validateActionName(name) {\n  if (name.includes(\"/\")) {\n    validatePluginName(name.split(\"/\", 1)[0]);\n    validateActionId(name.substring(name.indexOf(\"/\") + 1));\n  }\n  return name;\n}\nfunction validatePluginName(pluginId) {\n  if (!(0, import_registry.lookupPlugin)(pluginId)) {\n    throw new Error(\n      `Unable to find plugin name used in the action name: ${pluginId}`\n    );\n  }\n  return pluginId;\n}\nfunction validateActionId(actionId) {\n  if (actionId.includes(\"/\")) {\n    throw new Error(`Action name must not include slashes (/): ${actionId}`);\n  }\n  return actionId;\n}\nfunction defineAction(config, fn) {\n  const act = action(config, (i) => {\n    (0, import_tracing.setCustomMetadataAttributes)({ subtype: config.actionType });\n    return fn(i);\n  });\n  act.__action.actionType = config.actionType;\n  (0, import_registry.registerAction)(config.actionType, act);\n  return act;\n}\nconst streamingAls = new import_node_async_hooks.AsyncLocalStorage();\nconst sentinelNoopCallback = () => null;\nfunction runWithStreamingCallback(streamingCallback, fn) {\n  return streamingAls.run(streamingCallback || sentinelNoopCallback, fn);\n}\nfunction getStreamingCallback() {\n  const cb = streamingAls.getStore();\n  if (cb === sentinelNoopCallback) {\n    return void 0;\n  }\n  return cb;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=action.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2FjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EseUJBQXlCLG1CQUFPLENBQUMsZ0ZBQWE7QUFDOUMsOEJBQThCLG1CQUFPLENBQUMsMENBQWtCO0FBQ3hELHNCQUFzQixtQkFBTyxDQUFDLHNGQUFlO0FBQzdDLG9CQUFvQixtQkFBTyxDQUFDLGtGQUFhO0FBQ3pDLHFCQUFxQixtQkFBTyxDQUFDLG9GQUFjO0FBQzNDLHlCQUF5QixtQkFBTyxDQUFDLDRGQUFrQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEZBQTRGLHlDQUF5QyxHQUFHLHVDQUF1QztBQUMvSztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCxTQUFTO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRSxTQUFTO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsNEJBQTRCO0FBQ2xGO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBVUw7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL21vbmFzdGVyeTM2MC8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2FjdGlvbi5qcz8yMzFmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBfX2FzeW5jID0gKF9fdGhpcywgX19hcmd1bWVudHMsIGdlbmVyYXRvcikgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHZhciBmdWxmaWxsZWQgPSAodmFsdWUpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHJlamVjdGVkID0gKHZhbHVlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvci50aHJvdyh2YWx1ZSkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgc3RlcCA9ICh4KSA9PiB4LmRvbmUgPyByZXNvbHZlKHgudmFsdWUpIDogUHJvbWlzZS5yZXNvbHZlKHgudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7XG4gICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KF9fdGhpcywgX19hcmd1bWVudHMpKS5uZXh0KCkpO1xuICB9KTtcbn07XG52YXIgYWN0aW9uX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGFjdGlvbl9leHBvcnRzLCB7XG4gIEpTT05TY2hlbWE3OiAoKSA9PiBpbXBvcnRfanNvbl9zY2hlbWEuSlNPTlNjaGVtYTcsXG4gIFN0YXR1czogKCkgPT4gaW1wb3J0X3N0YXR1c1R5cGVzLlN0YXR1cyxcbiAgU3RhdHVzQ29kZXM6ICgpID0+IGltcG9ydF9zdGF0dXNUeXBlcy5TdGF0dXNDb2RlcyxcbiAgU3RhdHVzU2NoZW1hOiAoKSA9PiBpbXBvcnRfc3RhdHVzVHlwZXMuU3RhdHVzU2NoZW1hLFxuICBhY3Rpb246ICgpID0+IGFjdGlvbixcbiAgYWN0aW9uV2l0aE1pZGRsZXdhcmU6ICgpID0+IGFjdGlvbldpdGhNaWRkbGV3YXJlLFxuICBkZWZpbmVBY3Rpb246ICgpID0+IGRlZmluZUFjdGlvbixcbiAgZ2V0U3RyZWFtaW5nQ2FsbGJhY2s6ICgpID0+IGdldFN0cmVhbWluZ0NhbGxiYWNrLFxuICBydW5XaXRoU3RyZWFtaW5nQ2FsbGJhY2s6ICgpID0+IHJ1bldpdGhTdHJlYW1pbmdDYWxsYmFja1xufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhhY3Rpb25fZXhwb3J0cyk7XG52YXIgaW1wb3J0X2pzb25fc2NoZW1hID0gcmVxdWlyZShcImpzb24tc2NoZW1hXCIpO1xudmFyIGltcG9ydF9ub2RlX2FzeW5jX2hvb2tzID0gcmVxdWlyZShcIm5vZGU6YXN5bmNfaG9va3NcIik7XG52YXIgaW1wb3J0X3JlZ2lzdHJ5ID0gcmVxdWlyZShcIi4vcmVnaXN0cnkuanNcIik7XG52YXIgaW1wb3J0X3NjaGVtYSA9IHJlcXVpcmUoXCIuL3NjaGVtYS5qc1wiKTtcbnZhciBpbXBvcnRfdHJhY2luZyA9IHJlcXVpcmUoXCIuL3RyYWNpbmcuanNcIik7XG52YXIgaW1wb3J0X3N0YXR1c1R5cGVzID0gcmVxdWlyZShcIi4vc3RhdHVzVHlwZXMuanNcIik7XG5mdW5jdGlvbiBhY3Rpb25XaXRoTWlkZGxld2FyZShhY3Rpb24yLCBtaWRkbGV3YXJlKSB7XG4gIGNvbnN0IHdyYXBwZWQgPSAocmVxKSA9PiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgY29uc3QgZGlzcGF0Y2ggPSAoaW5kZXgsIHJlcTIpID0+IF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgIGlmIChpbmRleCA9PT0gbWlkZGxld2FyZS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHlpZWxkIGFjdGlvbjIocmVxMik7XG4gICAgICB9XG4gICAgICBjb25zdCBjdXJyZW50TWlkZGxld2FyZSA9IG1pZGRsZXdhcmVbaW5kZXhdO1xuICAgICAgcmV0dXJuIGN1cnJlbnRNaWRkbGV3YXJlKFxuICAgICAgICByZXEyLFxuICAgICAgICAobW9kaWZpZWRSZXEpID0+IF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICByZXR1cm4gZGlzcGF0Y2goaW5kZXggKyAxLCBtb2RpZmllZFJlcSB8fCByZXEyKTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHlpZWxkIGRpc3BhdGNoKDAsIHJlcSk7XG4gIH0pO1xuICB3cmFwcGVkLl9fYWN0aW9uID0gYWN0aW9uMi5fX2FjdGlvbjtcbiAgcmV0dXJuIHdyYXBwZWQ7XG59XG5mdW5jdGlvbiBhY3Rpb24oY29uZmlnLCBmbikge1xuICBjb25zdCBhY3Rpb25OYW1lID0gdHlwZW9mIGNvbmZpZy5uYW1lID09PSBcInN0cmluZ1wiID8gdmFsaWRhdGVBY3Rpb25OYW1lKGNvbmZpZy5uYW1lKSA6IGAke3ZhbGlkYXRlUGx1Z2luTmFtZShjb25maWcubmFtZS5wbHVnaW5JZCl9LyR7dmFsaWRhdGVBY3Rpb25JZChjb25maWcubmFtZS5hY3Rpb25JZCl9YDtcbiAgY29uc3QgYWN0aW9uRm4gPSAoaW5wdXQpID0+IF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICBpbnB1dCA9ICgwLCBpbXBvcnRfc2NoZW1hLnBhcnNlU2NoZW1hKShpbnB1dCwge1xuICAgICAgc2NoZW1hOiBjb25maWcuaW5wdXRTY2hlbWEsXG4gICAgICBqc29uU2NoZW1hOiBjb25maWcuaW5wdXRKc29uU2NoZW1hXG4gICAgfSk7XG4gICAgbGV0IG91dHB1dCA9IHlpZWxkICgwLCBpbXBvcnRfdHJhY2luZy5ydW5Jbk5ld1NwYW4pKFxuICAgICAge1xuICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgIG5hbWU6IGFjdGlvbk5hbWVcbiAgICAgICAgfSxcbiAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgW2ltcG9ydF90cmFjaW5nLlNQQU5fVFlQRV9BVFRSXTogXCJhY3Rpb25cIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgKG1ldGFkYXRhKSA9PiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIG1ldGFkYXRhLm5hbWUgPSBhY3Rpb25OYW1lO1xuICAgICAgICBtZXRhZGF0YS5pbnB1dCA9IGlucHV0O1xuICAgICAgICBjb25zdCBvdXRwdXQyID0geWllbGQgZm4oaW5wdXQpO1xuICAgICAgICBtZXRhZGF0YS5vdXRwdXQgPSBKU09OLnN0cmluZ2lmeShvdXRwdXQyKTtcbiAgICAgICAgcmV0dXJuIG91dHB1dDI7XG4gICAgICB9KVxuICAgICk7XG4gICAgb3V0cHV0ID0gKDAsIGltcG9ydF9zY2hlbWEucGFyc2VTY2hlbWEpKG91dHB1dCwge1xuICAgICAgc2NoZW1hOiBjb25maWcub3V0cHV0U2NoZW1hLFxuICAgICAganNvblNjaGVtYTogY29uZmlnLm91dHB1dEpzb25TY2hlbWFcbiAgICB9KTtcbiAgICByZXR1cm4gb3V0cHV0O1xuICB9KTtcbiAgYWN0aW9uRm4uX19hY3Rpb24gPSB7XG4gICAgbmFtZTogYWN0aW9uTmFtZSxcbiAgICBkZXNjcmlwdGlvbjogY29uZmlnLmRlc2NyaXB0aW9uLFxuICAgIGlucHV0U2NoZW1hOiBjb25maWcuaW5wdXRTY2hlbWEsXG4gICAgaW5wdXRKc29uU2NoZW1hOiBjb25maWcuaW5wdXRKc29uU2NoZW1hLFxuICAgIG91dHB1dFNjaGVtYTogY29uZmlnLm91dHB1dFNjaGVtYSxcbiAgICBvdXRwdXRKc29uU2NoZW1hOiBjb25maWcub3V0cHV0SnNvblNjaGVtYSxcbiAgICBtZXRhZGF0YTogY29uZmlnLm1ldGFkYXRhXG4gIH07XG4gIGlmIChjb25maWcudXNlKSB7XG4gICAgcmV0dXJuIGFjdGlvbldpdGhNaWRkbGV3YXJlKGFjdGlvbkZuLCBjb25maWcudXNlKTtcbiAgfVxuICByZXR1cm4gYWN0aW9uRm47XG59XG5mdW5jdGlvbiB2YWxpZGF0ZUFjdGlvbk5hbWUobmFtZSkge1xuICBpZiAobmFtZS5pbmNsdWRlcyhcIi9cIikpIHtcbiAgICB2YWxpZGF0ZVBsdWdpbk5hbWUobmFtZS5zcGxpdChcIi9cIiwgMSlbMF0pO1xuICAgIHZhbGlkYXRlQWN0aW9uSWQobmFtZS5zdWJzdHJpbmcobmFtZS5pbmRleE9mKFwiL1wiKSArIDEpKTtcbiAgfVxuICByZXR1cm4gbmFtZTtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlUGx1Z2luTmFtZShwbHVnaW5JZCkge1xuICBpZiAoISgwLCBpbXBvcnRfcmVnaXN0cnkubG9va3VwUGx1Z2luKShwbHVnaW5JZCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgVW5hYmxlIHRvIGZpbmQgcGx1Z2luIG5hbWUgdXNlZCBpbiB0aGUgYWN0aW9uIG5hbWU6ICR7cGx1Z2luSWR9YFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHBsdWdpbklkO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVBY3Rpb25JZChhY3Rpb25JZCkge1xuICBpZiAoYWN0aW9uSWQuaW5jbHVkZXMoXCIvXCIpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBBY3Rpb24gbmFtZSBtdXN0IG5vdCBpbmNsdWRlIHNsYXNoZXMgKC8pOiAke2FjdGlvbklkfWApO1xuICB9XG4gIHJldHVybiBhY3Rpb25JZDtcbn1cbmZ1bmN0aW9uIGRlZmluZUFjdGlvbihjb25maWcsIGZuKSB7XG4gIGNvbnN0IGFjdCA9IGFjdGlvbihjb25maWcsIChpKSA9PiB7XG4gICAgKDAsIGltcG9ydF90cmFjaW5nLnNldEN1c3RvbU1ldGFkYXRhQXR0cmlidXRlcykoeyBzdWJ0eXBlOiBjb25maWcuYWN0aW9uVHlwZSB9KTtcbiAgICByZXR1cm4gZm4oaSk7XG4gIH0pO1xuICBhY3QuX19hY3Rpb24uYWN0aW9uVHlwZSA9IGNvbmZpZy5hY3Rpb25UeXBlO1xuICAoMCwgaW1wb3J0X3JlZ2lzdHJ5LnJlZ2lzdGVyQWN0aW9uKShjb25maWcuYWN0aW9uVHlwZSwgYWN0KTtcbiAgcmV0dXJuIGFjdDtcbn1cbmNvbnN0IHN0cmVhbWluZ0FscyA9IG5ldyBpbXBvcnRfbm9kZV9hc3luY19ob29rcy5Bc3luY0xvY2FsU3RvcmFnZSgpO1xuY29uc3Qgc2VudGluZWxOb29wQ2FsbGJhY2sgPSAoKSA9PiBudWxsO1xuZnVuY3Rpb24gcnVuV2l0aFN0cmVhbWluZ0NhbGxiYWNrKHN0cmVhbWluZ0NhbGxiYWNrLCBmbikge1xuICByZXR1cm4gc3RyZWFtaW5nQWxzLnJ1bihzdHJlYW1pbmdDYWxsYmFjayB8fCBzZW50aW5lbE5vb3BDYWxsYmFjaywgZm4pO1xufVxuZnVuY3Rpb24gZ2V0U3RyZWFtaW5nQ2FsbGJhY2soKSB7XG4gIGNvbnN0IGNiID0gc3RyZWFtaW5nQWxzLmdldFN0b3JlKCk7XG4gIGlmIChjYiA9PT0gc2VudGluZWxOb29wQ2FsbGJhY2spIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIHJldHVybiBjYjtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBKU09OU2NoZW1hNyxcbiAgU3RhdHVzLFxuICBTdGF0dXNDb2RlcyxcbiAgU3RhdHVzU2NoZW1hLFxuICBhY3Rpb24sXG4gIGFjdGlvbldpdGhNaWRkbGV3YXJlLFxuICBkZWZpbmVBY3Rpb24sXG4gIGdldFN0cmVhbWluZ0NhbGxiYWNrLFxuICBydW5XaXRoU3RyZWFtaW5nQ2FsbGJhY2tcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWN0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/config.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/config.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar config_exports = {};\n__export(config_exports, {\n  __hardResetConfigForTesting: () => __hardResetConfigForTesting,\n  config: () => config,\n  configureGenkit: () => configureGenkit,\n  getCurrentEnv: () => getCurrentEnv,\n  initializeGenkit: () => initializeGenkit,\n  isDevEnv: () => isDevEnv\n});\nmodule.exports = __toCommonJS(config_exports);\nvar import_fs = __toESM(__webpack_require__(/*! fs */ \"fs\"));\nvar import_path = __toESM(__webpack_require__(/*! path */ \"path\"));\nvar import_localFileFlowStateStore = __webpack_require__(/*! ./localFileFlowStateStore.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/localFileFlowStateStore.js\");\nvar import_logging = __webpack_require__(/*! ./logging.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar registry = __toESM(__webpack_require__(/*! ./registry.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/registry.js\"));\nvar import_tracing = __webpack_require__(/*! ./tracing.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar import_localFileTraceStore = __webpack_require__(/*! ./tracing/localFileTraceStore.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/localFileTraceStore.js\");\n__reExport(config_exports, __webpack_require__(/*! ./plugin.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/plugin.js\"), module.exports);\nlet config;\nclass Config {\n  constructor(options) {\n    this.configuredEnvs = /* @__PURE__ */ new Set([\"dev\"]);\n    this.options = options;\n    this.telemetryConfig = () => __async(this, null, function* () {\n      return {\n        getConfig() {\n          return {};\n        }\n      };\n    });\n    this.configure();\n  }\n  /**\n   * Returns a flow state store instance for the running environment.\n   * If no store is configured, will throw an error.\n   */\n  getFlowStateStore() {\n    return __async(this, null, function* () {\n      const flowStateStore = yield registry.lookupFlowStateStore(getCurrentEnv());\n      if (!flowStateStore) {\n        throw new Error(\"No flow store is configured.\");\n      }\n      return flowStateStore;\n    });\n  }\n  /**\n   * Returns a trace store instance for the running environment.\n   * If no store is configured, will return undefined.\n   */\n  getTraceStore() {\n    return __async(this, null, function* () {\n      return yield registry.lookupTraceStore(getCurrentEnv());\n    });\n  }\n  /**\n   * Returns the configuration for exporting Telemetry data for the current\n   * environment.\n   */\n  getTelemetryConfig() {\n    return this.telemetryConfig();\n  }\n  /**\n   * Configures the system.\n   */\n  configure() {\n    var _a, _b, _c;\n    if (this.options.logLevel) {\n      import_logging.logger.setLogLevel(this.options.logLevel);\n    }\n    (_a = this.options.plugins) == null ? void 0 : _a.forEach((plugin) => {\n      import_logging.logger.debug(`Registering plugin ${plugin.name}...`);\n      registry.registerPluginProvider(plugin.name, {\n        name: plugin.name,\n        initializer() {\n          return __async(this, null, function* () {\n            import_logging.logger.info(`Initializing plugin ${plugin.name}:`);\n            return yield plugin.initializer();\n          });\n        }\n      });\n    });\n    if ((_b = this.options.telemetry) == null ? void 0 : _b.logger) {\n      const loggerPluginName = this.options.telemetry.logger;\n      import_logging.logger.debug(\"Registering logging exporters...\");\n      import_logging.logger.debug(`  - all environments: ${loggerPluginName}`);\n      this.loggerConfig = () => __async(this, null, function* () {\n        return this.resolveLoggerConfig(loggerPluginName);\n      });\n    }\n    if ((_c = this.options.telemetry) == null ? void 0 : _c.instrumentation) {\n      const telemetryPluginName = this.options.telemetry.instrumentation;\n      import_logging.logger.debug(\"Registering telemetry exporters...\");\n      import_logging.logger.debug(`  - all environments: ${telemetryPluginName}`);\n      this.telemetryConfig = () => __async(this, null, function* () {\n        return this.resolveTelemetryConfig(telemetryPluginName);\n      });\n    }\n    import_logging.logger.debug(\"Registering flow state stores...\");\n    if (isDevEnv()) {\n      registry.registerFlowStateStore(\n        \"dev\",\n        () => __async(this, null, function* () {\n          return new import_localFileFlowStateStore.LocalFileFlowStateStore();\n        })\n      );\n      import_logging.logger.debug(\"Registered dev flow state store.\");\n    }\n    if (this.options.flowStateStore) {\n      const flowStorePluginName = this.options.flowStateStore;\n      import_logging.logger.debug(`  - prod: ${flowStorePluginName}`);\n      this.configuredEnvs.add(\"prod\");\n      registry.registerFlowStateStore(\n        \"prod\",\n        () => this.resolveFlowStateStore(flowStorePluginName)\n      );\n    }\n    import_logging.logger.debug(\"Registering trace stores...\");\n    if (isDevEnv()) {\n      registry.registerTraceStore(\"dev\", () => __async(this, null, function* () {\n        return new import_localFileTraceStore.LocalFileTraceStore();\n      }));\n      import_logging.logger.debug(\"Registered dev trace store.\");\n    }\n    if (this.options.traceStore) {\n      const traceStorePluginName = this.options.traceStore;\n      import_logging.logger.debug(`  - prod: ${traceStorePluginName}`);\n      this.configuredEnvs.add(\"prod\");\n      registry.registerTraceStore(\n        \"prod\",\n        () => this.resolveTraceStore(traceStorePluginName)\n      );\n      if (isDevEnv()) {\n        import_logging.logger.info(\n          \"In dev mode `traceStore` is defaulted to local file store.\"\n        );\n      }\n    } else {\n      import_logging.logger.info(\n        \"`traceStore` is not specified in the config; Traces are not going to be persisted in prod.\"\n      );\n    }\n  }\n  /**\n   * Sets up the tracing and logging as configured.\n   *\n   * Note: the logging configuration must come after tracing has been enabled to\n   * ensure that all tracing instrumentations are applied.\n   * See limitations described here:\n   * https://github.com/open-telemetry/opentelemetry-js/tree/main/experimental/packages/opentelemetry-instrumentation#limitations\n   */\n  setupTracingAndLogging() {\n    return __async(this, null, function* () {\n      if (this.options.enableTracingAndMetrics) {\n        (0, import_tracing.enableTracingAndMetrics)(\n          yield this.getTelemetryConfig(),\n          yield this.getTraceStore()\n        );\n      }\n      if (this.loggerConfig) {\n        import_logging.logger.init(yield this.loggerConfig());\n      }\n    });\n  }\n  /**\n   * Resolves flow state store provided by the specified plugin.\n   */\n  resolveFlowStateStore(pluginName) {\n    return __async(this, null, function* () {\n      let flowStoreId;\n      if (pluginName.includes(\"/\")) {\n        const tokens = pluginName.split(\"/\", 2);\n        pluginName = tokens[0];\n        flowStoreId = tokens[1];\n      }\n      const plugin = yield registry.initializePlugin(pluginName);\n      let provider = plugin == null ? void 0 : plugin.flowStateStore;\n      if (!provider) {\n        throw new Error(\n          \"Unable to resolve provided `flowStateStore` for plugin: \" + pluginName\n        );\n      }\n      if (!Array.isArray(provider)) {\n        provider = [provider];\n      }\n      if (provider.length === 1 && !flowStoreId) {\n        return provider[0].value;\n      }\n      if (provider.length > 1 && !flowStoreId) {\n        throw new Error(\n          `Plugin ${pluginName} provides more than one flow state store implementation (${provider.map((p2) => p2.id).join(\", \")}), please specify the flow state store id (e.g. \"${pluginName}/${provider[0].id}\")`\n        );\n      }\n      const p = provider.find((p2) => p2.id === flowStoreId);\n      if (!p) {\n        throw new Error(\n          `Plugin ${pluginName} does not provide flow state store ${flowStoreId}`\n        );\n      }\n      return p.value;\n    });\n  }\n  /**\n   * Resolves trace store provided by the specified plugin.\n   */\n  resolveTraceStore(pluginName) {\n    return __async(this, null, function* () {\n      let traceStoreId;\n      if (pluginName.includes(\"/\")) {\n        const tokens = pluginName.split(\"/\", 2);\n        pluginName = tokens[0];\n        traceStoreId = tokens[1];\n      }\n      const plugin = yield registry.initializePlugin(pluginName);\n      let provider = plugin == null ? void 0 : plugin.traceStore;\n      if (!provider) {\n        throw new Error(\n          \"Unable to resolve provided `traceStore` for plugin: \" + pluginName\n        );\n      }\n      if (!Array.isArray(provider)) {\n        provider = [provider];\n      }\n      if (provider.length === 1 && !traceStoreId) {\n        return provider[0].value;\n      }\n      if (provider.length > 1 && !traceStoreId) {\n        throw new Error(\n          `Plugin ${pluginName} provides more than one trace store implementation (${provider.map((p2) => p2.id).join(\", \")}), please specify the trace store id (e.g. \"${pluginName}/${provider[0].id}\")`\n        );\n      }\n      const p = provider.find((p2) => p2.id === traceStoreId);\n      if (!p) {\n        throw new Error(\n          `Plugin ${pluginName} does not provide trace store ${traceStoreId}`\n        );\n      }\n      return p.value;\n    });\n  }\n  /**\n   * Resolves the telemetry configuration provided by the specified plugin.\n   */\n  resolveTelemetryConfig(pluginName) {\n    return __async(this, null, function* () {\n      var _a;\n      const plugin = yield registry.initializePlugin(pluginName);\n      const provider = (_a = plugin == null ? void 0 : plugin.telemetry) == null ? void 0 : _a.instrumentation;\n      if (!provider) {\n        throw new Error(\n          \"Unable to resolve provider `telemetry.instrumentation` for plugin: \" + pluginName\n        );\n      }\n      return provider.value;\n    });\n  }\n  /**\n   * Resolves the logging configuration provided by the specified plugin.\n   */\n  resolveLoggerConfig(pluginName) {\n    return __async(this, null, function* () {\n      var _a;\n      const plugin = yield registry.initializePlugin(pluginName);\n      const provider = (_a = plugin == null ? void 0 : plugin.telemetry) == null ? void 0 : _a.logger;\n      if (!provider) {\n        throw new Error(\n          \"Unable to resolve provider `telemetry.logger` for plugin: \" + pluginName\n        );\n      }\n      return provider.value;\n    });\n  }\n}\nfunction configureGenkit(options) {\n  if (config) {\n    import_logging.logger.warn(\"configureGenkit was already called\");\n  }\n  config = new Config(options);\n  config.setupTracingAndLogging();\n  return config;\n}\nfunction initializeGenkit(cfg) {\n  if (config || cfg) {\n    return;\n  }\n  const configPath = findGenkitConfig();\n  if (!configPath) {\n    throw Error(\n      \"Unable to find genkit.config.js in any of the parent directories.\"\n    );\n  }\n  __webpack_require__(\"(action-browser)/./node_modules/@genkit-ai/core/lib sync recursive\")(configPath);\n}\nfunction getCurrentEnv() {\n  return process.env.GENKIT_ENV || \"prod\";\n}\nfunction isDevEnv() {\n  return getCurrentEnv() === \"dev\";\n}\nfunction findGenkitConfig() {\n  var _a;\n  let current = (_a = __webpack_require__(\"(action-browser)/./node_modules/@genkit-ai/core/lib sync recursive\") == null ? void 0 : __webpack_require__.c[__webpack_require__.s]) == null ? void 0 : _a.filename;\n  if (!current) {\n    throw new Error(\"Unable to resolve package root.\");\n  }\n  while (import_path.default.resolve(current, \"..\") !== current) {\n    if (import_fs.default.existsSync(import_path.default.resolve(current, \"genkit.config.js\"))) {\n      return import_path.default.resolve(current, \"genkit.config.js\");\n    }\n    current = import_path.default.resolve(current, \"..\");\n  }\n  return void 0;\n}\nfunction __hardResetConfigForTesting() {\n  config = void 0;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=config.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/config.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/error.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/error.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar error_exports = {};\n__export(error_exports, {\n  GenkitError: () => GenkitError\n});\nmodule.exports = __toCommonJS(error_exports);\nclass GenkitError extends Error {\n  constructor({\n    status,\n    message,\n    detail,\n    source\n  }) {\n    super(`${source ? `${source}: ` : \"\"}${status}: ${message}`);\n    this.status = status;\n    this.detail = detail;\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2Vycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILGFBQWEsWUFBWSxPQUFPLFNBQVMsRUFBRSxPQUFPLElBQUksUUFBUTtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUVMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25hc3RlcnkzNjAvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9lcnJvci5qcz9kYzkyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBlcnJvcl9leHBvcnRzID0ge307XG5fX2V4cG9ydChlcnJvcl9leHBvcnRzLCB7XG4gIEdlbmtpdEVycm9yOiAoKSA9PiBHZW5raXRFcnJvclxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhlcnJvcl9leHBvcnRzKTtcbmNsYXNzIEdlbmtpdEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgc3RhdHVzLFxuICAgIG1lc3NhZ2UsXG4gICAgZGV0YWlsLFxuICAgIHNvdXJjZVxuICB9KSB7XG4gICAgc3VwZXIoYCR7c291cmNlID8gYCR7c291cmNlfTogYCA6IFwiXCJ9JHtzdGF0dXN9OiAke21lc3NhZ2V9YCk7XG4gICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgdGhpcy5kZXRhaWwgPSBkZXRhaWw7XG4gIH1cbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBHZW5raXRFcnJvclxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/flowTypes.js":
/*!*******************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/flowTypes.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar flowTypes_exports = {};\n__export(flowTypes_exports, {\n  FlowErrorSchema: () => FlowErrorSchema,\n  FlowResponseSchema: () => FlowResponseSchema,\n  FlowResultSchema: () => FlowResultSchema,\n  FlowStateExecutionSchema: () => FlowStateExecutionSchema,\n  FlowStateSchema: () => FlowStateSchema,\n  OperationSchema: () => OperationSchema\n});\nmodule.exports = __toCommonJS(flowTypes_exports);\nvar import_zod = __webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/index.cjs\");\nconst FlowStateExecutionSchema = import_zod.z.object({\n  startTime: import_zod.z.number().optional().describe(\"start time in milliseconds since the epoch\"),\n  endTime: import_zod.z.number().optional().describe(\"end time in milliseconds since the epoch\"),\n  traceIds: import_zod.z.array(import_zod.z.string())\n});\nconst FlowResponseSchema = import_zod.z.object({\n  response: import_zod.z.unknown().nullable()\n});\nconst FlowErrorSchema = import_zod.z.object({\n  error: import_zod.z.string().optional(),\n  stacktrace: import_zod.z.string().optional()\n});\nconst FlowResultSchema = FlowResponseSchema.and(FlowErrorSchema);\nconst OperationSchema = import_zod.z.object({\n  name: import_zod.z.string().describe(\n    \"server-assigned name, which is only unique within the same service that originally returns it.\"\n  ),\n  metadata: import_zod.z.any().optional().describe(\n    \"Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time.\"\n  ),\n  done: import_zod.z.boolean().optional().default(false).describe(\n    \"If the value is false, it means the operation is still in progress. If true, the operation is completed, and either error or response is available.\"\n  ),\n  result: FlowResultSchema.optional(),\n  blockedOnStep: import_zod.z.object({\n    name: import_zod.z.string(),\n    schema: import_zod.z.string().optional()\n  }).optional()\n});\nconst FlowStateSchema = import_zod.z.object({\n  name: import_zod.z.string().optional(),\n  flowId: import_zod.z.string(),\n  input: import_zod.z.unknown(),\n  startTime: import_zod.z.number().describe(\"start time in milliseconds since the epoch\"),\n  cache: import_zod.z.record(\n    import_zod.z.string(),\n    import_zod.z.object({\n      value: import_zod.z.any().optional(),\n      empty: import_zod.z.literal(true).optional()\n    })\n  ),\n  eventsTriggered: import_zod.z.record(import_zod.z.string(), import_zod.z.any()),\n  blockedOnStep: import_zod.z.object({\n    name: import_zod.z.string(),\n    schema: import_zod.z.string().optional()\n  }).nullable(),\n  operation: OperationSchema,\n  traceContext: import_zod.z.string().optional(),\n  executions: import_zod.z.array(FlowStateExecutionSchema)\n});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=flowTypes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2Zsb3dUeXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxpQkFBaUIsbUJBQU8sQ0FBQywwREFBSztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsTUFBTSxDQU9MO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25hc3RlcnkzNjAvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9mbG93VHlwZXMuanM/YzkyZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgZmxvd1R5cGVzX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGZsb3dUeXBlc19leHBvcnRzLCB7XG4gIEZsb3dFcnJvclNjaGVtYTogKCkgPT4gRmxvd0Vycm9yU2NoZW1hLFxuICBGbG93UmVzcG9uc2VTY2hlbWE6ICgpID0+IEZsb3dSZXNwb25zZVNjaGVtYSxcbiAgRmxvd1Jlc3VsdFNjaGVtYTogKCkgPT4gRmxvd1Jlc3VsdFNjaGVtYSxcbiAgRmxvd1N0YXRlRXhlY3V0aW9uU2NoZW1hOiAoKSA9PiBGbG93U3RhdGVFeGVjdXRpb25TY2hlbWEsXG4gIEZsb3dTdGF0ZVNjaGVtYTogKCkgPT4gRmxvd1N0YXRlU2NoZW1hLFxuICBPcGVyYXRpb25TY2hlbWE6ICgpID0+IE9wZXJhdGlvblNjaGVtYVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhmbG93VHlwZXNfZXhwb3J0cyk7XG52YXIgaW1wb3J0X3pvZCA9IHJlcXVpcmUoXCJ6b2RcIik7XG5jb25zdCBGbG93U3RhdGVFeGVjdXRpb25TY2hlbWEgPSBpbXBvcnRfem9kLnoub2JqZWN0KHtcbiAgc3RhcnRUaW1lOiBpbXBvcnRfem9kLnoubnVtYmVyKCkub3B0aW9uYWwoKS5kZXNjcmliZShcInN0YXJ0IHRpbWUgaW4gbWlsbGlzZWNvbmRzIHNpbmNlIHRoZSBlcG9jaFwiKSxcbiAgZW5kVGltZTogaW1wb3J0X3pvZC56Lm51bWJlcigpLm9wdGlvbmFsKCkuZGVzY3JpYmUoXCJlbmQgdGltZSBpbiBtaWxsaXNlY29uZHMgc2luY2UgdGhlIGVwb2NoXCIpLFxuICB0cmFjZUlkczogaW1wb3J0X3pvZC56LmFycmF5KGltcG9ydF96b2Quei5zdHJpbmcoKSlcbn0pO1xuY29uc3QgRmxvd1Jlc3BvbnNlU2NoZW1hID0gaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gIHJlc3BvbnNlOiBpbXBvcnRfem9kLnoudW5rbm93bigpLm51bGxhYmxlKClcbn0pO1xuY29uc3QgRmxvd0Vycm9yU2NoZW1hID0gaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gIGVycm9yOiBpbXBvcnRfem9kLnouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgc3RhY2t0cmFjZTogaW1wb3J0X3pvZC56LnN0cmluZygpLm9wdGlvbmFsKClcbn0pO1xuY29uc3QgRmxvd1Jlc3VsdFNjaGVtYSA9IEZsb3dSZXNwb25zZVNjaGVtYS5hbmQoRmxvd0Vycm9yU2NoZW1hKTtcbmNvbnN0IE9wZXJhdGlvblNjaGVtYSA9IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICBuYW1lOiBpbXBvcnRfem9kLnouc3RyaW5nKCkuZGVzY3JpYmUoXG4gICAgXCJzZXJ2ZXItYXNzaWduZWQgbmFtZSwgd2hpY2ggaXMgb25seSB1bmlxdWUgd2l0aGluIHRoZSBzYW1lIHNlcnZpY2UgdGhhdCBvcmlnaW5hbGx5IHJldHVybnMgaXQuXCJcbiAgKSxcbiAgbWV0YWRhdGE6IGltcG9ydF96b2Quei5hbnkoKS5vcHRpb25hbCgpLmRlc2NyaWJlKFxuICAgIFwiU2VydmljZS1zcGVjaWZpYyBtZXRhZGF0YSBhc3NvY2lhdGVkIHdpdGggdGhlIG9wZXJhdGlvbi4gSXQgdHlwaWNhbGx5IGNvbnRhaW5zIHByb2dyZXNzIGluZm9ybWF0aW9uIGFuZCBjb21tb24gbWV0YWRhdGEgc3VjaCBhcyBjcmVhdGUgdGltZS5cIlxuICApLFxuICBkb25lOiBpbXBvcnRfem9kLnouYm9vbGVhbigpLm9wdGlvbmFsKCkuZGVmYXVsdChmYWxzZSkuZGVzY3JpYmUoXG4gICAgXCJJZiB0aGUgdmFsdWUgaXMgZmFsc2UsIGl0IG1lYW5zIHRoZSBvcGVyYXRpb24gaXMgc3RpbGwgaW4gcHJvZ3Jlc3MuIElmIHRydWUsIHRoZSBvcGVyYXRpb24gaXMgY29tcGxldGVkLCBhbmQgZWl0aGVyIGVycm9yIG9yIHJlc3BvbnNlIGlzIGF2YWlsYWJsZS5cIlxuICApLFxuICByZXN1bHQ6IEZsb3dSZXN1bHRTY2hlbWEub3B0aW9uYWwoKSxcbiAgYmxvY2tlZE9uU3RlcDogaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gICAgbmFtZTogaW1wb3J0X3pvZC56LnN0cmluZygpLFxuICAgIHNjaGVtYTogaW1wb3J0X3pvZC56LnN0cmluZygpLm9wdGlvbmFsKClcbiAgfSkub3B0aW9uYWwoKVxufSk7XG5jb25zdCBGbG93U3RhdGVTY2hlbWEgPSBpbXBvcnRfem9kLnoub2JqZWN0KHtcbiAgbmFtZTogaW1wb3J0X3pvZC56LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIGZsb3dJZDogaW1wb3J0X3pvZC56LnN0cmluZygpLFxuICBpbnB1dDogaW1wb3J0X3pvZC56LnVua25vd24oKSxcbiAgc3RhcnRUaW1lOiBpbXBvcnRfem9kLnoubnVtYmVyKCkuZGVzY3JpYmUoXCJzdGFydCB0aW1lIGluIG1pbGxpc2Vjb25kcyBzaW5jZSB0aGUgZXBvY2hcIiksXG4gIGNhY2hlOiBpbXBvcnRfem9kLnoucmVjb3JkKFxuICAgIGltcG9ydF96b2Quei5zdHJpbmcoKSxcbiAgICBpbXBvcnRfem9kLnoub2JqZWN0KHtcbiAgICAgIHZhbHVlOiBpbXBvcnRfem9kLnouYW55KCkub3B0aW9uYWwoKSxcbiAgICAgIGVtcHR5OiBpbXBvcnRfem9kLnoubGl0ZXJhbCh0cnVlKS5vcHRpb25hbCgpXG4gICAgfSlcbiAgKSxcbiAgZXZlbnRzVHJpZ2dlcmVkOiBpbXBvcnRfem9kLnoucmVjb3JkKGltcG9ydF96b2Quei5zdHJpbmcoKSwgaW1wb3J0X3pvZC56LmFueSgpKSxcbiAgYmxvY2tlZE9uU3RlcDogaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gICAgbmFtZTogaW1wb3J0X3pvZC56LnN0cmluZygpLFxuICAgIHNjaGVtYTogaW1wb3J0X3pvZC56LnN0cmluZygpLm9wdGlvbmFsKClcbiAgfSkubnVsbGFibGUoKSxcbiAgb3BlcmF0aW9uOiBPcGVyYXRpb25TY2hlbWEsXG4gIHRyYWNlQ29udGV4dDogaW1wb3J0X3pvZC56LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIGV4ZWN1dGlvbnM6IGltcG9ydF96b2Quei5hcnJheShGbG93U3RhdGVFeGVjdXRpb25TY2hlbWEpXG59KTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBGbG93RXJyb3JTY2hlbWEsXG4gIEZsb3dSZXNwb25zZVNjaGVtYSxcbiAgRmxvd1Jlc3VsdFNjaGVtYSxcbiAgRmxvd1N0YXRlRXhlY3V0aW9uU2NoZW1hLFxuICBGbG93U3RhdGVTY2hlbWEsXG4gIE9wZXJhdGlvblNjaGVtYVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mbG93VHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/flowTypes.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar src_exports = {};\n__export(src_exports, {\n  GENKIT_CLIENT_HEADER: () => GENKIT_CLIENT_HEADER,\n  GENKIT_VERSION: () => GENKIT_VERSION,\n  GenkitError: () => import_error.GenkitError,\n  defineJsonSchema: () => import_schema.defineJsonSchema,\n  defineSchema: () => import_schema.defineSchema\n});\nmodule.exports = __toCommonJS(src_exports);\nvar import_version = __webpack_require__(/*! ./__codegen/version.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/__codegen/version.js\");\n__reExport(src_exports, __webpack_require__(/*! ./action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\"), module.exports);\n__reExport(src_exports, __webpack_require__(/*! ./config.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/config.js\"), module.exports);\nvar import_error = __webpack_require__(/*! ./error.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\");\n__reExport(src_exports, __webpack_require__(/*! ./flowTypes.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/flowTypes.js\"), module.exports);\nvar import_schema = __webpack_require__(/*! ./schema.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\n__reExport(src_exports, __webpack_require__(/*! ./telemetryTypes.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/telemetryTypes.js\"), module.exports);\nconst GENKIT_VERSION = import_version.version;\nconst GENKIT_CLIENT_HEADER = `genkit-node/${GENKIT_VERSION} gl-node/${process.versions.node}`;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLHFCQUFxQixtQkFBTyxDQUFDLHdHQUF3QjtBQUNyRCx3QkFBd0IsbUJBQU8sQ0FBQyxrRkFBYTtBQUM3Qyx3QkFBd0IsbUJBQU8sQ0FBQyxrRkFBYTtBQUM3QyxtQkFBbUIsbUJBQU8sQ0FBQyxnRkFBWTtBQUN2Qyx3QkFBd0IsbUJBQU8sQ0FBQyx3RkFBZ0I7QUFDaEQsb0JBQW9CLG1CQUFPLENBQUMsa0ZBQWE7QUFDekMsd0JBQXdCLG1CQUFPLENBQUMsa0dBQXFCO0FBQ3JEO0FBQ0EsNENBQTRDLGdCQUFnQixVQUFVLHNCQUFzQjtBQUM1RjtBQUNBLE1BQU0sQ0FVTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9uYXN0ZXJ5MzYwLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvaW5kZXguanM/Nzc4NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fcmVFeHBvcnQgPSAodGFyZ2V0LCBtb2QsIHNlY29uZFRhcmdldCkgPT4gKF9fY29weVByb3BzKHRhcmdldCwgbW9kLCBcImRlZmF1bHRcIiksIHNlY29uZFRhcmdldCAmJiBfX2NvcHlQcm9wcyhzZWNvbmRUYXJnZXQsIG1vZCwgXCJkZWZhdWx0XCIpKTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIHNyY19leHBvcnRzID0ge307XG5fX2V4cG9ydChzcmNfZXhwb3J0cywge1xuICBHRU5LSVRfQ0xJRU5UX0hFQURFUjogKCkgPT4gR0VOS0lUX0NMSUVOVF9IRUFERVIsXG4gIEdFTktJVF9WRVJTSU9OOiAoKSA9PiBHRU5LSVRfVkVSU0lPTixcbiAgR2Vua2l0RXJyb3I6ICgpID0+IGltcG9ydF9lcnJvci5HZW5raXRFcnJvcixcbiAgZGVmaW5lSnNvblNjaGVtYTogKCkgPT4gaW1wb3J0X3NjaGVtYS5kZWZpbmVKc29uU2NoZW1hLFxuICBkZWZpbmVTY2hlbWE6ICgpID0+IGltcG9ydF9zY2hlbWEuZGVmaW5lU2NoZW1hXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHNyY19leHBvcnRzKTtcbnZhciBpbXBvcnRfdmVyc2lvbiA9IHJlcXVpcmUoXCIuL19fY29kZWdlbi92ZXJzaW9uLmpzXCIpO1xuX19yZUV4cG9ydChzcmNfZXhwb3J0cywgcmVxdWlyZShcIi4vYWN0aW9uLmpzXCIpLCBtb2R1bGUuZXhwb3J0cyk7XG5fX3JlRXhwb3J0KHNyY19leHBvcnRzLCByZXF1aXJlKFwiLi9jb25maWcuanNcIiksIG1vZHVsZS5leHBvcnRzKTtcbnZhciBpbXBvcnRfZXJyb3IgPSByZXF1aXJlKFwiLi9lcnJvci5qc1wiKTtcbl9fcmVFeHBvcnQoc3JjX2V4cG9ydHMsIHJlcXVpcmUoXCIuL2Zsb3dUeXBlcy5qc1wiKSwgbW9kdWxlLmV4cG9ydHMpO1xudmFyIGltcG9ydF9zY2hlbWEgPSByZXF1aXJlKFwiLi9zY2hlbWEuanNcIik7XG5fX3JlRXhwb3J0KHNyY19leHBvcnRzLCByZXF1aXJlKFwiLi90ZWxlbWV0cnlUeXBlcy5qc1wiKSwgbW9kdWxlLmV4cG9ydHMpO1xuY29uc3QgR0VOS0lUX1ZFUlNJT04gPSBpbXBvcnRfdmVyc2lvbi52ZXJzaW9uO1xuY29uc3QgR0VOS0lUX0NMSUVOVF9IRUFERVIgPSBgZ2Vua2l0LW5vZGUvJHtHRU5LSVRfVkVSU0lPTn0gZ2wtbm9kZS8ke3Byb2Nlc3MudmVyc2lvbnMubm9kZX1gO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIEdFTktJVF9DTElFTlRfSEVBREVSLFxuICBHRU5LSVRfVkVSU0lPTixcbiAgR2Vua2l0RXJyb3IsXG4gIGRlZmluZUpzb25TY2hlbWEsXG4gIGRlZmluZVNjaGVtYSxcbiAgLi4ucmVxdWlyZShcIi4vYWN0aW9uLmpzXCIpLFxuICAuLi5yZXF1aXJlKFwiLi9jb25maWcuanNcIiksXG4gIC4uLnJlcXVpcmUoXCIuL2Zsb3dUeXBlcy5qc1wiKSxcbiAgLi4ucmVxdWlyZShcIi4vdGVsZW1ldHJ5VHlwZXMuanNcIilcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/localFileFlowStateStore.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/localFileFlowStateStore.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar localFileFlowStateStore_exports = {};\n__export(localFileFlowStateStore_exports, {\n  LocalFileFlowStateStore: () => LocalFileFlowStateStore\n});\nmodule.exports = __toCommonJS(localFileFlowStateStore_exports);\nvar import_crypto = __toESM(__webpack_require__(/*! crypto */ \"crypto\"));\nvar import_fs = __toESM(__webpack_require__(/*! fs */ \"fs\"));\nvar import_os = __toESM(__webpack_require__(/*! os */ \"os\"));\nvar import_path = __toESM(__webpack_require__(/*! path */ \"path\"));\nvar import_flowTypes = __webpack_require__(/*! ./flowTypes.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/flowTypes.js\");\nvar import_logging = __webpack_require__(/*! ./logging.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nclass LocalFileFlowStateStore {\n  constructor() {\n    var _a;\n    const rootHash = import_crypto.default.createHash(\"md5\").update(((_a = __webpack_require__(\"(action-browser)/./node_modules/@genkit-ai/core/lib sync recursive\") == null ? void 0 : __webpack_require__.c[__webpack_require__.s]) == null ? void 0 : _a.filename) || \"unknown\").digest(\"hex\");\n    this.storeRoot = import_path.default.resolve(import_os.default.tmpdir(), `.genkit/${rootHash}/flows`);\n    import_fs.default.mkdirSync(this.storeRoot, { recursive: true });\n    import_logging.logger.info(\"Using DevFlowStateStore. Root: \" + this.storeRoot);\n  }\n  load(id) {\n    return __async(this, null, function* () {\n      const filePath = import_path.default.resolve(this.storeRoot, `${id}`);\n      if (!import_fs.default.existsSync(filePath)) {\n        return void 0;\n      }\n      const data = import_fs.default.readFileSync(filePath, \"utf8\");\n      return import_flowTypes.FlowStateSchema.parse(JSON.parse(data));\n    });\n  }\n  save(id, state) {\n    return __async(this, null, function* () {\n      import_logging.logger.debug(\"save flow state \" + id);\n      import_fs.default.writeFileSync(\n        import_path.default.resolve(this.storeRoot, `${id}`),\n        JSON.stringify(state)\n      );\n    });\n  }\n  list(query) {\n    return __async(this, null, function* () {\n      const files = import_fs.default.readdirSync(this.storeRoot);\n      files.sort((a, b) => {\n        return import_fs.default.statSync(import_path.default.resolve(this.storeRoot, `${b}`)).mtime.getTime() - import_fs.default.statSync(import_path.default.resolve(this.storeRoot, `${a}`)).mtime.getTime();\n      });\n      const startFrom = (query == null ? void 0 : query.continuationToken) ? parseInt(query == null ? void 0 : query.continuationToken) : 0;\n      const stopAt = startFrom + ((query == null ? void 0 : query.limit) || 10);\n      const flowStates = files.slice(startFrom, stopAt).map((id) => {\n        const filePath = import_path.default.resolve(this.storeRoot, `${id}`);\n        const data = import_fs.default.readFileSync(filePath, \"utf8\");\n        return import_flowTypes.FlowStateSchema.parse(JSON.parse(data));\n      });\n      return {\n        flowStates,\n        continuationToken: files.length > stopAt ? stopAt.toString() : void 0\n      };\n    });\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=localFileFlowStateStore.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/localFileFlowStateStore.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js":
/*!*****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/logging.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar logging_exports = {};\n__export(logging_exports, {\n  logger: () => logger\n});\nmodule.exports = __toCommonJS(logging_exports);\nconst LOG_LEVELS = [\"debug\", \"info\", \"warn\", \"error\"];\nclass Logger {\n  constructor() {\n    this.defaultLogger = {\n      shouldLog(targetLevel) {\n        return LOG_LEVELS.indexOf(this.level) <= LOG_LEVELS.indexOf(targetLevel);\n      },\n      debug(...args) {\n        this.shouldLog(\"debug\") && console.debug(...args);\n      },\n      info(...args) {\n        this.shouldLog(\"info\") && console.info(...args);\n      },\n      warn(...args) {\n        this.shouldLog(\"warn\") && console.warn(...args);\n      },\n      error(...args) {\n        this.shouldLog(\"error\") && console.error(...args);\n      },\n      level: \"info\"\n    };\n    this.logger = this.defaultLogger;\n  }\n  init(config) {\n    return __async(this, null, function* () {\n      this.logger = yield config.getLogger(process.env.GENKIT_ENV || \"prod\");\n    });\n  }\n  info(...args) {\n    this.logger.info.apply(this.logger, args);\n  }\n  debug(...args) {\n    this.logger.debug.apply(this.logger, args);\n  }\n  error(...args) {\n    this.logger.error.apply(this.logger, args);\n  }\n  warn(...args) {\n    this.logger.warn.apply(this.logger, args);\n  }\n  setLogLevel(level) {\n    this.logger.level = level;\n  }\n  logStructured(msg, metadata) {\n    this.logger.info(msg, metadata);\n  }\n  logStructuredError(msg, metadata) {\n    this.logger.error(msg, metadata);\n  }\n}\nconst logger = new Logger();\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=logging.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2xvZ2dpbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBRUw7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL21vbmFzdGVyeTM2MC8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2xvZ2dpbmcuanM/NDMwNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgX19hc3luYyA9IChfX3RoaXMsIF9fYXJndW1lbnRzLCBnZW5lcmF0b3IpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB2YXIgZnVsZmlsbGVkID0gKHZhbHVlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciByZWplY3RlZCA9ICh2YWx1ZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RlcChnZW5lcmF0b3IudGhyb3codmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHN0ZXAgPSAoeCkgPT4geC5kb25lID8gcmVzb2x2ZSh4LnZhbHVlKSA6IFByb21pc2UucmVzb2x2ZSh4LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpO1xuICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseShfX3RoaXMsIF9fYXJndW1lbnRzKSkubmV4dCgpKTtcbiAgfSk7XG59O1xudmFyIGxvZ2dpbmdfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQobG9nZ2luZ19leHBvcnRzLCB7XG4gIGxvZ2dlcjogKCkgPT4gbG9nZ2VyXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGxvZ2dpbmdfZXhwb3J0cyk7XG5jb25zdCBMT0dfTEVWRUxTID0gW1wiZGVidWdcIiwgXCJpbmZvXCIsIFwid2FyblwiLCBcImVycm9yXCJdO1xuY2xhc3MgTG9nZ2VyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5kZWZhdWx0TG9nZ2VyID0ge1xuICAgICAgc2hvdWxkTG9nKHRhcmdldExldmVsKSB7XG4gICAgICAgIHJldHVybiBMT0dfTEVWRUxTLmluZGV4T2YodGhpcy5sZXZlbCkgPD0gTE9HX0xFVkVMUy5pbmRleE9mKHRhcmdldExldmVsKTtcbiAgICAgIH0sXG4gICAgICBkZWJ1ZyguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuc2hvdWxkTG9nKFwiZGVidWdcIikgJiYgY29uc29sZS5kZWJ1ZyguLi5hcmdzKTtcbiAgICAgIH0sXG4gICAgICBpbmZvKC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5zaG91bGRMb2coXCJpbmZvXCIpICYmIGNvbnNvbGUuaW5mbyguLi5hcmdzKTtcbiAgICAgIH0sXG4gICAgICB3YXJuKC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5zaG91bGRMb2coXCJ3YXJuXCIpICYmIGNvbnNvbGUud2FybiguLi5hcmdzKTtcbiAgICAgIH0sXG4gICAgICBlcnJvciguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuc2hvdWxkTG9nKFwiZXJyb3JcIikgJiYgY29uc29sZS5lcnJvciguLi5hcmdzKTtcbiAgICAgIH0sXG4gICAgICBsZXZlbDogXCJpbmZvXCJcbiAgICB9O1xuICAgIHRoaXMubG9nZ2VyID0gdGhpcy5kZWZhdWx0TG9nZ2VyO1xuICB9XG4gIGluaXQoY29uZmlnKSB7XG4gICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgIHRoaXMubG9nZ2VyID0geWllbGQgY29uZmlnLmdldExvZ2dlcihwcm9jZXNzLmVudi5HRU5LSVRfRU5WIHx8IFwicHJvZFwiKTtcbiAgICB9KTtcbiAgfVxuICBpbmZvKC4uLmFyZ3MpIHtcbiAgICB0aGlzLmxvZ2dlci5pbmZvLmFwcGx5KHRoaXMubG9nZ2VyLCBhcmdzKTtcbiAgfVxuICBkZWJ1ZyguLi5hcmdzKSB7XG4gICAgdGhpcy5sb2dnZXIuZGVidWcuYXBwbHkodGhpcy5sb2dnZXIsIGFyZ3MpO1xuICB9XG4gIGVycm9yKC4uLmFyZ3MpIHtcbiAgICB0aGlzLmxvZ2dlci5lcnJvci5hcHBseSh0aGlzLmxvZ2dlciwgYXJncyk7XG4gIH1cbiAgd2FybiguLi5hcmdzKSB7XG4gICAgdGhpcy5sb2dnZXIud2Fybi5hcHBseSh0aGlzLmxvZ2dlciwgYXJncyk7XG4gIH1cbiAgc2V0TG9nTGV2ZWwobGV2ZWwpIHtcbiAgICB0aGlzLmxvZ2dlci5sZXZlbCA9IGxldmVsO1xuICB9XG4gIGxvZ1N0cnVjdHVyZWQobXNnLCBtZXRhZGF0YSkge1xuICAgIHRoaXMubG9nZ2VyLmluZm8obXNnLCBtZXRhZGF0YSk7XG4gIH1cbiAgbG9nU3RydWN0dXJlZEVycm9yKG1zZywgbWV0YWRhdGEpIHtcbiAgICB0aGlzLmxvZ2dlci5lcnJvcihtc2csIG1ldGFkYXRhKTtcbiAgfVxufVxuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcigpO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGxvZ2dlclxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2dnaW5nLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/plugin.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/plugin.js ***!
  \****************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar plugin_exports = {};\n__export(plugin_exports, {\n  genkitPlugin: () => genkitPlugin\n});\nmodule.exports = __toCommonJS(plugin_exports);\nfunction genkitPlugin(pluginName, initFn) {\n  return (...args) => ({\n    name: pluginName,\n    initializer: () => __async(this, null, function* () {\n      const initializedPlugin = (yield initFn(...args)) || {};\n      validatePluginActions(pluginName, initializedPlugin);\n      return initializedPlugin;\n    })\n  });\n}\nfunction validatePluginActions(pluginName, plugin) {\n  var _a, _b, _c, _d, _e;\n  if (!plugin) {\n    return;\n  }\n  (_a = plugin.models) == null ? void 0 : _a.forEach((model) => validateNaming(pluginName, model));\n  (_b = plugin.retrievers) == null ? void 0 : _b.forEach(\n    (retriever) => validateNaming(pluginName, retriever)\n  );\n  (_c = plugin.embedders) == null ? void 0 : _c.forEach((embedder) => validateNaming(pluginName, embedder));\n  (_d = plugin.indexers) == null ? void 0 : _d.forEach((indexer) => validateNaming(pluginName, indexer));\n  (_e = plugin.evaluators) == null ? void 0 : _e.forEach(\n    (evaluator) => validateNaming(pluginName, evaluator)\n  );\n}\nfunction validateNaming(pluginName, action) {\n  const nameParts = action.__action.name.split(\"/\");\n  if (nameParts[0] !== pluginName) {\n    const err = `Plugin name ${pluginName} not found in action name ${action.__action.name}. Action names must follow the pattern {pluginName}/{actionName}`;\n    throw new Error(err);\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=plugin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3BsdWdpbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsWUFBWSwyQkFBMkIscUJBQXFCLHdDQUF3QyxXQUFXLEVBQUUsV0FBVztBQUMzSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FFTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9uYXN0ZXJ5MzYwLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvcGx1Z2luLmpzP2QwZDgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIF9fYXN5bmMgPSAoX190aGlzLCBfX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgdmFyIGZ1bGZpbGxlZCA9ICh2YWx1ZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgcmVqZWN0ZWQgPSAodmFsdWUpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHN0ZXAoZ2VuZXJhdG9yLnRocm93KHZhbHVlKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBzdGVwID0gKHgpID0+IHguZG9uZSA/IHJlc29sdmUoeC52YWx1ZSkgOiBQcm9taXNlLnJlc29sdmUoeC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTtcbiAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkoX190aGlzLCBfX2FyZ3VtZW50cykpLm5leHQoKSk7XG4gIH0pO1xufTtcbnZhciBwbHVnaW5fZXhwb3J0cyA9IHt9O1xuX19leHBvcnQocGx1Z2luX2V4cG9ydHMsIHtcbiAgZ2Vua2l0UGx1Z2luOiAoKSA9PiBnZW5raXRQbHVnaW5cbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMocGx1Z2luX2V4cG9ydHMpO1xuZnVuY3Rpb24gZ2Vua2l0UGx1Z2luKHBsdWdpbk5hbWUsIGluaXRGbikge1xuICByZXR1cm4gKC4uLmFyZ3MpID0+ICh7XG4gICAgbmFtZTogcGx1Z2luTmFtZSxcbiAgICBpbml0aWFsaXplcjogKCkgPT4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgICAgY29uc3QgaW5pdGlhbGl6ZWRQbHVnaW4gPSAoeWllbGQgaW5pdEZuKC4uLmFyZ3MpKSB8fCB7fTtcbiAgICAgIHZhbGlkYXRlUGx1Z2luQWN0aW9ucyhwbHVnaW5OYW1lLCBpbml0aWFsaXplZFBsdWdpbik7XG4gICAgICByZXR1cm4gaW5pdGlhbGl6ZWRQbHVnaW47XG4gICAgfSlcbiAgfSk7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZVBsdWdpbkFjdGlvbnMocGx1Z2luTmFtZSwgcGx1Z2luKSB7XG4gIHZhciBfYSwgX2IsIF9jLCBfZCwgX2U7XG4gIGlmICghcGx1Z2luKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIChfYSA9IHBsdWdpbi5tb2RlbHMpID09IG51bGwgPyB2b2lkIDAgOiBfYS5mb3JFYWNoKChtb2RlbCkgPT4gdmFsaWRhdGVOYW1pbmcocGx1Z2luTmFtZSwgbW9kZWwpKTtcbiAgKF9iID0gcGx1Z2luLnJldHJpZXZlcnMpID09IG51bGwgPyB2b2lkIDAgOiBfYi5mb3JFYWNoKFxuICAgIChyZXRyaWV2ZXIpID0+IHZhbGlkYXRlTmFtaW5nKHBsdWdpbk5hbWUsIHJldHJpZXZlcilcbiAgKTtcbiAgKF9jID0gcGx1Z2luLmVtYmVkZGVycykgPT0gbnVsbCA/IHZvaWQgMCA6IF9jLmZvckVhY2goKGVtYmVkZGVyKSA9PiB2YWxpZGF0ZU5hbWluZyhwbHVnaW5OYW1lLCBlbWJlZGRlcikpO1xuICAoX2QgPSBwbHVnaW4uaW5kZXhlcnMpID09IG51bGwgPyB2b2lkIDAgOiBfZC5mb3JFYWNoKChpbmRleGVyKSA9PiB2YWxpZGF0ZU5hbWluZyhwbHVnaW5OYW1lLCBpbmRleGVyKSk7XG4gIChfZSA9IHBsdWdpbi5ldmFsdWF0b3JzKSA9PSBudWxsID8gdm9pZCAwIDogX2UuZm9yRWFjaChcbiAgICAoZXZhbHVhdG9yKSA9PiB2YWxpZGF0ZU5hbWluZyhwbHVnaW5OYW1lLCBldmFsdWF0b3IpXG4gICk7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZU5hbWluZyhwbHVnaW5OYW1lLCBhY3Rpb24pIHtcbiAgY29uc3QgbmFtZVBhcnRzID0gYWN0aW9uLl9fYWN0aW9uLm5hbWUuc3BsaXQoXCIvXCIpO1xuICBpZiAobmFtZVBhcnRzWzBdICE9PSBwbHVnaW5OYW1lKSB7XG4gICAgY29uc3QgZXJyID0gYFBsdWdpbiBuYW1lICR7cGx1Z2luTmFtZX0gbm90IGZvdW5kIGluIGFjdGlvbiBuYW1lICR7YWN0aW9uLl9fYWN0aW9uLm5hbWV9LiBBY3Rpb24gbmFtZXMgbXVzdCBmb2xsb3cgdGhlIHBhdHRlcm4ge3BsdWdpbk5hbWV9L3thY3Rpb25OYW1lfWA7XG4gICAgdGhyb3cgbmV3IEVycm9yKGVycik7XG4gIH1cbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBnZW5raXRQbHVnaW5cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGx1Z2luLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/plugin.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/reflectionApi.js":
/*!***********************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/reflectionApi.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar reflectionApi_exports = {};\n__export(reflectionApi_exports, {\n  RunActionResponseSchema: () => RunActionResponseSchema,\n  startReflectionApi: () => startReflectionApi\n});\nmodule.exports = __toCommonJS(reflectionApi_exports);\nvar import_express = __toESM(__webpack_require__(/*! express */ \"express\"));\nvar import_zod = __toESM(__webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/index.cjs\"));\nvar import_action = __webpack_require__(/*! ./action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\");\nvar import_config = __webpack_require__(/*! ./config.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/config.js\");\nvar import_logging = __webpack_require__(/*! ./logging.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar registry = __toESM(__webpack_require__(/*! ./registry.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/registry.js\"));\nvar import_schema = __webpack_require__(/*! ./schema.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_tracing = __webpack_require__(/*! ./tracing.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nconst RunActionResponseSchema = import_zod.default.object({\n  result: import_zod.default.unknown().optional(),\n  error: import_zod.default.unknown().optional(),\n  telemetry: import_zod.default.object({\n    traceId: import_zod.default.string().optional()\n  }).optional()\n});\nlet server;\nconst GLOBAL_REFLECTION_API_PORT_KEY = \"genkit__reflectionApiPort\";\nfunction startReflectionApi(port) {\n  return __async(this, null, function* () {\n    if (global[GLOBAL_REFLECTION_API_PORT_KEY] !== void 0) {\n      import_logging.logger.warn(\n        `Reflection API is already running on port ${global[GLOBAL_REFLECTION_API_PORT_KEY]}`\n      );\n      return;\n    }\n    if (!port) {\n      port = Number(process.env.GENKIT_REFLECTION_PORT) || 3100;\n    }\n    global[GLOBAL_REFLECTION_API_PORT_KEY] = port;\n    const api = (0, import_express.default)();\n    api.use(import_express.default.json({ limit: \"30mb\" }));\n    api.get(\"/api/__health\", (_, response) => __async(this, null, function* () {\n      yield registry.listActions();\n      response.status(200).send(\"OK\");\n    }));\n    api.get(\"/api/__quitquitquit\", (_, response) => __async(this, null, function* () {\n      import_logging.logger.debug(\"Received quitquitquit\");\n      response.status(200).send(\"OK\");\n      yield stopReflectionApi();\n    }));\n    api.get(\"/api/actions\", (_, response, next) => __async(this, null, function* () {\n      import_logging.logger.debug(\"Fetching actions.\");\n      const actions = yield registry.listActions();\n      const convertedActions = {};\n      Object.keys(actions).forEach((key) => {\n        const action = actions[key].__action;\n        convertedActions[key] = {\n          key,\n          name: action.name,\n          description: action.description,\n          metadata: action.metadata\n        };\n        if (action.inputSchema || action.inputJsonSchema) {\n          convertedActions[key].inputSchema = (0, import_schema.toJsonSchema)({\n            schema: action.inputSchema,\n            jsonSchema: action.inputJsonSchema\n          });\n        }\n        if (action.outputSchema || action.outputJsonSchema) {\n          convertedActions[key].outputSchema = (0, import_schema.toJsonSchema)({\n            schema: action.outputSchema,\n            jsonSchema: action.outputJsonSchema\n          });\n        }\n      });\n      try {\n        response.send(convertedActions);\n      } catch (err) {\n        const { message, stack } = err;\n        next({ message, stack });\n      }\n    }));\n    api.post(\"/api/runAction\", (request, response, next) => __async(this, null, function* () {\n      const { key, input } = request.body;\n      const { stream } = request.query;\n      import_logging.logger.debug(`Running action \\`${key}\\`...`);\n      let traceId;\n      try {\n        const action = yield registry.lookupAction(key);\n        if (!action) {\n          response.status(404).send(`action ${key} not found`);\n          return;\n        }\n        if (stream === \"true\") {\n          const result = yield (0, import_tracing.newTrace)(\n            { name: \"dev-run-action-wrapper\" },\n            (_, span) => __async(this, null, function* () {\n              (0, import_tracing.setCustomMetadataAttribute)(\"genkit-dev-internal\", \"true\");\n              traceId = span.spanContext().traceId;\n              return yield (0, import_action.runWithStreamingCallback)(\n                (chunk) => {\n                  response.write(JSON.stringify(chunk) + \"\\n\");\n                },\n                () => __async(this, null, function* () {\n                  return yield action(input);\n                })\n              );\n            })\n          );\n          yield (0, import_tracing.flushTracing)();\n          response.write(\n            JSON.stringify({\n              result,\n              telemetry: traceId ? {\n                traceId\n              } : void 0\n            })\n          );\n          response.end();\n        } else {\n          const result = yield (0, import_tracing.newTrace)(\n            { name: \"dev-run-action-wrapper\" },\n            (_, span) => __async(this, null, function* () {\n              (0, import_tracing.setCustomMetadataAttribute)(\"genkit-dev-internal\", \"true\");\n              traceId = span.spanContext().traceId;\n              return yield action(input);\n            })\n          );\n          response.send({\n            result,\n            telemetry: traceId ? {\n              traceId\n            } : void 0\n          });\n        }\n      } catch (err) {\n        const { message, stack } = err;\n        next({ message, stack, traceId });\n      }\n    }));\n    api.get(\"/api/envs\", (_, response) => __async(this, null, function* () {\n      response.json(import_config.config.configuredEnvs);\n    }));\n    api.get(\"/api/envs/:env/traces/:traceId\", (request, response) => __async(this, null, function* () {\n      const { env, traceId } = request.params;\n      import_logging.logger.debug(`Fetching trace \\`${traceId}\\` for env \\`${env}\\`.`);\n      const tracestore = yield registry.lookupTraceStore(env);\n      if (!tracestore) {\n        return response.status(500).send({\n          code: import_action.StatusCodes.FAILED_PRECONDITION,\n          message: `${env} trace store not found`\n        });\n      }\n      try {\n        const trace = yield tracestore == null ? void 0 : tracestore.load(traceId);\n        return trace ? response.json(trace) : response.status(404).send({\n          code: import_action.StatusCodes.NOT_FOUND,\n          message: `Trace with traceId=${traceId} not found.`\n        });\n      } catch (err) {\n        const error = err;\n        const { message, stack } = error;\n        const errorResponse = {\n          code: import_action.StatusCodes.INTERNAL,\n          message,\n          details: {\n            stack\n          }\n        };\n        return response.status(500).json(errorResponse);\n      }\n    }));\n    api.get(\"/api/envs/:env/traces\", (request, response, next) => __async(this, null, function* () {\n      const { env } = request.params;\n      const { limit, continuationToken } = request.query;\n      import_logging.logger.debug(`Fetching traces for env \\`${env}\\`.`);\n      const tracestore = yield registry.lookupTraceStore(env);\n      if (!tracestore) {\n        return response.status(500).send({\n          code: import_action.StatusCodes.FAILED_PRECONDITION,\n          message: `${env} trace store not found`\n        });\n      }\n      try {\n        response.json(\n          yield tracestore.list({\n            limit: limit ? parseInt(limit.toString()) : void 0,\n            continuationToken: continuationToken ? continuationToken.toString() : void 0\n          })\n        );\n      } catch (err) {\n        const { message, stack } = err;\n        next({ message, stack });\n      }\n    }));\n    api.get(\n      \"/api/envs/:env/flowStates/:flowId\",\n      (request, response, next) => __async(this, null, function* () {\n        const { env, flowId } = request.params;\n        import_logging.logger.debug(`Fetching flow state \\`${flowId}\\` for env \\`${env}\\`.`);\n        const flowStateStore = yield registry.lookupFlowStateStore(env);\n        if (!flowStateStore) {\n          return response.status(500).send({\n            code: import_action.StatusCodes.FAILED_PRECONDITION,\n            message: `${env} flow state store not found`\n          });\n        }\n        try {\n          response.json(yield flowStateStore == null ? void 0 : flowStateStore.load(flowId));\n        } catch (err) {\n          const { message, stack } = err;\n          next({ message, stack });\n        }\n      })\n    );\n    api.get(\"/api/envs/:env/flowStates\", (request, response, next) => __async(this, null, function* () {\n      const { env } = request.params;\n      const { limit, continuationToken } = request.query;\n      import_logging.logger.debug(`Fetching traces for env \\`${env}\\`.`);\n      const flowStateStore = yield registry.lookupFlowStateStore(env);\n      if (!flowStateStore) {\n        return response.status(500).send({\n          code: import_action.StatusCodes.FAILED_PRECONDITION,\n          message: `${env} flow state store not found`\n        });\n      }\n      try {\n        response.json(\n          yield flowStateStore == null ? void 0 : flowStateStore.list({\n            limit: limit ? parseInt(limit.toString()) : void 0,\n            continuationToken: continuationToken ? continuationToken.toString() : void 0\n          })\n        );\n      } catch (err) {\n        const { message, stack } = err;\n        next({ message, stack });\n      }\n    }));\n    api.use((err, req, res, next) => {\n      import_logging.logger.error(err.stack);\n      const error = err;\n      const { message, stack } = error;\n      const errorResponse = {\n        code: import_action.StatusCodes.INTERNAL,\n        message,\n        details: {\n          stack\n        }\n      };\n      if (err.traceId) {\n        errorResponse.details.traceId = err.traceId;\n      }\n      res.status(500).json(errorResponse);\n    });\n    server = api.listen(port, () => {\n      console.log(`Reflection API running on http://localhost:${port}`);\n    });\n    server.on(\"error\", (error) => {\n      if (process.env.GENKIT_REFLECTION_ON_STARTUP_FAILURE === \"ignore\") {\n        import_logging.logger.warn(\n          `Failed to start the Reflection API on port ${port}, ignoring the error.`\n        );\n        import_logging.logger.debug(error);\n      } else {\n        throw error;\n      }\n    });\n    process.on(\"SIGTERM\", () => __async(this, null, function* () {\n      return yield stopReflectionApi();\n    }));\n  });\n}\nfunction stopReflectionApi() {\n  return __async(this, null, function* () {\n    yield Promise.all([\n      new Promise((resolve) => {\n        if (server) {\n          server.close(() => {\n            import_logging.logger.info(\"Reflection API has succesfully shut down.\");\n            resolve();\n          });\n        } else {\n          resolve();\n        }\n      }),\n      (0, import_tracing.cleanUpTracing)()\n    ]);\n    process.exit(0);\n  });\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=reflectionApi.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/reflectionApi.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/registry.js":
/*!******************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/registry.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar registry_exports = {};\n__export(registry_exports, {\n  __hardResetRegistryForTesting: () => __hardResetRegistryForTesting,\n  initializePlugin: () => initializePlugin,\n  listActions: () => listActions,\n  lookupAction: () => lookupAction,\n  lookupFlowStateStore: () => lookupFlowStateStore,\n  lookupPlugin: () => lookupPlugin,\n  lookupSchema: () => lookupSchema,\n  lookupTraceStore: () => lookupTraceStore,\n  registerAction: () => registerAction,\n  registerFlowStateStore: () => registerFlowStateStore,\n  registerPluginProvider: () => registerPluginProvider,\n  registerSchema: () => registerSchema,\n  registerTraceStore: () => registerTraceStore\n});\nmodule.exports = __toCommonJS(registry_exports);\nvar import_logging = __webpack_require__(/*! ./logging.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_reflectionApi = __webpack_require__(/*! ./reflectionApi.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/reflectionApi.js\");\nconst ACTIONS_BY_ID = \"genkit__ACTIONS_BY_ID\";\nconst TRACE_STORES_BY_ENV = \"genkit__TRACE_STORES_BY_ENV\";\nconst FLOW_STATE_STORES_BY_ENV = \"genkit__FLOW_STATE_STORES_BY_ENV\";\nconst PLUGINS_BY_NAME = \"genkit__PLUGINS_BY_NAME\";\nconst SCHEMAS_BY_NAME = \"genkit__SCHEMAS_BY_NAME\";\nfunction actionsById() {\n  if (global[ACTIONS_BY_ID] === void 0) {\n    global[ACTIONS_BY_ID] = {};\n  }\n  return global[ACTIONS_BY_ID];\n}\nfunction traceStoresByEnv() {\n  if (global[TRACE_STORES_BY_ENV] === void 0) {\n    global[TRACE_STORES_BY_ENV] = {};\n  }\n  return global[TRACE_STORES_BY_ENV];\n}\nfunction flowStateStoresByEnv() {\n  if (global[FLOW_STATE_STORES_BY_ENV] === void 0) {\n    global[FLOW_STATE_STORES_BY_ENV] = {};\n  }\n  return global[FLOW_STATE_STORES_BY_ENV];\n}\nfunction pluginsByName() {\n  if (global[PLUGINS_BY_NAME] === void 0) {\n    global[PLUGINS_BY_NAME] = {};\n  }\n  return global[PLUGINS_BY_NAME];\n}\nfunction schemasByName() {\n  if (global[SCHEMAS_BY_NAME] === void 0) {\n    global[SCHEMAS_BY_NAME] = {};\n  }\n  return global[SCHEMAS_BY_NAME];\n}\nfunction lookupAction(key) {\n  return __async(this, null, function* () {\n    const pluginName = parsePluginName(key);\n    if (!actionsById()[key] && pluginName) {\n      yield initializePlugin(pluginName);\n    }\n    return actionsById()[key];\n  });\n}\nfunction parsePluginName(registryKey) {\n  const tokens = registryKey.split(\"/\");\n  if (tokens.length === 4) {\n    return tokens[2];\n  }\n  return void 0;\n}\nfunction registerAction(type, action) {\n  import_logging.logger.info(`Registering ${type}: ${action.__action.name}`);\n  const key = `/${type}/${action.__action.name}`;\n  if (actionsById().hasOwnProperty(key)) {\n    import_logging.logger.warn(\n      `WARNING: ${key} already has an entry in the registry. Overwriting.`\n    );\n  }\n  actionsById()[key] = action;\n}\nfunction listActions() {\n  return __async(this, null, function* () {\n    for (const pluginName of Object.keys(pluginsByName())) {\n      yield initializePlugin(pluginName);\n    }\n    return Object.assign({}, actionsById());\n  });\n}\nfunction registerTraceStore(env, traceStoreProvider) {\n  traceStoresByEnv()[env] = traceStoreProvider;\n}\nconst traceStoresByEnvCache = {};\nfunction lookupTraceStore(env) {\n  return __async(this, null, function* () {\n    if (!traceStoresByEnv()[env]) {\n      return void 0;\n    }\n    const cached = traceStoresByEnvCache[env];\n    if (!cached) {\n      const newStore = traceStoresByEnv()[env]();\n      traceStoresByEnvCache[env] = newStore;\n      return newStore;\n    }\n    return cached;\n  });\n}\nfunction registerFlowStateStore(env, flowStateStoreProvider) {\n  flowStateStoresByEnv()[env] = flowStateStoreProvider;\n}\nconst flowStateStoresByEnvCache = {};\nfunction lookupFlowStateStore(env) {\n  return __async(this, null, function* () {\n    if (!flowStateStoresByEnv()[env]) {\n      return void 0;\n    }\n    const cached = flowStateStoresByEnvCache[env];\n    if (!cached) {\n      const newStore = flowStateStoresByEnv()[env]();\n      flowStateStoresByEnvCache[env] = newStore;\n      return newStore;\n    }\n    return cached;\n  });\n}\nfunction registerPluginProvider(name, provider) {\n  let cached;\n  pluginsByName()[name] = {\n    name: provider.name,\n    initializer: () => {\n      if (cached) {\n        return cached;\n      }\n      cached = provider.initializer();\n      return cached;\n    }\n  };\n}\nfunction lookupPlugin(name) {\n  return pluginsByName()[name];\n}\nfunction initializePlugin(name) {\n  return __async(this, null, function* () {\n    if (pluginsByName()[name]) {\n      return yield pluginsByName()[name].initializer();\n    }\n    return void 0;\n  });\n}\nfunction registerSchema(name, data) {\n  schemasByName()[name] = data;\n}\nfunction lookupSchema(name) {\n  return schemasByName()[name];\n}\nif (process.env.GENKIT_ENV === \"dev\") {\n  (0, import_reflectionApi.startReflectionApi)();\n}\nfunction __hardResetRegistryForTesting() {\n  delete global[ACTIONS_BY_ID];\n  delete global[TRACE_STORES_BY_ENV];\n  delete global[FLOW_STATE_STORES_BY_ENV];\n  delete global[PLUGINS_BY_NAME];\n  deleteAll(flowStateStoresByEnvCache);\n  deleteAll(traceStoresByEnvCache);\n}\nfunction deleteAll(map) {\n  Object.keys(map).forEach((key) => delete map[key]);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=registry.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/registry.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/schema.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar schema_exports = {};\n__export(schema_exports, {\n  ValidationError: () => ValidationError,\n  defineJsonSchema: () => defineJsonSchema,\n  defineSchema: () => defineSchema,\n  parseSchema: () => parseSchema,\n  toJsonSchema: () => toJsonSchema,\n  validateSchema: () => validateSchema,\n  z: () => import_zod.z\n});\nmodule.exports = __toCommonJS(schema_exports);\nvar import_ajv = __toESM(__webpack_require__(/*! ajv */ \"(action-browser)/./node_modules/ajv/dist/ajv.js\"));\nvar import_ajv_formats = __toESM(__webpack_require__(/*! ajv-formats */ \"(action-browser)/./node_modules/ajv-formats/dist/index.js\"));\nvar import_zod = __webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/index.cjs\");\nvar import_zod_to_json_schema = __toESM(__webpack_require__(/*! zod-to-json-schema */ \"(action-browser)/./node_modules/zod-to-json-schema/dist/cjs/index.js\"));\nvar import_error = __webpack_require__(/*! ./error.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\");\nvar import_registry = __webpack_require__(/*! ./registry.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/registry.js\");\nconst ajv = new import_ajv.default();\n(0, import_ajv_formats.default)(ajv);\nconst jsonSchemas = /* @__PURE__ */ new WeakMap();\nconst validators = /* @__PURE__ */ new WeakMap();\nclass ValidationError extends import_error.GenkitError {\n  constructor({\n    data,\n    errors,\n    schema\n  }) {\n    super({\n      status: \"INVALID_ARGUMENT\",\n      message: `Schema validation failed. Parse Errors:\n\n${errors.map((e) => `- ${e.path}: ${e.message}`).join(\"\\n\")}\n\nProvided data:\n\n${JSON.stringify(data, null, 2)}\n\nRequired JSON schema:\n\n${JSON.stringify(schema, null, 2)}`,\n      detail: { errors, schema }\n    });\n  }\n}\nfunction toJsonSchema({\n  jsonSchema,\n  schema\n}) {\n  if (!jsonSchema && !schema)\n    return null;\n  if (jsonSchema)\n    return jsonSchema;\n  if (jsonSchemas.has(schema))\n    return jsonSchemas.get(schema);\n  const outSchema = (0, import_zod_to_json_schema.default)(schema, {\n    $refStrategy: \"none\",\n    removeAdditionalStrategy: \"strict\"\n  });\n  jsonSchemas.set(schema, outSchema);\n  return outSchema;\n}\nfunction toErrorDetail(error) {\n  return {\n    path: error.instancePath.substring(1).replace(/\\//g, \".\") || \"(root)\",\n    message: error.message\n  };\n}\nfunction validateSchema(data, options) {\n  var _a;\n  const toValidate = toJsonSchema(options);\n  if (!toValidate) {\n    return { valid: true, schema: toValidate };\n  }\n  const validator = validators.get(toValidate) || ajv.compile(toValidate);\n  const valid = validator(data);\n  const errors = (_a = validator.errors) == null ? void 0 : _a.map((e) => e);\n  return { valid, errors: errors == null ? void 0 : errors.map(toErrorDetail), schema: toValidate };\n}\nfunction parseSchema(data, options) {\n  const { valid, errors, schema } = validateSchema(data, options);\n  if (!valid)\n    throw new ValidationError({ data, errors, schema });\n  return data;\n}\nfunction defineSchema(name, schema) {\n  (0, import_registry.registerSchema)(name, { schema });\n  return schema;\n}\nfunction defineJsonSchema(name, jsonSchema) {\n  (0, import_registry.registerSchema)(name, { jsonSchema });\n  return jsonSchema;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=schema.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3NjaGVtYS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG1HQUFtRztBQUNuRztBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSw4QkFBOEI7QUFDdkc7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSx5QkFBeUIsbUJBQU8sQ0FBQyw0REFBSztBQUN0QyxpQ0FBaUMsbUJBQU8sQ0FBQyw4RUFBYTtBQUN0RCxpQkFBaUIsbUJBQU8sQ0FBQywwREFBSztBQUM5Qix3Q0FBd0MsbUJBQU8sQ0FBQyxnR0FBb0I7QUFDcEUsbUJBQW1CLG1CQUFPLENBQUMsZ0ZBQVk7QUFDdkMsc0JBQXNCLG1CQUFPLENBQUMsc0ZBQWU7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQSxFQUFFLHVCQUF1QixPQUFPLElBQUksVUFBVTs7QUFFOUM7O0FBRUEsRUFBRTs7QUFFRjs7QUFFQSxFQUFFLGdDQUFnQztBQUNsQyxnQkFBZ0I7QUFDaEIsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxVQUFVLHdCQUF3QjtBQUNsQztBQUNBLGdDQUFnQyxzQkFBc0I7QUFDdEQ7QUFDQTtBQUNBO0FBQ0EsOENBQThDLFFBQVE7QUFDdEQ7QUFDQTtBQUNBO0FBQ0EsOENBQThDLFlBQVk7QUFDMUQ7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQVFMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25hc3RlcnkzNjAvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9zY2hlbWEuanM/Zjc2MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19nZXRQcm90b09mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0VTTSA9IChtb2QsIGlzTm9kZU1vZGUsIHRhcmdldCkgPT4gKHRhcmdldCA9IG1vZCAhPSBudWxsID8gX19jcmVhdGUoX19nZXRQcm90b09mKG1vZCkpIDoge30sIF9fY29weVByb3BzKFxuICAvLyBJZiB0aGUgaW1wb3J0ZXIgaXMgaW4gbm9kZSBjb21wYXRpYmlsaXR5IG1vZGUgb3IgdGhpcyBpcyBub3QgYW4gRVNNXG4gIC8vIGZpbGUgdGhhdCBoYXMgYmVlbiBjb252ZXJ0ZWQgdG8gYSBDb21tb25KUyBmaWxlIHVzaW5nIGEgQmFiZWwtXG4gIC8vIGNvbXBhdGlibGUgdHJhbnNmb3JtIChpLmUuIFwiX19lc01vZHVsZVwiIGhhcyBub3QgYmVlbiBzZXQpLCB0aGVuIHNldFxuICAvLyBcImRlZmF1bHRcIiB0byB0aGUgQ29tbW9uSlMgXCJtb2R1bGUuZXhwb3J0c1wiIGZvciBub2RlIGNvbXBhdGliaWxpdHkuXG4gIGlzTm9kZU1vZGUgfHwgIW1vZCB8fCAhbW9kLl9fZXNNb2R1bGUgPyBfX2RlZlByb3AodGFyZ2V0LCBcImRlZmF1bHRcIiwgeyB2YWx1ZTogbW9kLCBlbnVtZXJhYmxlOiB0cnVlIH0pIDogdGFyZ2V0LFxuICBtb2RcbikpO1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgc2NoZW1hX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNjaGVtYV9leHBvcnRzLCB7XG4gIFZhbGlkYXRpb25FcnJvcjogKCkgPT4gVmFsaWRhdGlvbkVycm9yLFxuICBkZWZpbmVKc29uU2NoZW1hOiAoKSA9PiBkZWZpbmVKc29uU2NoZW1hLFxuICBkZWZpbmVTY2hlbWE6ICgpID0+IGRlZmluZVNjaGVtYSxcbiAgcGFyc2VTY2hlbWE6ICgpID0+IHBhcnNlU2NoZW1hLFxuICB0b0pzb25TY2hlbWE6ICgpID0+IHRvSnNvblNjaGVtYSxcbiAgdmFsaWRhdGVTY2hlbWE6ICgpID0+IHZhbGlkYXRlU2NoZW1hLFxuICB6OiAoKSA9PiBpbXBvcnRfem9kLnpcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc2NoZW1hX2V4cG9ydHMpO1xudmFyIGltcG9ydF9hanYgPSBfX3RvRVNNKHJlcXVpcmUoXCJhanZcIikpO1xudmFyIGltcG9ydF9hanZfZm9ybWF0cyA9IF9fdG9FU00ocmVxdWlyZShcImFqdi1mb3JtYXRzXCIpKTtcbnZhciBpbXBvcnRfem9kID0gcmVxdWlyZShcInpvZFwiKTtcbnZhciBpbXBvcnRfem9kX3RvX2pzb25fc2NoZW1hID0gX190b0VTTShyZXF1aXJlKFwiem9kLXRvLWpzb24tc2NoZW1hXCIpKTtcbnZhciBpbXBvcnRfZXJyb3IgPSByZXF1aXJlKFwiLi9lcnJvci5qc1wiKTtcbnZhciBpbXBvcnRfcmVnaXN0cnkgPSByZXF1aXJlKFwiLi9yZWdpc3RyeS5qc1wiKTtcbmNvbnN0IGFqdiA9IG5ldyBpbXBvcnRfYWp2LmRlZmF1bHQoKTtcbigwLCBpbXBvcnRfYWp2X2Zvcm1hdHMuZGVmYXVsdCkoYWp2KTtcbmNvbnN0IGpzb25TY2hlbWFzID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG5jb25zdCB2YWxpZGF0b3JzID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG5jbGFzcyBWYWxpZGF0aW9uRXJyb3IgZXh0ZW5kcyBpbXBvcnRfZXJyb3IuR2Vua2l0RXJyb3Ige1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgZGF0YSxcbiAgICBlcnJvcnMsXG4gICAgc2NoZW1hXG4gIH0pIHtcbiAgICBzdXBlcih7XG4gICAgICBzdGF0dXM6IFwiSU5WQUxJRF9BUkdVTUVOVFwiLFxuICAgICAgbWVzc2FnZTogYFNjaGVtYSB2YWxpZGF0aW9uIGZhaWxlZC4gUGFyc2UgRXJyb3JzOlxuXG4ke2Vycm9ycy5tYXAoKGUpID0+IGAtICR7ZS5wYXRofTogJHtlLm1lc3NhZ2V9YCkuam9pbihcIlxcblwiKX1cblxuUHJvdmlkZWQgZGF0YTpcblxuJHtKU09OLnN0cmluZ2lmeShkYXRhLCBudWxsLCAyKX1cblxuUmVxdWlyZWQgSlNPTiBzY2hlbWE6XG5cbiR7SlNPTi5zdHJpbmdpZnkoc2NoZW1hLCBudWxsLCAyKX1gLFxuICAgICAgZGV0YWlsOiB7IGVycm9ycywgc2NoZW1hIH1cbiAgICB9KTtcbiAgfVxufVxuZnVuY3Rpb24gdG9Kc29uU2NoZW1hKHtcbiAganNvblNjaGVtYSxcbiAgc2NoZW1hXG59KSB7XG4gIGlmICghanNvblNjaGVtYSAmJiAhc2NoZW1hKVxuICAgIHJldHVybiBudWxsO1xuICBpZiAoanNvblNjaGVtYSlcbiAgICByZXR1cm4ganNvblNjaGVtYTtcbiAgaWYgKGpzb25TY2hlbWFzLmhhcyhzY2hlbWEpKVxuICAgIHJldHVybiBqc29uU2NoZW1hcy5nZXQoc2NoZW1hKTtcbiAgY29uc3Qgb3V0U2NoZW1hID0gKDAsIGltcG9ydF96b2RfdG9fanNvbl9zY2hlbWEuZGVmYXVsdCkoc2NoZW1hLCB7XG4gICAgJHJlZlN0cmF0ZWd5OiBcIm5vbmVcIixcbiAgICByZW1vdmVBZGRpdGlvbmFsU3RyYXRlZ3k6IFwic3RyaWN0XCJcbiAgfSk7XG4gIGpzb25TY2hlbWFzLnNldChzY2hlbWEsIG91dFNjaGVtYSk7XG4gIHJldHVybiBvdXRTY2hlbWE7XG59XG5mdW5jdGlvbiB0b0Vycm9yRGV0YWlsKGVycm9yKSB7XG4gIHJldHVybiB7XG4gICAgcGF0aDogZXJyb3IuaW5zdGFuY2VQYXRoLnN1YnN0cmluZygxKS5yZXBsYWNlKC9cXC8vZywgXCIuXCIpIHx8IFwiKHJvb3QpXCIsXG4gICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZVxuICB9O1xufVxuZnVuY3Rpb24gdmFsaWRhdGVTY2hlbWEoZGF0YSwgb3B0aW9ucykge1xuICB2YXIgX2E7XG4gIGNvbnN0IHRvVmFsaWRhdGUgPSB0b0pzb25TY2hlbWEob3B0aW9ucyk7XG4gIGlmICghdG9WYWxpZGF0ZSkge1xuICAgIHJldHVybiB7IHZhbGlkOiB0cnVlLCBzY2hlbWE6IHRvVmFsaWRhdGUgfTtcbiAgfVxuICBjb25zdCB2YWxpZGF0b3IgPSB2YWxpZGF0b3JzLmdldCh0b1ZhbGlkYXRlKSB8fCBhanYuY29tcGlsZSh0b1ZhbGlkYXRlKTtcbiAgY29uc3QgdmFsaWQgPSB2YWxpZGF0b3IoZGF0YSk7XG4gIGNvbnN0IGVycm9ycyA9IChfYSA9IHZhbGlkYXRvci5lcnJvcnMpID09IG51bGwgPyB2b2lkIDAgOiBfYS5tYXAoKGUpID0+IGUpO1xuICByZXR1cm4geyB2YWxpZCwgZXJyb3JzOiBlcnJvcnMgPT0gbnVsbCA/IHZvaWQgMCA6IGVycm9ycy5tYXAodG9FcnJvckRldGFpbCksIHNjaGVtYTogdG9WYWxpZGF0ZSB9O1xufVxuZnVuY3Rpb24gcGFyc2VTY2hlbWEoZGF0YSwgb3B0aW9ucykge1xuICBjb25zdCB7IHZhbGlkLCBlcnJvcnMsIHNjaGVtYSB9ID0gdmFsaWRhdGVTY2hlbWEoZGF0YSwgb3B0aW9ucyk7XG4gIGlmICghdmFsaWQpXG4gICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcih7IGRhdGEsIGVycm9ycywgc2NoZW1hIH0pO1xuICByZXR1cm4gZGF0YTtcbn1cbmZ1bmN0aW9uIGRlZmluZVNjaGVtYShuYW1lLCBzY2hlbWEpIHtcbiAgKDAsIGltcG9ydF9yZWdpc3RyeS5yZWdpc3RlclNjaGVtYSkobmFtZSwgeyBzY2hlbWEgfSk7XG4gIHJldHVybiBzY2hlbWE7XG59XG5mdW5jdGlvbiBkZWZpbmVKc29uU2NoZW1hKG5hbWUsIGpzb25TY2hlbWEpIHtcbiAgKDAsIGltcG9ydF9yZWdpc3RyeS5yZWdpc3RlclNjaGVtYSkobmFtZSwgeyBqc29uU2NoZW1hIH0pO1xuICByZXR1cm4ganNvblNjaGVtYTtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBWYWxpZGF0aW9uRXJyb3IsXG4gIGRlZmluZUpzb25TY2hlbWEsXG4gIGRlZmluZVNjaGVtYSxcbiAgcGFyc2VTY2hlbWEsXG4gIHRvSnNvblNjaGVtYSxcbiAgdmFsaWRhdGVTY2hlbWEsXG4gIHpcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZW1hLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/statusTypes.js":
/*!*********************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/statusTypes.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar statusTypes_exports = {};\n__export(statusTypes_exports, {\n  StatusCodes: () => StatusCodes,\n  StatusNameSchema: () => StatusNameSchema,\n  StatusSchema: () => StatusSchema\n});\nmodule.exports = __toCommonJS(statusTypes_exports);\nvar z = __toESM(__webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/index.cjs\"));\nvar StatusCodes = /* @__PURE__ */ ((StatusCodes2) => {\n  StatusCodes2[StatusCodes2[\"OK\"] = 0] = \"OK\";\n  StatusCodes2[StatusCodes2[\"CANCELLED\"] = 1] = \"CANCELLED\";\n  StatusCodes2[StatusCodes2[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n  StatusCodes2[StatusCodes2[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n  StatusCodes2[StatusCodes2[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n  StatusCodes2[StatusCodes2[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n  StatusCodes2[StatusCodes2[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n  StatusCodes2[StatusCodes2[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n  StatusCodes2[StatusCodes2[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n  StatusCodes2[StatusCodes2[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n  StatusCodes2[StatusCodes2[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n  StatusCodes2[StatusCodes2[\"ABORTED\"] = 10] = \"ABORTED\";\n  StatusCodes2[StatusCodes2[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n  StatusCodes2[StatusCodes2[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n  StatusCodes2[StatusCodes2[\"INTERNAL\"] = 13] = \"INTERNAL\";\n  StatusCodes2[StatusCodes2[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n  StatusCodes2[StatusCodes2[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n  return StatusCodes2;\n})(StatusCodes || {});\nconst StatusNameSchema = z.enum([\n  \"CANCELLED\",\n  \"UNKNOWN\",\n  \"INVALID_ARGUMENT\",\n  \"DEADLINE_EXCEEDED\",\n  \"NOT_FOUND\",\n  \"ALREADY_EXISTS\",\n  \"PERMISSION_DENIED\",\n  \"UNAUTHENTICATED\",\n  \"RESOURCE_EXHAUSTED\",\n  \"FAILED_PRECONDITION\",\n  \"ABORTED\",\n  \"OUT_OF_RANGE\",\n  \"UNIMPLEMENTED\",\n  \"INTERNAL\",\n  \"UNAVAILABLE\",\n  \"DATA_LOSS\"\n]);\nconst StatusCodesSchema = z.nativeEnum(StatusCodes);\nconst StatusSchema = z.object({\n  code: StatusCodesSchema,\n  message: z.string(),\n  details: z.any().optional()\n});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=statusTypes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3N0YXR1c1R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0EsbUdBQW1HO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLDhCQUE4QjtBQUN2RztBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxnQkFBZ0IsbUJBQU8sQ0FBQywwREFBSztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsbUJBQW1CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxNQUFNLENBSUw7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL21vbmFzdGVyeTM2MC8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3N0YXR1c1R5cGVzLmpzPzU5NTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9fZ2V0UHJvdG9PZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9FU00gPSAobW9kLCBpc05vZGVNb2RlLCB0YXJnZXQpID0+ICh0YXJnZXQgPSBtb2QgIT0gbnVsbCA/IF9fY3JlYXRlKF9fZ2V0UHJvdG9PZihtb2QpKSA6IHt9LCBfX2NvcHlQcm9wcyhcbiAgLy8gSWYgdGhlIGltcG9ydGVyIGlzIGluIG5vZGUgY29tcGF0aWJpbGl0eSBtb2RlIG9yIHRoaXMgaXMgbm90IGFuIEVTTVxuICAvLyBmaWxlIHRoYXQgaGFzIGJlZW4gY29udmVydGVkIHRvIGEgQ29tbW9uSlMgZmlsZSB1c2luZyBhIEJhYmVsLVxuICAvLyBjb21wYXRpYmxlIHRyYW5zZm9ybSAoaS5lLiBcIl9fZXNNb2R1bGVcIiBoYXMgbm90IGJlZW4gc2V0KSwgdGhlbiBzZXRcbiAgLy8gXCJkZWZhdWx0XCIgdG8gdGhlIENvbW1vbkpTIFwibW9kdWxlLmV4cG9ydHNcIiBmb3Igbm9kZSBjb21wYXRpYmlsaXR5LlxuICBpc05vZGVNb2RlIHx8ICFtb2QgfHwgIW1vZC5fX2VzTW9kdWxlID8gX19kZWZQcm9wKHRhcmdldCwgXCJkZWZhdWx0XCIsIHsgdmFsdWU6IG1vZCwgZW51bWVyYWJsZTogdHJ1ZSB9KSA6IHRhcmdldCxcbiAgbW9kXG4pKTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIHN0YXR1c1R5cGVzX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHN0YXR1c1R5cGVzX2V4cG9ydHMsIHtcbiAgU3RhdHVzQ29kZXM6ICgpID0+IFN0YXR1c0NvZGVzLFxuICBTdGF0dXNOYW1lU2NoZW1hOiAoKSA9PiBTdGF0dXNOYW1lU2NoZW1hLFxuICBTdGF0dXNTY2hlbWE6ICgpID0+IFN0YXR1c1NjaGVtYVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzdGF0dXNUeXBlc19leHBvcnRzKTtcbnZhciB6ID0gX190b0VTTShyZXF1aXJlKFwiem9kXCIpKTtcbnZhciBTdGF0dXNDb2RlcyA9IC8qIEBfX1BVUkVfXyAqLyAoKFN0YXR1c0NvZGVzMikgPT4ge1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiT0tcIl0gPSAwXSA9IFwiT0tcIjtcbiAgU3RhdHVzQ29kZXMyW1N0YXR1c0NvZGVzMltcIkNBTkNFTExFRFwiXSA9IDFdID0gXCJDQU5DRUxMRURcIjtcbiAgU3RhdHVzQ29kZXMyW1N0YXR1c0NvZGVzMltcIlVOS05PV05cIl0gPSAyXSA9IFwiVU5LTk9XTlwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiSU5WQUxJRF9BUkdVTUVOVFwiXSA9IDNdID0gXCJJTlZBTElEX0FSR1VNRU5UXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJERUFETElORV9FWENFRURFRFwiXSA9IDRdID0gXCJERUFETElORV9FWENFRURFRFwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiTk9UX0ZPVU5EXCJdID0gNV0gPSBcIk5PVF9GT1VORFwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiQUxSRUFEWV9FWElTVFNcIl0gPSA2XSA9IFwiQUxSRUFEWV9FWElTVFNcIjtcbiAgU3RhdHVzQ29kZXMyW1N0YXR1c0NvZGVzMltcIlBFUk1JU1NJT05fREVOSUVEXCJdID0gN10gPSBcIlBFUk1JU1NJT05fREVOSUVEXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJVTkFVVEhFTlRJQ0FURURcIl0gPSAxNl0gPSBcIlVOQVVUSEVOVElDQVRFRFwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiUkVTT1VSQ0VfRVhIQVVTVEVEXCJdID0gOF0gPSBcIlJFU09VUkNFX0VYSEFVU1RFRFwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiRkFJTEVEX1BSRUNPTkRJVElPTlwiXSA9IDldID0gXCJGQUlMRURfUFJFQ09ORElUSU9OXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJBQk9SVEVEXCJdID0gMTBdID0gXCJBQk9SVEVEXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJPVVRfT0ZfUkFOR0VcIl0gPSAxMV0gPSBcIk9VVF9PRl9SQU5HRVwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiVU5JTVBMRU1FTlRFRFwiXSA9IDEyXSA9IFwiVU5JTVBMRU1FTlRFRFwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiSU5URVJOQUxcIl0gPSAxM10gPSBcIklOVEVSTkFMXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJVTkFWQUlMQUJMRVwiXSA9IDE0XSA9IFwiVU5BVkFJTEFCTEVcIjtcbiAgU3RhdHVzQ29kZXMyW1N0YXR1c0NvZGVzMltcIkRBVEFfTE9TU1wiXSA9IDE1XSA9IFwiREFUQV9MT1NTXCI7XG4gIHJldHVybiBTdGF0dXNDb2RlczI7XG59KShTdGF0dXNDb2RlcyB8fCB7fSk7XG5jb25zdCBTdGF0dXNOYW1lU2NoZW1hID0gei5lbnVtKFtcbiAgXCJDQU5DRUxMRURcIixcbiAgXCJVTktOT1dOXCIsXG4gIFwiSU5WQUxJRF9BUkdVTUVOVFwiLFxuICBcIkRFQURMSU5FX0VYQ0VFREVEXCIsXG4gIFwiTk9UX0ZPVU5EXCIsXG4gIFwiQUxSRUFEWV9FWElTVFNcIixcbiAgXCJQRVJNSVNTSU9OX0RFTklFRFwiLFxuICBcIlVOQVVUSEVOVElDQVRFRFwiLFxuICBcIlJFU09VUkNFX0VYSEFVU1RFRFwiLFxuICBcIkZBSUxFRF9QUkVDT05ESVRJT05cIixcbiAgXCJBQk9SVEVEXCIsXG4gIFwiT1VUX09GX1JBTkdFXCIsXG4gIFwiVU5JTVBMRU1FTlRFRFwiLFxuICBcIklOVEVSTkFMXCIsXG4gIFwiVU5BVkFJTEFCTEVcIixcbiAgXCJEQVRBX0xPU1NcIlxuXSk7XG5jb25zdCBTdGF0dXNDb2Rlc1NjaGVtYSA9IHoubmF0aXZlRW51bShTdGF0dXNDb2Rlcyk7XG5jb25zdCBTdGF0dXNTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGNvZGU6IFN0YXR1c0NvZGVzU2NoZW1hLFxuICBtZXNzYWdlOiB6LnN0cmluZygpLFxuICBkZXRhaWxzOiB6LmFueSgpLm9wdGlvbmFsKClcbn0pO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIFN0YXR1c0NvZGVzLFxuICBTdGF0dXNOYW1lU2NoZW1hLFxuICBTdGF0dXNTY2hlbWFcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdHVzVHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/statusTypes.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/telemetryTypes.js":
/*!************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/telemetryTypes.js ***!
  \************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar telemetryTypes_exports = {};\nmodule.exports = __toCommonJS(telemetryTypes_exports);\n//# sourceMappingURL=telemetryTypes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RlbGVtZXRyeVR5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21vbmFzdGVyeTM2MC8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RlbGVtZXRyeVR5cGVzLmpzPzIyNTMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIHRlbGVtZXRyeVR5cGVzX2V4cG9ydHMgPSB7fTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHRlbGVtZXRyeVR5cGVzX2V4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGVsZW1ldHJ5VHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/telemetryTypes.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js":
/*!*****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar tracing_exports = {};\n__export(tracing_exports, {\n  cleanUpTracing: () => cleanUpTracing,\n  enableTracingAndMetrics: () => enableTracingAndMetrics,\n  flushTracing: () => flushTracing\n});\nmodule.exports = __toCommonJS(tracing_exports);\nvar import_sdk_node = __webpack_require__(/*! @opentelemetry/sdk-node */ \"(action-browser)/./node_modules/@opentelemetry/sdk-node/build/src/index.js\");\nvar import_sdk_trace_base = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ \"(action-browser)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js\");\nvar import_config = __webpack_require__(/*! ./config.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/config.js\");\nvar import_logging = __webpack_require__(/*! ./logging.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_exporter = __webpack_require__(/*! ./tracing/exporter.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/exporter.js\");\nvar import_multiSpanProcessor = __webpack_require__(/*! ./tracing/multiSpanProcessor.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/multiSpanProcessor.js\");\n__reExport(tracing_exports, __webpack_require__(/*! ./tracing/exporter.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/exporter.js\"), module.exports);\n__reExport(tracing_exports, __webpack_require__(/*! ./tracing/instrumentation.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/instrumentation.js\"), module.exports);\n__reExport(tracing_exports, __webpack_require__(/*! ./tracing/localFileTraceStore.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/localFileTraceStore.js\"), module.exports);\n__reExport(tracing_exports, __webpack_require__(/*! ./tracing/processor.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/processor.js\"), module.exports);\n__reExport(tracing_exports, __webpack_require__(/*! ./tracing/types.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/types.js\"), module.exports);\nconst processors = [];\nlet telemetrySDK = null;\nlet nodeOtelConfig = null;\nfunction enableTracingAndMetrics(telemetryConfig, traceStore, traceStoreOptions = {}) {\n  if (traceStore) {\n    addProcessor(\n      createTraceStoreProcessor(\n        traceStore,\n        traceStoreOptions.processor || \"batch\"\n      )\n    );\n  }\n  nodeOtelConfig = telemetryConfig.getConfig() || {};\n  addProcessor(nodeOtelConfig.spanProcessor);\n  nodeOtelConfig.spanProcessor = new import_multiSpanProcessor.MultiSpanProcessor(processors);\n  telemetrySDK = new import_sdk_node.NodeSDK(nodeOtelConfig);\n  telemetrySDK.start();\n  process.on(\"SIGTERM\", () => __async(this, null, function* () {\n    return yield cleanUpTracing();\n  }));\n}\nfunction cleanUpTracing() {\n  return __async(this, null, function* () {\n    return new Promise((resolve) => {\n      if (telemetrySDK) {\n        const metricFlush = maybeFlushMetrics();\n        return metricFlush.then(() => {\n          return telemetrySDK.shutdown().then(() => {\n            import_logging.logger.debug(\"OpenTelemetry SDK shut down.\");\n            telemetrySDK = null;\n            resolve();\n          });\n        });\n      } else {\n        resolve();\n      }\n    });\n  });\n}\nfunction createTraceStoreProcessor(traceStore, processor) {\n  const exporter = new import_exporter.TraceStoreExporter(traceStore);\n  return processor === \"simple\" || (0, import_config.getCurrentEnv)() === \"dev\" ? new import_sdk_trace_base.SimpleSpanProcessor(exporter) : new import_sdk_trace_base.BatchSpanProcessor(exporter);\n}\nfunction addProcessor(processor) {\n  if (processor)\n    processors.push(processor);\n}\nfunction maybeFlushMetrics() {\n  if (nodeOtelConfig == null ? void 0 : nodeOtelConfig.metricReader) {\n    return nodeOtelConfig.metricReader.forceFlush();\n  }\n  return Promise.resolve();\n}\nfunction flushTracing() {\n  return __async(this, null, function* () {\n    yield Promise.all(processors.map((p) => p.forceFlush()));\n  });\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=tracing.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/exporter.js":
/*!**************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing/exporter.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar exporter_exports = {};\n__export(exporter_exports, {\n  TraceStoreExporter: () => TraceStoreExporter\n});\nmodule.exports = __toCommonJS(exporter_exports);\nvar import_api = __webpack_require__(/*! @opentelemetry/api */ \"(action-browser)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nvar import_core = __webpack_require__(/*! @opentelemetry/core */ \"(action-browser)/./node_modules/@opentelemetry/core/build/esm/index.js\");\nvar import_logging = __webpack_require__(/*! ../logging.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_utils = __webpack_require__(/*! ../utils.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/utils.js\");\nclass TraceStoreExporter {\n  constructor(traceStore) {\n    this.traceStore = traceStore;\n  }\n  /**\n   * Export spans.\n   * @param spans\n   * @param resultCallback\n   */\n  export(spans, resultCallback) {\n    this._sendSpans(spans, resultCallback);\n  }\n  /**\n   * Shutdown the exporter.\n   */\n  shutdown() {\n    this._sendSpans([]);\n    return this.forceFlush();\n  }\n  /**\n   * Converts span info into trace store format.\n   * @param span\n   */\n  _exportInfo(span) {\n    const spanData = {\n      spanId: span.spanContext().spanId,\n      traceId: span.spanContext().traceId,\n      startTime: transformTime(span.startTime),\n      endTime: transformTime(span.endTime),\n      attributes: __spreadValues({}, span.attributes),\n      displayName: span.name,\n      links: span.links,\n      spanKind: import_api.SpanKind[span.kind],\n      parentSpanId: span.parentSpanId,\n      sameProcessAsParentSpan: { value: !span.spanContext().isRemote },\n      status: span.status,\n      timeEvents: {\n        timeEvent: span.events.map((e) => {\n          var _a;\n          return {\n            time: transformTime(e.time),\n            annotation: {\n              attributes: (_a = e.attributes) != null ? _a : {},\n              description: e.name\n            }\n          };\n        })\n      }\n    };\n    if (span.instrumentationLibrary !== void 0) {\n      spanData.instrumentationLibrary = {\n        name: span.instrumentationLibrary.name\n      };\n      if (span.instrumentationLibrary.schemaUrl !== void 0) {\n        spanData.instrumentationLibrary.schemaUrl = span.instrumentationLibrary.schemaUrl;\n      }\n      if (span.instrumentationLibrary.version !== void 0) {\n        spanData.instrumentationLibrary.version = span.instrumentationLibrary.version;\n      }\n    }\n    (0, import_utils.deleteUndefinedProps)(spanData);\n    return spanData;\n  }\n  /**\n   * Exports any pending spans in exporter\n   */\n  forceFlush() {\n    return Promise.resolve();\n  }\n  _sendSpans(spans, done) {\n    return __async(this, null, function* () {\n      const traces = {};\n      for (const span of spans) {\n        if (!traces[span.spanContext().traceId]) {\n          traces[span.spanContext().traceId] = [];\n        }\n        traces[span.spanContext().traceId].push(span);\n      }\n      let error = false;\n      for (const traceId of Object.keys(traces)) {\n        try {\n          yield this.save(traceId, traces[traceId]);\n        } catch (e) {\n          error = true;\n          import_logging.logger.error(\"Failed to save trace ${traceId}\", e);\n        }\n        if (done) {\n          return done({\n            code: error ? import_core.ExportResultCode.FAILED : import_core.ExportResultCode.SUCCESS\n          });\n        }\n      }\n    });\n  }\n  save(traceId, spans) {\n    return __async(this, null, function* () {\n      const data = {\n        traceId,\n        spans: {}\n      };\n      for (const span of spans) {\n        const convertedSpan = this._exportInfo(span);\n        data.spans[convertedSpan.spanId] = convertedSpan;\n        if (!convertedSpan.parentSpanId) {\n          data.displayName = convertedSpan.displayName;\n          data.startTime = convertedSpan.startTime;\n          data.endTime = convertedSpan.endTime;\n        }\n      }\n      yield this.traceStore.save(traceId, data);\n    });\n  }\n}\nfunction transformTime(time) {\n  return (0, import_core.hrTimeToMilliseconds)(time);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=exporter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/exporter.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/instrumentation.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing/instrumentation.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar instrumentation_exports = {};\n__export(instrumentation_exports, {\n  ATTR_PREFIX: () => ATTR_PREFIX,\n  SPAN_TYPE_ATTR: () => SPAN_TYPE_ATTR,\n  newTrace: () => newTrace,\n  runInNewSpan: () => runInNewSpan,\n  setCustomMetadataAttribute: () => setCustomMetadataAttribute,\n  setCustomMetadataAttributes: () => setCustomMetadataAttributes,\n  spanMetadataAls: () => spanMetadataAls,\n  toDisplayPath: () => toDisplayPath,\n  traceMetadataAls: () => traceMetadataAls\n});\nmodule.exports = __toCommonJS(instrumentation_exports);\nvar import_api = __webpack_require__(/*! @opentelemetry/api */ \"(action-browser)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nvar import_node_async_hooks = __webpack_require__(/*! node:async_hooks */ \"node:async_hooks\");\nvar import_node_perf_hooks = __webpack_require__(/*! node:perf_hooks */ \"node:perf_hooks\");\nconst spanMetadataAls = new import_node_async_hooks.AsyncLocalStorage();\nconst traceMetadataAls = new import_node_async_hooks.AsyncLocalStorage();\nconst ATTR_PREFIX = \"genkit\";\nconst SPAN_TYPE_ATTR = ATTR_PREFIX + \":type\";\nconst TRACER_NAME = \"genkit-tracer\";\nconst TRACER_VERSION = \"v1\";\nfunction newTrace(opts, fn) {\n  return __async(this, null, function* () {\n    const isRoot = traceMetadataAls.getStore() ? false : true;\n    const traceMetadata = traceMetadataAls.getStore() || {\n      paths: /* @__PURE__ */ new Set(),\n      timestamp: import_node_perf_hooks.performance.now()\n    };\n    if (opts.labels && opts.labels[SPAN_TYPE_ATTR] === \"flow\") {\n      traceMetadata.flowName = opts.name;\n    }\n    return yield traceMetadataAls.run(\n      traceMetadata,\n      () => runInNewSpan(\n        {\n          metadata: {\n            name: opts.name,\n            isRoot\n          },\n          labels: opts.labels,\n          links: opts.links\n        },\n        (metadata, otSpan) => __async(this, null, function* () {\n          return yield fn(metadata, otSpan);\n        })\n      )\n    );\n  });\n}\nfunction runInNewSpan(opts, fn) {\n  return __async(this, null, function* () {\n    const tracer = import_api.trace.getTracer(TRACER_NAME, TRACER_VERSION);\n    const parentStep = spanMetadataAls.getStore();\n    const isInRoot = (parentStep == null ? void 0 : parentStep.isRoot) === true;\n    return yield tracer.startActiveSpan(\n      opts.metadata.name,\n      { links: opts.links, root: opts.metadata.isRoot },\n      (otSpan) => __async(this, null, function* () {\n        if (opts.labels)\n          otSpan.setAttributes(opts.labels);\n        try {\n          opts.metadata.path = buildPath(\n            opts.metadata.name,\n            (parentStep == null ? void 0 : parentStep.path) || \"\",\n            opts.labels\n          );\n          const output = yield spanMetadataAls.run(\n            opts.metadata,\n            () => fn(opts.metadata, otSpan, isInRoot)\n          );\n          if (opts.metadata.state !== \"error\") {\n            opts.metadata.state = \"success\";\n          }\n          recordPath(opts.metadata);\n          return output;\n        } catch (e) {\n          recordPath(opts.metadata, e);\n          opts.metadata.state = \"error\";\n          otSpan.setStatus({\n            code: import_api.SpanStatusCode.ERROR,\n            message: getErrorMessage(e)\n          });\n          if (e instanceof Error) {\n            otSpan.recordException(e);\n          }\n          throw e;\n        } finally {\n          otSpan.setAttributes(metadataToAttributes(opts.metadata));\n          otSpan.end();\n        }\n      })\n    );\n  });\n}\nfunction getErrorMessage(e) {\n  if (e instanceof Error) {\n    return e.message;\n  }\n  return `${e}`;\n}\nfunction metadataToAttributes(metadata) {\n  const out = {};\n  Object.keys(metadata).forEach((key) => {\n    if (key === \"metadata\" && typeof metadata[key] === \"object\" && metadata.metadata) {\n      Object.entries(metadata.metadata).forEach(([metaKey, value]) => {\n        out[ATTR_PREFIX + \":metadata:\" + metaKey] = value;\n      });\n    } else if (key === \"input\" || typeof metadata[key] === \"object\") {\n      out[ATTR_PREFIX + \":\" + key] = JSON.stringify(metadata[key]);\n    } else {\n      out[ATTR_PREFIX + \":\" + key] = metadata[key];\n    }\n  });\n  return out;\n}\nfunction setCustomMetadataAttribute(key, value) {\n  const currentStep = getCurrentSpan();\n  if (!currentStep) {\n    return;\n  }\n  if (!currentStep.metadata) {\n    currentStep.metadata = {};\n  }\n  currentStep.metadata[key] = value;\n}\nfunction setCustomMetadataAttributes(values) {\n  const currentStep = getCurrentSpan();\n  if (!currentStep) {\n    return;\n  }\n  if (!currentStep.metadata) {\n    currentStep.metadata = {};\n  }\n  for (const [key, value] of Object.entries(values)) {\n    currentStep.metadata[key] = value;\n  }\n}\nfunction toDisplayPath(path) {\n  const pathPartRegex = /\\{([^\\,}]+),[^\\}]+\\}/g;\n  return Array.from(path.matchAll(pathPartRegex), (m) => m[1]).join(\" > \");\n}\nfunction getCurrentSpan() {\n  const step = spanMetadataAls.getStore();\n  if (!step) {\n    throw new Error(\"running outside step context\");\n  }\n  return step;\n}\nfunction buildPath(name, parentPath, labels) {\n  const stepType = labels && labels[\"genkit:type\"] ? `,t:${labels[\"genkit:type\"]}` : \"\";\n  return parentPath + `/{${name}${stepType}}`;\n}\nfunction recordPath(spanMeta, err) {\n  var _a, _b, _c, _d;\n  const path = spanMeta.path || \"\";\n  const decoratedPath = decoratePathWithSubtype(spanMeta);\n  const paths = Array.from(\n    ((_a = traceMetadataAls.getStore()) == null ? void 0 : _a.paths) || /* @__PURE__ */ new Set()\n  );\n  const status = err ? \"failure\" : \"success\";\n  if (!paths.some((p) => p.path.startsWith(path) && p.status === status)) {\n    const now = import_node_perf_hooks.performance.now();\n    const start = ((_b = traceMetadataAls.getStore()) == null ? void 0 : _b.timestamp) || now;\n    (_d = (_c = traceMetadataAls.getStore()) == null ? void 0 : _c.paths) == null ? void 0 : _d.add({\n      path: decoratedPath,\n      error: err == null ? void 0 : err.name,\n      latency: now - start,\n      status\n    });\n  }\n  spanMeta.path = decoratedPath;\n}\nfunction decoratePathWithSubtype(metadata) {\n  var _a;\n  if (!metadata.path) {\n    return \"\";\n  }\n  const pathComponents = metadata.path.split(\"}/{\");\n  if (pathComponents.length == 1) {\n    return metadata.path;\n  }\n  const stepSubtype = metadata.metadata && metadata.metadata[\"subtype\"] ? `,s:${metadata.metadata[\"subtype\"]}` : \"\";\n  const root = `${pathComponents.slice(0, -1).join(\"}/{\")}}/`;\n  const decoratedStep = `{${(_a = pathComponents.at(-1)) == null ? void 0 : _a.slice(0, -1)}${stepSubtype}}`;\n  return root + decoratedStep;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/instrumentation.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/localFileTraceStore.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing/localFileTraceStore.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar localFileTraceStore_exports = {};\n__export(localFileTraceStore_exports, {\n  LocalFileTraceStore: () => LocalFileTraceStore\n});\nmodule.exports = __toCommonJS(localFileTraceStore_exports);\nvar import_async_mutex = __webpack_require__(/*! async-mutex */ \"(action-browser)/./node_modules/async-mutex/lib/index.js\");\nvar import_crypto = __toESM(__webpack_require__(/*! crypto */ \"crypto\"));\nvar import_fs = __toESM(__webpack_require__(/*! fs */ \"fs\"));\nvar import_os = __toESM(__webpack_require__(/*! os */ \"os\"));\nvar import_path = __toESM(__webpack_require__(/*! path */ \"path\"));\nvar import_logging = __webpack_require__(/*! ../logging.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_types = __webpack_require__(/*! ./types.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/types.js\");\nconst _LocalFileTraceStore = class _LocalFileTraceStore {\n  constructor(filters = _LocalFileTraceStore.defaultFilters) {\n    this.mutexes = {};\n    var _a;\n    const rootHash = import_crypto.default.createHash(\"md5\").update(((_a = __webpack_require__(\"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing sync recursive\") == null ? void 0 : __webpack_require__.c[__webpack_require__.s]) == null ? void 0 : _a.filename) || \"unknown\").digest(\"hex\");\n    this.storeRoot = import_path.default.resolve(import_os.default.tmpdir(), `.genkit/${rootHash}/traces`);\n    import_fs.default.mkdirSync(this.storeRoot, { recursive: true });\n    import_logging.logger.info(\n      `Initialized local file trace store at root: ${this.storeRoot}`\n    );\n    this.filters = filters;\n  }\n  load(id) {\n    return __async(this, null, function* () {\n      const filePath = import_path.default.resolve(this.storeRoot, `${id}`);\n      if (!import_fs.default.existsSync(filePath)) {\n        return void 0;\n      }\n      const data = import_fs.default.readFileSync(filePath, \"utf8\");\n      const parsed = JSON.parse(data);\n      if (!parsed.traceId) {\n        parsed.traceId = id;\n      }\n      return import_types.TraceDataSchema.parse(parsed);\n    });\n  }\n  getMutex(id) {\n    if (!this.mutexes[id]) {\n      this.mutexes[id] = new import_async_mutex.Mutex();\n    }\n    return this.mutexes[id];\n  }\n  save(id, rawTrace) {\n    return __async(this, null, function* () {\n      let trace = this.filter(rawTrace);\n      if (Object.keys(trace.spans).length === 0) {\n        return;\n      }\n      const mutex = this.getMutex(id);\n      yield mutex.waitForUnlock();\n      const release = yield mutex.acquire();\n      try {\n        const existing = yield this.load(id);\n        if (existing) {\n          Object.keys(trace.spans).forEach(\n            (spanId) => existing.spans[spanId] = trace.spans[spanId]\n          );\n          existing.displayName = trace.displayName;\n          existing.startTime = trace.startTime;\n          existing.endTime = trace.endTime;\n          trace = existing;\n        }\n        import_fs.default.writeFileSync(\n          import_path.default.resolve(this.storeRoot, `${id}`),\n          JSON.stringify(trace)\n        );\n      } finally {\n        release();\n      }\n    });\n  }\n  list(query) {\n    return __async(this, null, function* () {\n      const files = import_fs.default.readdirSync(this.storeRoot);\n      files.sort((a, b) => {\n        return import_fs.default.statSync(import_path.default.resolve(this.storeRoot, `${b}`)).mtime.getTime() - import_fs.default.statSync(import_path.default.resolve(this.storeRoot, `${a}`)).mtime.getTime();\n      });\n      const startFrom = (query == null ? void 0 : query.continuationToken) ? parseInt(query == null ? void 0 : query.continuationToken) : 0;\n      const stopAt = startFrom + ((query == null ? void 0 : query.limit) || 10);\n      const traces = files.slice(startFrom, stopAt).map((id) => {\n        const filePath = import_path.default.resolve(this.storeRoot, `${id}`);\n        const data = import_fs.default.readFileSync(filePath, \"utf8\");\n        const parsed = JSON.parse(data);\n        if (!parsed.traceId) {\n          parsed.traceId = id;\n        }\n        return import_types.TraceDataSchema.parse(parsed);\n      });\n      return {\n        traces,\n        continuationToken: files.length > stopAt ? stopAt.toString() : void 0\n      };\n    });\n  }\n  filter(trace) {\n    Object.keys(trace.spans).forEach((spanId) => {\n      const span = trace.spans[spanId];\n      Object.keys(this.filters).forEach((f) => {\n        if (span.attributes[f] === this.filters[f]) {\n          delete trace.spans[spanId];\n        }\n      });\n    });\n    if (Object.keys(trace.spans).length === 1) {\n      Object.keys(trace.spans).forEach((spanId) => {\n        const span = trace.spans[spanId];\n        if (span.attributes[\"genkit:name\"] === \"dev-run-action-wrapper\") {\n          delete trace.spans[spanId];\n        }\n      });\n    }\n    return trace;\n  }\n};\n_LocalFileTraceStore.defaultFilters = {\n  // Prevent prompt rendering from spamming local trace store\n  \"genkit:metadata:subtype\": \"prompt\"\n};\nlet LocalFileTraceStore = _LocalFileTraceStore;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=localFileTraceStore.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RyYWNpbmcvbG9jYWxGaWxlVHJhY2VTdG9yZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG1HQUFtRztBQUNuRztBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSw4QkFBOEI7QUFDdkc7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EseUJBQXlCLG1CQUFPLENBQUMsNkVBQWE7QUFDOUMsNEJBQTRCLG1CQUFPLENBQUMsc0JBQVE7QUFDNUMsd0JBQXdCLG1CQUFPLENBQUMsY0FBSTtBQUNwQyx3QkFBd0IsbUJBQU8sQ0FBQyxjQUFJO0FBQ3BDLDBCQUEwQixtQkFBTyxDQUFDLGtCQUFNO0FBQ3hDLHFCQUFxQixtQkFBTyxDQUFDLHFGQUFlO0FBQzVDLG1CQUFtQixtQkFBTyxDQUFDLHdGQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkVBQTJFLGlHQUFPLG9CQUFvQiw0Q0FBWTtBQUNsSCx3RkFBd0YsU0FBUztBQUNqRyxrREFBa0QsaUJBQWlCO0FBQ25FO0FBQ0EscURBQXFELGVBQWU7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNFQUFzRSxHQUFHO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCxHQUFHO0FBQzVEO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUZBQXlGLEVBQUUsZ0dBQWdHLEVBQUU7QUFDN0wsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RSxHQUFHO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBRUw7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL21vbmFzdGVyeTM2MC8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RyYWNpbmcvbG9jYWxGaWxlVHJhY2VTdG9yZS5qcz9mZTE0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2dldFByb3RvT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvRVNNID0gKG1vZCwgaXNOb2RlTW9kZSwgdGFyZ2V0KSA9PiAodGFyZ2V0ID0gbW9kICE9IG51bGwgPyBfX2NyZWF0ZShfX2dldFByb3RvT2YobW9kKSkgOiB7fSwgX19jb3B5UHJvcHMoXG4gIC8vIElmIHRoZSBpbXBvcnRlciBpcyBpbiBub2RlIGNvbXBhdGliaWxpdHkgbW9kZSBvciB0aGlzIGlzIG5vdCBhbiBFU01cbiAgLy8gZmlsZSB0aGF0IGhhcyBiZWVuIGNvbnZlcnRlZCB0byBhIENvbW1vbkpTIGZpbGUgdXNpbmcgYSBCYWJlbC1cbiAgLy8gY29tcGF0aWJsZSB0cmFuc2Zvcm0gKGkuZS4gXCJfX2VzTW9kdWxlXCIgaGFzIG5vdCBiZWVuIHNldCksIHRoZW4gc2V0XG4gIC8vIFwiZGVmYXVsdFwiIHRvIHRoZSBDb21tb25KUyBcIm1vZHVsZS5leHBvcnRzXCIgZm9yIG5vZGUgY29tcGF0aWJpbGl0eS5cbiAgaXNOb2RlTW9kZSB8fCAhbW9kIHx8ICFtb2QuX19lc01vZHVsZSA/IF9fZGVmUHJvcCh0YXJnZXQsIFwiZGVmYXVsdFwiLCB7IHZhbHVlOiBtb2QsIGVudW1lcmFibGU6IHRydWUgfSkgOiB0YXJnZXQsXG4gIG1vZFxuKSk7XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBfX2FzeW5jID0gKF9fdGhpcywgX19hcmd1bWVudHMsIGdlbmVyYXRvcikgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHZhciBmdWxmaWxsZWQgPSAodmFsdWUpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHJlamVjdGVkID0gKHZhbHVlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvci50aHJvdyh2YWx1ZSkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgc3RlcCA9ICh4KSA9PiB4LmRvbmUgPyByZXNvbHZlKHgudmFsdWUpIDogUHJvbWlzZS5yZXNvbHZlKHgudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7XG4gICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KF9fdGhpcywgX19hcmd1bWVudHMpKS5uZXh0KCkpO1xuICB9KTtcbn07XG52YXIgbG9jYWxGaWxlVHJhY2VTdG9yZV9leHBvcnRzID0ge307XG5fX2V4cG9ydChsb2NhbEZpbGVUcmFjZVN0b3JlX2V4cG9ydHMsIHtcbiAgTG9jYWxGaWxlVHJhY2VTdG9yZTogKCkgPT4gTG9jYWxGaWxlVHJhY2VTdG9yZVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhsb2NhbEZpbGVUcmFjZVN0b3JlX2V4cG9ydHMpO1xudmFyIGltcG9ydF9hc3luY19tdXRleCA9IHJlcXVpcmUoXCJhc3luYy1tdXRleFwiKTtcbnZhciBpbXBvcnRfY3J5cHRvID0gX190b0VTTShyZXF1aXJlKFwiY3J5cHRvXCIpKTtcbnZhciBpbXBvcnRfZnMgPSBfX3RvRVNNKHJlcXVpcmUoXCJmc1wiKSk7XG52YXIgaW1wb3J0X29zID0gX190b0VTTShyZXF1aXJlKFwib3NcIikpO1xudmFyIGltcG9ydF9wYXRoID0gX190b0VTTShyZXF1aXJlKFwicGF0aFwiKSk7XG52YXIgaW1wb3J0X2xvZ2dpbmcgPSByZXF1aXJlKFwiLi4vbG9nZ2luZy5qc1wiKTtcbnZhciBpbXBvcnRfdHlwZXMgPSByZXF1aXJlKFwiLi90eXBlcy5qc1wiKTtcbmNvbnN0IF9Mb2NhbEZpbGVUcmFjZVN0b3JlID0gY2xhc3MgX0xvY2FsRmlsZVRyYWNlU3RvcmUge1xuICBjb25zdHJ1Y3RvcihmaWx0ZXJzID0gX0xvY2FsRmlsZVRyYWNlU3RvcmUuZGVmYXVsdEZpbHRlcnMpIHtcbiAgICB0aGlzLm11dGV4ZXMgPSB7fTtcbiAgICB2YXIgX2E7XG4gICAgY29uc3Qgcm9vdEhhc2ggPSBpbXBvcnRfY3J5cHRvLmRlZmF1bHQuY3JlYXRlSGFzaChcIm1kNVwiKS51cGRhdGUoKChfYSA9IHJlcXVpcmUgPT0gbnVsbCA/IHZvaWQgMCA6IHJlcXVpcmUubWFpbikgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmZpbGVuYW1lKSB8fCBcInVua25vd25cIikuZGlnZXN0KFwiaGV4XCIpO1xuICAgIHRoaXMuc3RvcmVSb290ID0gaW1wb3J0X3BhdGguZGVmYXVsdC5yZXNvbHZlKGltcG9ydF9vcy5kZWZhdWx0LnRtcGRpcigpLCBgLmdlbmtpdC8ke3Jvb3RIYXNofS90cmFjZXNgKTtcbiAgICBpbXBvcnRfZnMuZGVmYXVsdC5ta2RpclN5bmModGhpcy5zdG9yZVJvb3QsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICAgIGltcG9ydF9sb2dnaW5nLmxvZ2dlci5pbmZvKFxuICAgICAgYEluaXRpYWxpemVkIGxvY2FsIGZpbGUgdHJhY2Ugc3RvcmUgYXQgcm9vdDogJHt0aGlzLnN0b3JlUm9vdH1gXG4gICAgKTtcbiAgICB0aGlzLmZpbHRlcnMgPSBmaWx0ZXJzO1xuICB9XG4gIGxvYWQoaWQpIHtcbiAgICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgICAgY29uc3QgZmlsZVBhdGggPSBpbXBvcnRfcGF0aC5kZWZhdWx0LnJlc29sdmUodGhpcy5zdG9yZVJvb3QsIGAke2lkfWApO1xuICAgICAgaWYgKCFpbXBvcnRfZnMuZGVmYXVsdC5leGlzdHNTeW5jKGZpbGVQYXRoKSkge1xuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgfVxuICAgICAgY29uc3QgZGF0YSA9IGltcG9ydF9mcy5kZWZhdWx0LnJlYWRGaWxlU3luYyhmaWxlUGF0aCwgXCJ1dGY4XCIpO1xuICAgICAgY29uc3QgcGFyc2VkID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIGlmICghcGFyc2VkLnRyYWNlSWQpIHtcbiAgICAgICAgcGFyc2VkLnRyYWNlSWQgPSBpZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpbXBvcnRfdHlwZXMuVHJhY2VEYXRhU2NoZW1hLnBhcnNlKHBhcnNlZCk7XG4gICAgfSk7XG4gIH1cbiAgZ2V0TXV0ZXgoaWQpIHtcbiAgICBpZiAoIXRoaXMubXV0ZXhlc1tpZF0pIHtcbiAgICAgIHRoaXMubXV0ZXhlc1tpZF0gPSBuZXcgaW1wb3J0X2FzeW5jX211dGV4Lk11dGV4KCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLm11dGV4ZXNbaWRdO1xuICB9XG4gIHNhdmUoaWQsIHJhd1RyYWNlKSB7XG4gICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgIGxldCB0cmFjZSA9IHRoaXMuZmlsdGVyKHJhd1RyYWNlKTtcbiAgICAgIGlmIChPYmplY3Qua2V5cyh0cmFjZS5zcGFucykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG11dGV4ID0gdGhpcy5nZXRNdXRleChpZCk7XG4gICAgICB5aWVsZCBtdXRleC53YWl0Rm9yVW5sb2NrKCk7XG4gICAgICBjb25zdCByZWxlYXNlID0geWllbGQgbXV0ZXguYWNxdWlyZSgpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZXhpc3RpbmcgPSB5aWVsZCB0aGlzLmxvYWQoaWQpO1xuICAgICAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgICBPYmplY3Qua2V5cyh0cmFjZS5zcGFucykuZm9yRWFjaChcbiAgICAgICAgICAgIChzcGFuSWQpID0+IGV4aXN0aW5nLnNwYW5zW3NwYW5JZF0gPSB0cmFjZS5zcGFuc1tzcGFuSWRdXG4gICAgICAgICAgKTtcbiAgICAgICAgICBleGlzdGluZy5kaXNwbGF5TmFtZSA9IHRyYWNlLmRpc3BsYXlOYW1lO1xuICAgICAgICAgIGV4aXN0aW5nLnN0YXJ0VGltZSA9IHRyYWNlLnN0YXJ0VGltZTtcbiAgICAgICAgICBleGlzdGluZy5lbmRUaW1lID0gdHJhY2UuZW5kVGltZTtcbiAgICAgICAgICB0cmFjZSA9IGV4aXN0aW5nO1xuICAgICAgICB9XG4gICAgICAgIGltcG9ydF9mcy5kZWZhdWx0LndyaXRlRmlsZVN5bmMoXG4gICAgICAgICAgaW1wb3J0X3BhdGguZGVmYXVsdC5yZXNvbHZlKHRoaXMuc3RvcmVSb290LCBgJHtpZH1gKSxcbiAgICAgICAgICBKU09OLnN0cmluZ2lmeSh0cmFjZSlcbiAgICAgICAgKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHJlbGVhc2UoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBsaXN0KHF1ZXJ5KSB7XG4gICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgIGNvbnN0IGZpbGVzID0gaW1wb3J0X2ZzLmRlZmF1bHQucmVhZGRpclN5bmModGhpcy5zdG9yZVJvb3QpO1xuICAgICAgZmlsZXMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICByZXR1cm4gaW1wb3J0X2ZzLmRlZmF1bHQuc3RhdFN5bmMoaW1wb3J0X3BhdGguZGVmYXVsdC5yZXNvbHZlKHRoaXMuc3RvcmVSb290LCBgJHtifWApKS5tdGltZS5nZXRUaW1lKCkgLSBpbXBvcnRfZnMuZGVmYXVsdC5zdGF0U3luYyhpbXBvcnRfcGF0aC5kZWZhdWx0LnJlc29sdmUodGhpcy5zdG9yZVJvb3QsIGAke2F9YCkpLm10aW1lLmdldFRpbWUoKTtcbiAgICAgIH0pO1xuICAgICAgY29uc3Qgc3RhcnRGcm9tID0gKHF1ZXJ5ID09IG51bGwgPyB2b2lkIDAgOiBxdWVyeS5jb250aW51YXRpb25Ub2tlbikgPyBwYXJzZUludChxdWVyeSA9PSBudWxsID8gdm9pZCAwIDogcXVlcnkuY29udGludWF0aW9uVG9rZW4pIDogMDtcbiAgICAgIGNvbnN0IHN0b3BBdCA9IHN0YXJ0RnJvbSArICgocXVlcnkgPT0gbnVsbCA/IHZvaWQgMCA6IHF1ZXJ5LmxpbWl0KSB8fCAxMCk7XG4gICAgICBjb25zdCB0cmFjZXMgPSBmaWxlcy5zbGljZShzdGFydEZyb20sIHN0b3BBdCkubWFwKChpZCkgPT4ge1xuICAgICAgICBjb25zdCBmaWxlUGF0aCA9IGltcG9ydF9wYXRoLmRlZmF1bHQucmVzb2x2ZSh0aGlzLnN0b3JlUm9vdCwgYCR7aWR9YCk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBpbXBvcnRfZnMuZGVmYXVsdC5yZWFkRmlsZVN5bmMoZmlsZVBhdGgsIFwidXRmOFwiKTtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgICAgaWYgKCFwYXJzZWQudHJhY2VJZCkge1xuICAgICAgICAgIHBhcnNlZC50cmFjZUlkID0gaWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGltcG9ydF90eXBlcy5UcmFjZURhdGFTY2hlbWEucGFyc2UocGFyc2VkKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHJhY2VzLFxuICAgICAgICBjb250aW51YXRpb25Ub2tlbjogZmlsZXMubGVuZ3RoID4gc3RvcEF0ID8gc3RvcEF0LnRvU3RyaW5nKCkgOiB2b2lkIDBcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbiAgZmlsdGVyKHRyYWNlKSB7XG4gICAgT2JqZWN0LmtleXModHJhY2Uuc3BhbnMpLmZvckVhY2goKHNwYW5JZCkgPT4ge1xuICAgICAgY29uc3Qgc3BhbiA9IHRyYWNlLnNwYW5zW3NwYW5JZF07XG4gICAgICBPYmplY3Qua2V5cyh0aGlzLmZpbHRlcnMpLmZvckVhY2goKGYpID0+IHtcbiAgICAgICAgaWYgKHNwYW4uYXR0cmlidXRlc1tmXSA9PT0gdGhpcy5maWx0ZXJzW2ZdKSB7XG4gICAgICAgICAgZGVsZXRlIHRyYWNlLnNwYW5zW3NwYW5JZF07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChPYmplY3Qua2V5cyh0cmFjZS5zcGFucykubGVuZ3RoID09PSAxKSB7XG4gICAgICBPYmplY3Qua2V5cyh0cmFjZS5zcGFucykuZm9yRWFjaCgoc3BhbklkKSA9PiB7XG4gICAgICAgIGNvbnN0IHNwYW4gPSB0cmFjZS5zcGFuc1tzcGFuSWRdO1xuICAgICAgICBpZiAoc3Bhbi5hdHRyaWJ1dGVzW1wiZ2Vua2l0Om5hbWVcIl0gPT09IFwiZGV2LXJ1bi1hY3Rpb24td3JhcHBlclwiKSB7XG4gICAgICAgICAgZGVsZXRlIHRyYWNlLnNwYW5zW3NwYW5JZF07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdHJhY2U7XG4gIH1cbn07XG5fTG9jYWxGaWxlVHJhY2VTdG9yZS5kZWZhdWx0RmlsdGVycyA9IHtcbiAgLy8gUHJldmVudCBwcm9tcHQgcmVuZGVyaW5nIGZyb20gc3BhbW1pbmcgbG9jYWwgdHJhY2Ugc3RvcmVcbiAgXCJnZW5raXQ6bWV0YWRhdGE6c3VidHlwZVwiOiBcInByb21wdFwiXG59O1xubGV0IExvY2FsRmlsZVRyYWNlU3RvcmUgPSBfTG9jYWxGaWxlVHJhY2VTdG9yZTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBMb2NhbEZpbGVUcmFjZVN0b3JlXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvY2FsRmlsZVRyYWNlU3RvcmUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/localFileTraceStore.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/multiSpanProcessor.js":
/*!************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing/multiSpanProcessor.js ***!
  \************************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar multiSpanProcessor_exports = {};\n__export(multiSpanProcessor_exports, {\n  MultiSpanProcessor: () => MultiSpanProcessor\n});\nmodule.exports = __toCommonJS(multiSpanProcessor_exports);\nclass MultiSpanProcessor {\n  constructor(processors) {\n    this.processors = processors;\n  }\n  forceFlush() {\n    return Promise.all(this.processors.map((p) => p.forceFlush())).then();\n  }\n  onStart(span, parentContext) {\n    this.processors.map((p) => p.onStart(span, parentContext));\n  }\n  onEnd(span) {\n    this.processors.map((p) => p.onEnd(span));\n  }\n  shutdown() {\n    return __async(this, null, function* () {\n      return Promise.all(this.processors.map((p) => p.shutdown())).then();\n    });\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=multiSpanProcessor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RyYWNpbmcvbXVsdGlTcGFuUHJvY2Vzc29yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FFTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9uYXN0ZXJ5MzYwLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvdHJhY2luZy9tdWx0aVNwYW5Qcm9jZXNzb3IuanM/NmRmYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgX19hc3luYyA9IChfX3RoaXMsIF9fYXJndW1lbnRzLCBnZW5lcmF0b3IpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB2YXIgZnVsZmlsbGVkID0gKHZhbHVlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciByZWplY3RlZCA9ICh2YWx1ZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RlcChnZW5lcmF0b3IudGhyb3codmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHN0ZXAgPSAoeCkgPT4geC5kb25lID8gcmVzb2x2ZSh4LnZhbHVlKSA6IFByb21pc2UucmVzb2x2ZSh4LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpO1xuICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseShfX3RoaXMsIF9fYXJndW1lbnRzKSkubmV4dCgpKTtcbiAgfSk7XG59O1xudmFyIG11bHRpU3BhblByb2Nlc3Nvcl9leHBvcnRzID0ge307XG5fX2V4cG9ydChtdWx0aVNwYW5Qcm9jZXNzb3JfZXhwb3J0cywge1xuICBNdWx0aVNwYW5Qcm9jZXNzb3I6ICgpID0+IE11bHRpU3BhblByb2Nlc3NvclxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhtdWx0aVNwYW5Qcm9jZXNzb3JfZXhwb3J0cyk7XG5jbGFzcyBNdWx0aVNwYW5Qcm9jZXNzb3Ige1xuICBjb25zdHJ1Y3Rvcihwcm9jZXNzb3JzKSB7XG4gICAgdGhpcy5wcm9jZXNzb3JzID0gcHJvY2Vzc29ycztcbiAgfVxuICBmb3JjZUZsdXNoKCkge1xuICAgIHJldHVybiBQcm9taXNlLmFsbCh0aGlzLnByb2Nlc3NvcnMubWFwKChwKSA9PiBwLmZvcmNlRmx1c2goKSkpLnRoZW4oKTtcbiAgfVxuICBvblN0YXJ0KHNwYW4sIHBhcmVudENvbnRleHQpIHtcbiAgICB0aGlzLnByb2Nlc3NvcnMubWFwKChwKSA9PiBwLm9uU3RhcnQoc3BhbiwgcGFyZW50Q29udGV4dCkpO1xuICB9XG4gIG9uRW5kKHNwYW4pIHtcbiAgICB0aGlzLnByb2Nlc3NvcnMubWFwKChwKSA9PiBwLm9uRW5kKHNwYW4pKTtcbiAgfVxuICBzaHV0ZG93bigpIHtcbiAgICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHRoaXMucHJvY2Vzc29ycy5tYXAoKHApID0+IHAuc2h1dGRvd24oKSkpLnRoZW4oKTtcbiAgICB9KTtcbiAgfVxufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIE11bHRpU3BhblByb2Nlc3NvclxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tdWx0aVNwYW5Qcm9jZXNzb3IuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/multiSpanProcessor.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/processor.js":
/*!***************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing/processor.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar processor_exports = {};\n__export(processor_exports, {\n  GenkitSpanProcessorWrapper: () => GenkitSpanProcessorWrapper\n});\nmodule.exports = __toCommonJS(processor_exports);\nvar import_instrumentation = __webpack_require__(/*! ./instrumentation.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/instrumentation.js\");\nclass GenkitSpanProcessorWrapper {\n  constructor(processor) {\n    this.processor = processor;\n  }\n  forceFlush() {\n    return this.processor.forceFlush();\n  }\n  onStart(span, parentContext) {\n    return this.processor.onStart(span, parentContext);\n  }\n  onEnd(span) {\n    if (Object.keys(span.attributes).find((k) => k.startsWith(import_instrumentation.ATTR_PREFIX + \":\"))) {\n      return this.processor.onEnd(new FilteringReadableSpanProxy(span));\n    } else {\n      return this.processor.onEnd(span);\n    }\n  }\n  shutdown() {\n    return __async(this, null, function* () {\n      return this.processor.shutdown();\n    });\n  }\n}\nclass FilteringReadableSpanProxy {\n  constructor(span) {\n    this.span = span;\n  }\n  get name() {\n    return this.span.name;\n  }\n  get kind() {\n    return this.span.kind;\n  }\n  get parentSpanId() {\n    return this.span.parentSpanId;\n  }\n  get startTime() {\n    return this.span.startTime;\n  }\n  get endTime() {\n    return this.span.endTime;\n  }\n  get status() {\n    return this.span.status;\n  }\n  get attributes() {\n    console.log(\n      \"FilteringReadableSpanProxy get attributes\",\n      this.span.attributes\n    );\n    const out = {};\n    for (const [key, value] of Object.entries(this.span.attributes)) {\n      if (!key.startsWith(import_instrumentation.ATTR_PREFIX + \":\")) {\n        out[key] = value;\n      }\n    }\n    return out;\n  }\n  get links() {\n    return this.span.links;\n  }\n  get events() {\n    return this.span.events;\n  }\n  get duration() {\n    return this.span.duration;\n  }\n  get ended() {\n    return this.span.ended;\n  }\n  get resource() {\n    return this.span.resource;\n  }\n  get instrumentationLibrary() {\n    return this.span.instrumentationLibrary;\n  }\n  get droppedAttributesCount() {\n    return this.span.droppedAttributesCount;\n  }\n  get droppedEventsCount() {\n    return this.span.droppedEventsCount;\n  }\n  get droppedLinksCount() {\n    return this.span.droppedLinksCount;\n  }\n  spanContext() {\n    return this.span.spanContext();\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=processor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RyYWNpbmcvcHJvY2Vzc29yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDZCQUE2QixtQkFBTyxDQUFDLDRHQUFzQjtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUVMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25hc3RlcnkzNjAvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi90cmFjaW5nL3Byb2Nlc3Nvci5qcz84ZmRmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBfX2FzeW5jID0gKF9fdGhpcywgX19hcmd1bWVudHMsIGdlbmVyYXRvcikgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHZhciBmdWxmaWxsZWQgPSAodmFsdWUpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHJlamVjdGVkID0gKHZhbHVlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvci50aHJvdyh2YWx1ZSkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgc3RlcCA9ICh4KSA9PiB4LmRvbmUgPyByZXNvbHZlKHgudmFsdWUpIDogUHJvbWlzZS5yZXNvbHZlKHgudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7XG4gICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KF9fdGhpcywgX19hcmd1bWVudHMpKS5uZXh0KCkpO1xuICB9KTtcbn07XG52YXIgcHJvY2Vzc29yX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHByb2Nlc3Nvcl9leHBvcnRzLCB7XG4gIEdlbmtpdFNwYW5Qcm9jZXNzb3JXcmFwcGVyOiAoKSA9PiBHZW5raXRTcGFuUHJvY2Vzc29yV3JhcHBlclxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhwcm9jZXNzb3JfZXhwb3J0cyk7XG52YXIgaW1wb3J0X2luc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoXCIuL2luc3RydW1lbnRhdGlvbi5qc1wiKTtcbmNsYXNzIEdlbmtpdFNwYW5Qcm9jZXNzb3JXcmFwcGVyIHtcbiAgY29uc3RydWN0b3IocHJvY2Vzc29yKSB7XG4gICAgdGhpcy5wcm9jZXNzb3IgPSBwcm9jZXNzb3I7XG4gIH1cbiAgZm9yY2VGbHVzaCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9jZXNzb3IuZm9yY2VGbHVzaCgpO1xuICB9XG4gIG9uU3RhcnQoc3BhbiwgcGFyZW50Q29udGV4dCkge1xuICAgIHJldHVybiB0aGlzLnByb2Nlc3Nvci5vblN0YXJ0KHNwYW4sIHBhcmVudENvbnRleHQpO1xuICB9XG4gIG9uRW5kKHNwYW4pIHtcbiAgICBpZiAoT2JqZWN0LmtleXMoc3Bhbi5hdHRyaWJ1dGVzKS5maW5kKChrKSA9PiBrLnN0YXJ0c1dpdGgoaW1wb3J0X2luc3RydW1lbnRhdGlvbi5BVFRSX1BSRUZJWCArIFwiOlwiKSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb2Nlc3Nvci5vbkVuZChuZXcgRmlsdGVyaW5nUmVhZGFibGVTcGFuUHJveHkoc3BhbikpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9jZXNzb3Iub25FbmQoc3Bhbik7XG4gICAgfVxuICB9XG4gIHNodXRkb3duKCkge1xuICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9jZXNzb3Iuc2h1dGRvd24oKTtcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgRmlsdGVyaW5nUmVhZGFibGVTcGFuUHJveHkge1xuICBjb25zdHJ1Y3RvcihzcGFuKSB7XG4gICAgdGhpcy5zcGFuID0gc3BhbjtcbiAgfVxuICBnZXQgbmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zcGFuLm5hbWU7XG4gIH1cbiAgZ2V0IGtpbmQoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3Bhbi5raW5kO1xuICB9XG4gIGdldCBwYXJlbnRTcGFuSWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3Bhbi5wYXJlbnRTcGFuSWQ7XG4gIH1cbiAgZ2V0IHN0YXJ0VGltZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zcGFuLnN0YXJ0VGltZTtcbiAgfVxuICBnZXQgZW5kVGltZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zcGFuLmVuZFRpbWU7XG4gIH1cbiAgZ2V0IHN0YXR1cygpIHtcbiAgICByZXR1cm4gdGhpcy5zcGFuLnN0YXR1cztcbiAgfVxuICBnZXQgYXR0cmlidXRlcygpIHtcbiAgICBjb25zb2xlLmxvZyhcbiAgICAgIFwiRmlsdGVyaW5nUmVhZGFibGVTcGFuUHJveHkgZ2V0IGF0dHJpYnV0ZXNcIixcbiAgICAgIHRoaXMuc3Bhbi5hdHRyaWJ1dGVzXG4gICAgKTtcbiAgICBjb25zdCBvdXQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLnNwYW4uYXR0cmlidXRlcykpIHtcbiAgICAgIGlmICgha2V5LnN0YXJ0c1dpdGgoaW1wb3J0X2luc3RydW1lbnRhdGlvbi5BVFRSX1BSRUZJWCArIFwiOlwiKSkge1xuICAgICAgICBvdXRba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9XG4gIGdldCBsaW5rcygpIHtcbiAgICByZXR1cm4gdGhpcy5zcGFuLmxpbmtzO1xuICB9XG4gIGdldCBldmVudHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3Bhbi5ldmVudHM7XG4gIH1cbiAgZ2V0IGR1cmF0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnNwYW4uZHVyYXRpb247XG4gIH1cbiAgZ2V0IGVuZGVkKCkge1xuICAgIHJldHVybiB0aGlzLnNwYW4uZW5kZWQ7XG4gIH1cbiAgZ2V0IHJlc291cmNlKCkge1xuICAgIHJldHVybiB0aGlzLnNwYW4ucmVzb3VyY2U7XG4gIH1cbiAgZ2V0IGluc3RydW1lbnRhdGlvbkxpYnJhcnkoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3Bhbi5pbnN0cnVtZW50YXRpb25MaWJyYXJ5O1xuICB9XG4gIGdldCBkcm9wcGVkQXR0cmlidXRlc0NvdW50KCkge1xuICAgIHJldHVybiB0aGlzLnNwYW4uZHJvcHBlZEF0dHJpYnV0ZXNDb3VudDtcbiAgfVxuICBnZXQgZHJvcHBlZEV2ZW50c0NvdW50KCkge1xuICAgIHJldHVybiB0aGlzLnNwYW4uZHJvcHBlZEV2ZW50c0NvdW50O1xuICB9XG4gIGdldCBkcm9wcGVkTGlua3NDb3VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5zcGFuLmRyb3BwZWRMaW5rc0NvdW50O1xuICB9XG4gIHNwYW5Db250ZXh0KCkge1xuICAgIHJldHVybiB0aGlzLnNwYW4uc3BhbkNvbnRleHQoKTtcbiAgfVxufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIEdlbmtpdFNwYW5Qcm9jZXNzb3JXcmFwcGVyXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb2Nlc3Nvci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/processor.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/types.js":
/*!***********************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing/types.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar types_exports = {};\n__export(types_exports, {\n  InstrumentationLibrarySchema: () => InstrumentationLibrarySchema,\n  LinkSchema: () => LinkSchema,\n  PathMetadataSchema: () => PathMetadataSchema,\n  SpanContextSchema: () => SpanContextSchema,\n  SpanDataSchema: () => SpanDataSchema,\n  SpanMetadataSchema: () => SpanMetadataSchema,\n  SpanStatusSchema: () => SpanStatusSchema,\n  TimeEventSchema: () => TimeEventSchema,\n  TraceDataSchema: () => TraceDataSchema,\n  TraceMetadataSchema: () => TraceMetadataSchema\n});\nmodule.exports = __toCommonJS(types_exports);\nvar import_zod = __webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/index.cjs\");\nconst PathMetadataSchema = import_zod.z.object({\n  path: import_zod.z.string(),\n  status: import_zod.z.string(),\n  error: import_zod.z.string().optional(),\n  latency: import_zod.z.number()\n});\nconst TraceMetadataSchema = import_zod.z.object({\n  flowName: import_zod.z.string().optional(),\n  paths: import_zod.z.set(PathMetadataSchema).optional(),\n  timestamp: import_zod.z.number()\n});\nconst SpanMetadataSchema = import_zod.z.object({\n  name: import_zod.z.string(),\n  state: import_zod.z.enum([\"success\", \"error\"]).optional(),\n  input: import_zod.z.any().optional(),\n  output: import_zod.z.any().optional(),\n  isRoot: import_zod.z.boolean().optional(),\n  metadata: import_zod.z.record(import_zod.z.string(), import_zod.z.string()).optional(),\n  path: import_zod.z.string().optional()\n});\nconst SpanStatusSchema = import_zod.z.object({\n  code: import_zod.z.number(),\n  message: import_zod.z.string().optional()\n});\nconst TimeEventSchema = import_zod.z.object({\n  time: import_zod.z.number(),\n  annotation: import_zod.z.object({\n    attributes: import_zod.z.record(import_zod.z.string(), import_zod.z.any()),\n    description: import_zod.z.string()\n  })\n});\nconst SpanContextSchema = import_zod.z.object({\n  traceId: import_zod.z.string(),\n  spanId: import_zod.z.string(),\n  isRemote: import_zod.z.boolean().optional(),\n  traceFlags: import_zod.z.number()\n});\nconst LinkSchema = import_zod.z.object({\n  context: SpanContextSchema.optional(),\n  attributes: import_zod.z.record(import_zod.z.string(), import_zod.z.any()).optional(),\n  droppedAttributesCount: import_zod.z.number().optional()\n});\nconst InstrumentationLibrarySchema = import_zod.z.object({\n  name: import_zod.z.string().readonly(),\n  version: import_zod.z.string().optional().readonly(),\n  schemaUrl: import_zod.z.string().optional().readonly()\n});\nconst SpanDataSchema = import_zod.z.object({\n  spanId: import_zod.z.string(),\n  traceId: import_zod.z.string(),\n  parentSpanId: import_zod.z.string().optional(),\n  startTime: import_zod.z.number(),\n  endTime: import_zod.z.number(),\n  attributes: import_zod.z.record(import_zod.z.string(), import_zod.z.any()),\n  displayName: import_zod.z.string(),\n  links: import_zod.z.array(LinkSchema).optional(),\n  instrumentationLibrary: InstrumentationLibrarySchema,\n  spanKind: import_zod.z.string(),\n  sameProcessAsParentSpan: import_zod.z.object({ value: import_zod.z.boolean() }).optional(),\n  status: SpanStatusSchema.optional(),\n  timeEvents: import_zod.z.object({\n    timeEvent: import_zod.z.array(TimeEventSchema)\n  }).optional(),\n  truncated: import_zod.z.boolean().optional()\n});\nconst TraceDataSchema = import_zod.z.object({\n  traceId: import_zod.z.string(),\n  displayName: import_zod.z.string().optional(),\n  startTime: import_zod.z.number().optional().describe(\"trace start time in milliseconds since the epoch\"),\n  endTime: import_zod.z.number().optional().describe(\"end time in milliseconds since the epoch\"),\n  spans: import_zod.z.record(import_zod.z.string(), SpanDataSchema)\n});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RyYWNpbmcvdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxpQkFBaUIsbUJBQU8sQ0FBQywwREFBSztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCwrQkFBK0I7QUFDaEY7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLE1BQU0sQ0FXTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9uYXN0ZXJ5MzYwLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvdHJhY2luZy90eXBlcy5qcz84OGUyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciB0eXBlc19leHBvcnRzID0ge307XG5fX2V4cG9ydCh0eXBlc19leHBvcnRzLCB7XG4gIEluc3RydW1lbnRhdGlvbkxpYnJhcnlTY2hlbWE6ICgpID0+IEluc3RydW1lbnRhdGlvbkxpYnJhcnlTY2hlbWEsXG4gIExpbmtTY2hlbWE6ICgpID0+IExpbmtTY2hlbWEsXG4gIFBhdGhNZXRhZGF0YVNjaGVtYTogKCkgPT4gUGF0aE1ldGFkYXRhU2NoZW1hLFxuICBTcGFuQ29udGV4dFNjaGVtYTogKCkgPT4gU3BhbkNvbnRleHRTY2hlbWEsXG4gIFNwYW5EYXRhU2NoZW1hOiAoKSA9PiBTcGFuRGF0YVNjaGVtYSxcbiAgU3Bhbk1ldGFkYXRhU2NoZW1hOiAoKSA9PiBTcGFuTWV0YWRhdGFTY2hlbWEsXG4gIFNwYW5TdGF0dXNTY2hlbWE6ICgpID0+IFNwYW5TdGF0dXNTY2hlbWEsXG4gIFRpbWVFdmVudFNjaGVtYTogKCkgPT4gVGltZUV2ZW50U2NoZW1hLFxuICBUcmFjZURhdGFTY2hlbWE6ICgpID0+IFRyYWNlRGF0YVNjaGVtYSxcbiAgVHJhY2VNZXRhZGF0YVNjaGVtYTogKCkgPT4gVHJhY2VNZXRhZGF0YVNjaGVtYVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyh0eXBlc19leHBvcnRzKTtcbnZhciBpbXBvcnRfem9kID0gcmVxdWlyZShcInpvZFwiKTtcbmNvbnN0IFBhdGhNZXRhZGF0YVNjaGVtYSA9IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICBwYXRoOiBpbXBvcnRfem9kLnouc3RyaW5nKCksXG4gIHN0YXR1czogaW1wb3J0X3pvZC56LnN0cmluZygpLFxuICBlcnJvcjogaW1wb3J0X3pvZC56LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIGxhdGVuY3k6IGltcG9ydF96b2Quei5udW1iZXIoKVxufSk7XG5jb25zdCBUcmFjZU1ldGFkYXRhU2NoZW1hID0gaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gIGZsb3dOYW1lOiBpbXBvcnRfem9kLnouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgcGF0aHM6IGltcG9ydF96b2Quei5zZXQoUGF0aE1ldGFkYXRhU2NoZW1hKS5vcHRpb25hbCgpLFxuICB0aW1lc3RhbXA6IGltcG9ydF96b2Quei5udW1iZXIoKVxufSk7XG5jb25zdCBTcGFuTWV0YWRhdGFTY2hlbWEgPSBpbXBvcnRfem9kLnoub2JqZWN0KHtcbiAgbmFtZTogaW1wb3J0X3pvZC56LnN0cmluZygpLFxuICBzdGF0ZTogaW1wb3J0X3pvZC56LmVudW0oW1wic3VjY2Vzc1wiLCBcImVycm9yXCJdKS5vcHRpb25hbCgpLFxuICBpbnB1dDogaW1wb3J0X3pvZC56LmFueSgpLm9wdGlvbmFsKCksXG4gIG91dHB1dDogaW1wb3J0X3pvZC56LmFueSgpLm9wdGlvbmFsKCksXG4gIGlzUm9vdDogaW1wb3J0X3pvZC56LmJvb2xlYW4oKS5vcHRpb25hbCgpLFxuICBtZXRhZGF0YTogaW1wb3J0X3pvZC56LnJlY29yZChpbXBvcnRfem9kLnouc3RyaW5nKCksIGltcG9ydF96b2Quei5zdHJpbmcoKSkub3B0aW9uYWwoKSxcbiAgcGF0aDogaW1wb3J0X3pvZC56LnN0cmluZygpLm9wdGlvbmFsKClcbn0pO1xuY29uc3QgU3BhblN0YXR1c1NjaGVtYSA9IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICBjb2RlOiBpbXBvcnRfem9kLnoubnVtYmVyKCksXG4gIG1lc3NhZ2U6IGltcG9ydF96b2Quei5zdHJpbmcoKS5vcHRpb25hbCgpXG59KTtcbmNvbnN0IFRpbWVFdmVudFNjaGVtYSA9IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICB0aW1lOiBpbXBvcnRfem9kLnoubnVtYmVyKCksXG4gIGFubm90YXRpb246IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICAgIGF0dHJpYnV0ZXM6IGltcG9ydF96b2Quei5yZWNvcmQoaW1wb3J0X3pvZC56LnN0cmluZygpLCBpbXBvcnRfem9kLnouYW55KCkpLFxuICAgIGRlc2NyaXB0aW9uOiBpbXBvcnRfem9kLnouc3RyaW5nKClcbiAgfSlcbn0pO1xuY29uc3QgU3BhbkNvbnRleHRTY2hlbWEgPSBpbXBvcnRfem9kLnoub2JqZWN0KHtcbiAgdHJhY2VJZDogaW1wb3J0X3pvZC56LnN0cmluZygpLFxuICBzcGFuSWQ6IGltcG9ydF96b2Quei5zdHJpbmcoKSxcbiAgaXNSZW1vdGU6IGltcG9ydF96b2Quei5ib29sZWFuKCkub3B0aW9uYWwoKSxcbiAgdHJhY2VGbGFnczogaW1wb3J0X3pvZC56Lm51bWJlcigpXG59KTtcbmNvbnN0IExpbmtTY2hlbWEgPSBpbXBvcnRfem9kLnoub2JqZWN0KHtcbiAgY29udGV4dDogU3BhbkNvbnRleHRTY2hlbWEub3B0aW9uYWwoKSxcbiAgYXR0cmlidXRlczogaW1wb3J0X3pvZC56LnJlY29yZChpbXBvcnRfem9kLnouc3RyaW5nKCksIGltcG9ydF96b2Quei5hbnkoKSkub3B0aW9uYWwoKSxcbiAgZHJvcHBlZEF0dHJpYnV0ZXNDb3VudDogaW1wb3J0X3pvZC56Lm51bWJlcigpLm9wdGlvbmFsKClcbn0pO1xuY29uc3QgSW5zdHJ1bWVudGF0aW9uTGlicmFyeVNjaGVtYSA9IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICBuYW1lOiBpbXBvcnRfem9kLnouc3RyaW5nKCkucmVhZG9ubHkoKSxcbiAgdmVyc2lvbjogaW1wb3J0X3pvZC56LnN0cmluZygpLm9wdGlvbmFsKCkucmVhZG9ubHkoKSxcbiAgc2NoZW1hVXJsOiBpbXBvcnRfem9kLnouc3RyaW5nKCkub3B0aW9uYWwoKS5yZWFkb25seSgpXG59KTtcbmNvbnN0IFNwYW5EYXRhU2NoZW1hID0gaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gIHNwYW5JZDogaW1wb3J0X3pvZC56LnN0cmluZygpLFxuICB0cmFjZUlkOiBpbXBvcnRfem9kLnouc3RyaW5nKCksXG4gIHBhcmVudFNwYW5JZDogaW1wb3J0X3pvZC56LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIHN0YXJ0VGltZTogaW1wb3J0X3pvZC56Lm51bWJlcigpLFxuICBlbmRUaW1lOiBpbXBvcnRfem9kLnoubnVtYmVyKCksXG4gIGF0dHJpYnV0ZXM6IGltcG9ydF96b2Quei5yZWNvcmQoaW1wb3J0X3pvZC56LnN0cmluZygpLCBpbXBvcnRfem9kLnouYW55KCkpLFxuICBkaXNwbGF5TmFtZTogaW1wb3J0X3pvZC56LnN0cmluZygpLFxuICBsaW5rczogaW1wb3J0X3pvZC56LmFycmF5KExpbmtTY2hlbWEpLm9wdGlvbmFsKCksXG4gIGluc3RydW1lbnRhdGlvbkxpYnJhcnk6IEluc3RydW1lbnRhdGlvbkxpYnJhcnlTY2hlbWEsXG4gIHNwYW5LaW5kOiBpbXBvcnRfem9kLnouc3RyaW5nKCksXG4gIHNhbWVQcm9jZXNzQXNQYXJlbnRTcGFuOiBpbXBvcnRfem9kLnoub2JqZWN0KHsgdmFsdWU6IGltcG9ydF96b2Quei5ib29sZWFuKCkgfSkub3B0aW9uYWwoKSxcbiAgc3RhdHVzOiBTcGFuU3RhdHVzU2NoZW1hLm9wdGlvbmFsKCksXG4gIHRpbWVFdmVudHM6IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICAgIHRpbWVFdmVudDogaW1wb3J0X3pvZC56LmFycmF5KFRpbWVFdmVudFNjaGVtYSlcbiAgfSkub3B0aW9uYWwoKSxcbiAgdHJ1bmNhdGVkOiBpbXBvcnRfem9kLnouYm9vbGVhbigpLm9wdGlvbmFsKClcbn0pO1xuY29uc3QgVHJhY2VEYXRhU2NoZW1hID0gaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gIHRyYWNlSWQ6IGltcG9ydF96b2Quei5zdHJpbmcoKSxcbiAgZGlzcGxheU5hbWU6IGltcG9ydF96b2Quei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBzdGFydFRpbWU6IGltcG9ydF96b2Quei5udW1iZXIoKS5vcHRpb25hbCgpLmRlc2NyaWJlKFwidHJhY2Ugc3RhcnQgdGltZSBpbiBtaWxsaXNlY29uZHMgc2luY2UgdGhlIGVwb2NoXCIpLFxuICBlbmRUaW1lOiBpbXBvcnRfem9kLnoubnVtYmVyKCkub3B0aW9uYWwoKS5kZXNjcmliZShcImVuZCB0aW1lIGluIG1pbGxpc2Vjb25kcyBzaW5jZSB0aGUgZXBvY2hcIiksXG4gIHNwYW5zOiBpbXBvcnRfem9kLnoucmVjb3JkKGltcG9ydF96b2Quei5zdHJpbmcoKSwgU3BhbkRhdGFTY2hlbWEpXG59KTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBJbnN0cnVtZW50YXRpb25MaWJyYXJ5U2NoZW1hLFxuICBMaW5rU2NoZW1hLFxuICBQYXRoTWV0YWRhdGFTY2hlbWEsXG4gIFNwYW5Db250ZXh0U2NoZW1hLFxuICBTcGFuRGF0YVNjaGVtYSxcbiAgU3Bhbk1ldGFkYXRhU2NoZW1hLFxuICBTcGFuU3RhdHVzU2NoZW1hLFxuICBUaW1lRXZlbnRTY2hlbWEsXG4gIFRyYWNlRGF0YVNjaGVtYSxcbiAgVHJhY2VNZXRhZGF0YVNjaGVtYVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/types.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/utils.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/utils.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar utils_exports = {};\n__export(utils_exports, {\n  deleteUndefinedProps: () => deleteUndefinedProps\n});\nmodule.exports = __toCommonJS(utils_exports);\nfunction deleteUndefinedProps(obj) {\n  for (const prop in obj) {\n    if (obj[prop] === void 0) {\n      delete obj[prop];\n    } else {\n      if (typeof obj[prop] === \"object\") {\n        deleteUndefinedProps(obj[prop]);\n      }\n    }\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBRUw7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL21vbmFzdGVyeTM2MC8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3V0aWxzLmpzPzljMjEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIHV0aWxzX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHV0aWxzX2V4cG9ydHMsIHtcbiAgZGVsZXRlVW5kZWZpbmVkUHJvcHM6ICgpID0+IGRlbGV0ZVVuZGVmaW5lZFByb3BzXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHV0aWxzX2V4cG9ydHMpO1xuZnVuY3Rpb24gZGVsZXRlVW5kZWZpbmVkUHJvcHMob2JqKSB7XG4gIGZvciAoY29uc3QgcHJvcCBpbiBvYmopIHtcbiAgICBpZiAob2JqW3Byb3BdID09PSB2b2lkIDApIHtcbiAgICAgIGRlbGV0ZSBvYmpbcHJvcF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqW3Byb3BdID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGRlbGV0ZVVuZGVmaW5lZFByb3BzKG9ialtwcm9wXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVsZXRlVW5kZWZpbmVkUHJvcHNcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/utils.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/embedder.js":
/*!**********************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/embedder.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar embedder_exports = {};\n__export(embedder_exports, {\n  SUPPORTED_MODELS: () => SUPPORTED_MODELS,\n  TaskTypeSchema: () => TaskTypeSchema,\n  TextEmbeddingGeckoConfigSchema: () => TextEmbeddingGeckoConfigSchema,\n  textEmbeddingGecko001: () => textEmbeddingGecko001,\n  textEmbeddingGeckoEmbedder: () => textEmbeddingGeckoEmbedder\n});\nmodule.exports = __toCommonJS(embedder_exports);\nvar import_embedder = __webpack_require__(/*! @genkit-ai/ai/embedder */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/embedder.js\");\nvar import_generative_ai = __webpack_require__(/*! @google/generative-ai */ \"(action-browser)/./node_modules/@genkit-ai/googleai/node_modules/@google/generative-ai/dist/index.js\");\nvar import_zod = __webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/index.cjs\");\nconst TaskTypeSchema = import_zod.z.enum([\n  \"RETRIEVAL_DOCUMENT\",\n  \"RETRIEVAL_QUERY\",\n  \"SEMANTIC_SIMILARITY\",\n  \"CLASSIFICATION\",\n  \"CLUSTERING\"\n]);\nconst TextEmbeddingGeckoConfigSchema = import_zod.z.object({\n  /**\n   * The `task_type` parameter is defined as the intended downstream application to help the model\n   * produce better quality embeddings.\n   **/\n  taskType: TaskTypeSchema.optional(),\n  title: (0, import_zod.string)().optional()\n});\nconst textEmbeddingGecko001 = (0, import_embedder.embedderRef)({\n  name: \"googleai/embedding-001\",\n  configSchema: TextEmbeddingGeckoConfigSchema,\n  info: {\n    dimensions: 768,\n    label: \"Google Gen AI - Text Embedding Gecko (Legacy)\",\n    supports: {\n      input: [\"text\"]\n    }\n  }\n});\nconst SUPPORTED_MODELS = {\n  \"embedding-001\": textEmbeddingGecko001\n};\nfunction textEmbeddingGeckoEmbedder(name, options) {\n  let apiKey = (options == null ? void 0 : options.apiKey) || process.env.GOOGLE_GENAI_API_KEY || process.env.GOOGLE_API_KEY;\n  if (!apiKey)\n    throw new Error(\n      \"Please pass in the API key or set either GOOGLE_GENAI_API_KEY or GOOGLE_API_KEY environment variable.\\nFor more details see https://firebase.google.com/docs/genkit/plugins/google-genai\"\n    );\n  const client = new import_generative_ai.GoogleGenerativeAI(apiKey).getGenerativeModel({\n    model: name\n  });\n  const embedder = SUPPORTED_MODELS[name];\n  return (0, import_embedder.defineEmbedder)(\n    {\n      name: embedder.name,\n      configSchema: TextEmbeddingGeckoConfigSchema,\n      info: embedder.info\n    },\n    (input, options2) => __async(this, null, function* () {\n      const embeddings = yield Promise.all(\n        input.map((doc) => __async(this, null, function* () {\n          const response = yield client.embedContent({\n            taskType: options2 == null ? void 0 : options2.taskType,\n            title: options2 == null ? void 0 : options2.title,\n            content: {\n              role: \"\",\n              parts: [{ text: doc.text() }]\n            }\n          });\n          const values = response.embedding.values;\n          return { embedding: values };\n        }))\n      );\n      return { embeddings };\n    })\n  );\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=embedder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZWFpL2xpYi9lbWJlZGRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLHNCQUFzQixtQkFBTyxDQUFDLDZGQUF3QjtBQUN0RCwyQkFBMkIsbUJBQU8sQ0FBQyxtSUFBdUI7QUFDMUQsaUJBQWlCLG1CQUFPLENBQUMsMERBQUs7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGtCQUFrQjtBQUMxQztBQUNBLFdBQVc7QUFDWDtBQUNBLG1CQUFtQjtBQUNuQixTQUFTO0FBQ1Q7QUFDQSxlQUFlO0FBQ2YsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FNTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9uYXN0ZXJ5MzYwLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvZ29vZ2xlYWkvbGliL2VtYmVkZGVyLmpzPzExMzEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIF9fYXN5bmMgPSAoX190aGlzLCBfX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgdmFyIGZ1bGZpbGxlZCA9ICh2YWx1ZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgcmVqZWN0ZWQgPSAodmFsdWUpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHN0ZXAoZ2VuZXJhdG9yLnRocm93KHZhbHVlKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBzdGVwID0gKHgpID0+IHguZG9uZSA/IHJlc29sdmUoeC52YWx1ZSkgOiBQcm9taXNlLnJlc29sdmUoeC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTtcbiAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkoX190aGlzLCBfX2FyZ3VtZW50cykpLm5leHQoKSk7XG4gIH0pO1xufTtcbnZhciBlbWJlZGRlcl9leHBvcnRzID0ge307XG5fX2V4cG9ydChlbWJlZGRlcl9leHBvcnRzLCB7XG4gIFNVUFBPUlRFRF9NT0RFTFM6ICgpID0+IFNVUFBPUlRFRF9NT0RFTFMsXG4gIFRhc2tUeXBlU2NoZW1hOiAoKSA9PiBUYXNrVHlwZVNjaGVtYSxcbiAgVGV4dEVtYmVkZGluZ0dlY2tvQ29uZmlnU2NoZW1hOiAoKSA9PiBUZXh0RW1iZWRkaW5nR2Vja29Db25maWdTY2hlbWEsXG4gIHRleHRFbWJlZGRpbmdHZWNrbzAwMTogKCkgPT4gdGV4dEVtYmVkZGluZ0dlY2tvMDAxLFxuICB0ZXh0RW1iZWRkaW5nR2Vja29FbWJlZGRlcjogKCkgPT4gdGV4dEVtYmVkZGluZ0dlY2tvRW1iZWRkZXJcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoZW1iZWRkZXJfZXhwb3J0cyk7XG52YXIgaW1wb3J0X2VtYmVkZGVyID0gcmVxdWlyZShcIkBnZW5raXQtYWkvYWkvZW1iZWRkZXJcIik7XG52YXIgaW1wb3J0X2dlbmVyYXRpdmVfYWkgPSByZXF1aXJlKFwiQGdvb2dsZS9nZW5lcmF0aXZlLWFpXCIpO1xudmFyIGltcG9ydF96b2QgPSByZXF1aXJlKFwiem9kXCIpO1xuY29uc3QgVGFza1R5cGVTY2hlbWEgPSBpbXBvcnRfem9kLnouZW51bShbXG4gIFwiUkVUUklFVkFMX0RPQ1VNRU5UXCIsXG4gIFwiUkVUUklFVkFMX1FVRVJZXCIsXG4gIFwiU0VNQU5USUNfU0lNSUxBUklUWVwiLFxuICBcIkNMQVNTSUZJQ0FUSU9OXCIsXG4gIFwiQ0xVU1RFUklOR1wiXG5dKTtcbmNvbnN0IFRleHRFbWJlZGRpbmdHZWNrb0NvbmZpZ1NjaGVtYSA9IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICAvKipcbiAgICogVGhlIGB0YXNrX3R5cGVgIHBhcmFtZXRlciBpcyBkZWZpbmVkIGFzIHRoZSBpbnRlbmRlZCBkb3duc3RyZWFtIGFwcGxpY2F0aW9uIHRvIGhlbHAgdGhlIG1vZGVsXG4gICAqIHByb2R1Y2UgYmV0dGVyIHF1YWxpdHkgZW1iZWRkaW5ncy5cbiAgICoqL1xuICB0YXNrVHlwZTogVGFza1R5cGVTY2hlbWEub3B0aW9uYWwoKSxcbiAgdGl0bGU6ICgwLCBpbXBvcnRfem9kLnN0cmluZykoKS5vcHRpb25hbCgpXG59KTtcbmNvbnN0IHRleHRFbWJlZGRpbmdHZWNrbzAwMSA9ICgwLCBpbXBvcnRfZW1iZWRkZXIuZW1iZWRkZXJSZWYpKHtcbiAgbmFtZTogXCJnb29nbGVhaS9lbWJlZGRpbmctMDAxXCIsXG4gIGNvbmZpZ1NjaGVtYTogVGV4dEVtYmVkZGluZ0dlY2tvQ29uZmlnU2NoZW1hLFxuICBpbmZvOiB7XG4gICAgZGltZW5zaW9uczogNzY4LFxuICAgIGxhYmVsOiBcIkdvb2dsZSBHZW4gQUkgLSBUZXh0IEVtYmVkZGluZyBHZWNrbyAoTGVnYWN5KVwiLFxuICAgIHN1cHBvcnRzOiB7XG4gICAgICBpbnB1dDogW1widGV4dFwiXVxuICAgIH1cbiAgfVxufSk7XG5jb25zdCBTVVBQT1JURURfTU9ERUxTID0ge1xuICBcImVtYmVkZGluZy0wMDFcIjogdGV4dEVtYmVkZGluZ0dlY2tvMDAxXG59O1xuZnVuY3Rpb24gdGV4dEVtYmVkZGluZ0dlY2tvRW1iZWRkZXIobmFtZSwgb3B0aW9ucykge1xuICBsZXQgYXBpS2V5ID0gKG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuYXBpS2V5KSB8fCBwcm9jZXNzLmVudi5HT09HTEVfR0VOQUlfQVBJX0tFWSB8fCBwcm9jZXNzLmVudi5HT09HTEVfQVBJX0tFWTtcbiAgaWYgKCFhcGlLZXkpXG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJQbGVhc2UgcGFzcyBpbiB0aGUgQVBJIGtleSBvciBzZXQgZWl0aGVyIEdPT0dMRV9HRU5BSV9BUElfS0VZIG9yIEdPT0dMRV9BUElfS0VZIGVudmlyb25tZW50IHZhcmlhYmxlLlxcbkZvciBtb3JlIGRldGFpbHMgc2VlIGh0dHBzOi8vZmlyZWJhc2UuZ29vZ2xlLmNvbS9kb2NzL2dlbmtpdC9wbHVnaW5zL2dvb2dsZS1nZW5haVwiXG4gICAgKTtcbiAgY29uc3QgY2xpZW50ID0gbmV3IGltcG9ydF9nZW5lcmF0aXZlX2FpLkdvb2dsZUdlbmVyYXRpdmVBSShhcGlLZXkpLmdldEdlbmVyYXRpdmVNb2RlbCh7XG4gICAgbW9kZWw6IG5hbWVcbiAgfSk7XG4gIGNvbnN0IGVtYmVkZGVyID0gU1VQUE9SVEVEX01PREVMU1tuYW1lXTtcbiAgcmV0dXJuICgwLCBpbXBvcnRfZW1iZWRkZXIuZGVmaW5lRW1iZWRkZXIpKFxuICAgIHtcbiAgICAgIG5hbWU6IGVtYmVkZGVyLm5hbWUsXG4gICAgICBjb25maWdTY2hlbWE6IFRleHRFbWJlZGRpbmdHZWNrb0NvbmZpZ1NjaGVtYSxcbiAgICAgIGluZm86IGVtYmVkZGVyLmluZm9cbiAgICB9LFxuICAgIChpbnB1dCwgb3B0aW9uczIpID0+IF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgIGNvbnN0IGVtYmVkZGluZ3MgPSB5aWVsZCBQcm9taXNlLmFsbChcbiAgICAgICAgaW5wdXQubWFwKChkb2MpID0+IF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIGNsaWVudC5lbWJlZENvbnRlbnQoe1xuICAgICAgICAgICAgdGFza1R5cGU6IG9wdGlvbnMyID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zMi50YXNrVHlwZSxcbiAgICAgICAgICAgIHRpdGxlOiBvcHRpb25zMiA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9uczIudGl0bGUsXG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIHJvbGU6IFwiXCIsXG4gICAgICAgICAgICAgIHBhcnRzOiBbeyB0ZXh0OiBkb2MudGV4dCgpIH1dXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY29uc3QgdmFsdWVzID0gcmVzcG9uc2UuZW1iZWRkaW5nLnZhbHVlcztcbiAgICAgICAgICByZXR1cm4geyBlbWJlZGRpbmc6IHZhbHVlcyB9O1xuICAgICAgICB9KSlcbiAgICAgICk7XG4gICAgICByZXR1cm4geyBlbWJlZGRpbmdzIH07XG4gICAgfSlcbiAgKTtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBTVVBQT1JURURfTU9ERUxTLFxuICBUYXNrVHlwZVNjaGVtYSxcbiAgVGV4dEVtYmVkZGluZ0dlY2tvQ29uZmlnU2NoZW1hLFxuICB0ZXh0RW1iZWRkaW5nR2Vja28wMDEsXG4gIHRleHRFbWJlZGRpbmdHZWNrb0VtYmVkZGVyXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVtYmVkZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/embedder.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/gemini.js":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/gemini.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __knownSymbol = (name, symbol) => {\n  return (symbol = Symbol[name]) ? symbol : Symbol.for(\"Symbol.\" + name);\n};\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar __forAwait = (obj, it, method) => (it = obj[__knownSymbol(\"asyncIterator\")]) ? it.call(obj) : (obj = obj[__knownSymbol(\"iterator\")](), it = {}, method = (key, fn) => (fn = obj[key]) && (it[key] = (arg) => new Promise((yes, no, done) => (arg = fn.call(obj, arg), done = arg.done, Promise.resolve(arg.value).then((value) => yes({ value, done }), no)))), method(\"next\"), method(\"return\"), it);\nvar gemini_exports = {};\n__export(gemini_exports, {\n  SUPPORTED_V15_MODELS: () => SUPPORTED_V15_MODELS,\n  SUPPORTED_V1_MODELS: () => SUPPORTED_V1_MODELS,\n  fromGeminiCandidate: () => fromGeminiCandidate,\n  gemini15Flash: () => gemini15Flash,\n  gemini15Flash8B: () => gemini15Flash8B,\n  gemini15Pro: () => gemini15Pro,\n  geminiPro: () => geminiPro,\n  geminiProVision: () => geminiProVision,\n  geminiUltra: () => geminiUltra,\n  googleAIModel: () => googleAIModel,\n  toGeminiMessage: () => toGeminiMessage,\n  toGeminiSystemInstruction: () => toGeminiSystemInstruction\n});\nmodule.exports = __toCommonJS(gemini_exports);\nvar import_extract = __webpack_require__(/*! @genkit-ai/ai/extract */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js\");\nvar import_model = __webpack_require__(/*! @genkit-ai/ai/model */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model.js\");\nvar import_middleware = __webpack_require__(/*! @genkit-ai/ai/model/middleware */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model/middleware.js\");\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_generative_ai = __webpack_require__(/*! @google/generative-ai */ \"(action-browser)/./node_modules/@genkit-ai/googleai/node_modules/@google/generative-ai/dist/index.js\");\nvar import_process = __toESM(__webpack_require__(/*! process */ \"process\"));\nvar import_zod = __toESM(__webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/index.cjs\"));\nconst SafetySettingsSchema = import_zod.default.object({\n  category: import_zod.default.enum([\n    \"HARM_CATEGORY_UNSPECIFIED\",\n    \"HARM_CATEGORY_HATE_SPEECH\",\n    \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n    \"HARM_CATEGORY_HARASSMENT\",\n    \"HARM_CATEGORY_DANGEROUS_CONTENT\"\n  ]),\n  threshold: import_zod.default.enum([\n    \"BLOCK_LOW_AND_ABOVE\",\n    \"BLOCK_MEDIUM_AND_ABOVE\",\n    \"BLOCK_ONLY_HIGH\",\n    \"BLOCK_NONE\"\n  ])\n});\nconst GeminiConfigSchema = import_model.GenerationCommonConfigSchema.extend({\n  safetySettings: import_zod.default.array(SafetySettingsSchema).optional(),\n  codeExecution: import_zod.default.union([import_zod.default.boolean(), import_zod.default.object({}).strict()]).optional()\n});\nconst geminiPro = (0, import_model.modelRef)({\n  name: \"googleai/gemini-pro\",\n  info: {\n    label: \"Google AI - Gemini Pro\",\n    supports: {\n      multiturn: true,\n      media: false,\n      tools: true,\n      systemRole: true\n    },\n    versions: [\"gemini-1.0-pro\", \"gemini-1.0-pro-latest\", \"gemini-1.0-pro-001\"]\n  },\n  configSchema: GeminiConfigSchema\n});\nconst geminiProVision = (0, import_model.modelRef)({\n  name: \"googleai/gemini-pro-vision\",\n  info: {\n    label: \"Google AI - Gemini Pro Vision\",\n    // none declared on https://ai.google.dev/models/gemini#model-variations\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: false,\n      systemRole: false\n    },\n    stage: \"deprecated\"\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini15Pro = (0, import_model.modelRef)({\n  name: \"googleai/gemini-1.5-pro-latest\",\n  info: {\n    label: \"Google AI - Gemini 1.5 Pro\",\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      systemRole: true,\n      output: [\"text\", \"json\"]\n    },\n    versions: [\n      \"gemini-1.5-pro\",\n      \"gemini-1.5-pro-001\",\n      \"gemini-1.5-pro-002\",\n      \"gemini-1.5-pro-exp-0827\"\n    ]\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini15Flash = (0, import_model.modelRef)({\n  name: \"googleai/gemini-1.5-flash-latest\",\n  info: {\n    label: \"Google AI - Gemini 1.5 Flash\",\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      systemRole: true,\n      output: [\"text\", \"json\"]\n    },\n    versions: [\n      \"gemini-1.5-flash\",\n      \"gemini-1.5-flash-001\",\n      \"gemini-1.5-flash-002\",\n      \"gemini-1.5-flash-8b-exp-0924\",\n      \"gemini-1.5-flash-8b-exp-0827\",\n      \"gemini-1.5-flash-exp-0827\"\n    ]\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini15Flash8B = (0, import_model.modelRef)({\n  name: \"googleai/gemini-1.5-flash-8b-latest\",\n  info: {\n    label: \"Google AI - Gemini 1.5 Flash-8B\",\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      systemRole: true,\n      output: [\"text\", \"json\"]\n    },\n    versions: [\"gemini-1.5-flash-8b\", \"gemini-1.5-flash-8b-001\"]\n  },\n  configSchema: GeminiConfigSchema\n});\nconst geminiUltra = (0, import_model.modelRef)({\n  name: \"googleai/gemini-ultra\",\n  info: {\n    label: \"Google AI - Gemini Ultra\",\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: false,\n      tools: true,\n      systemRole: true\n    }\n  },\n  configSchema: GeminiConfigSchema\n});\nconst SUPPORTED_V1_MODELS = {\n  \"gemini-pro\": geminiPro,\n  \"gemini-pro-vision\": geminiProVision\n  // 'gemini-ultra': geminiUltra,\n};\nconst SUPPORTED_V15_MODELS = {\n  \"gemini-1.5-pro-latest\": gemini15Pro,\n  \"gemini-1.5-flash-latest\": gemini15Flash,\n  \"gemini-1.5-flash-8b-latest\": gemini15Flash8B\n};\nconst SUPPORTED_MODELS = __spreadValues(__spreadValues({}, SUPPORTED_V1_MODELS), SUPPORTED_V15_MODELS);\nfunction toGeminiRole(role, model) {\n  switch (role) {\n    case \"user\":\n      return \"user\";\n    case \"model\":\n      return \"model\";\n    case \"system\":\n      if (model && SUPPORTED_V15_MODELS[model.name]) {\n        throw new Error(\n          \"system role is only supported for a single message in the first position\"\n        );\n      } else {\n        throw new Error(\"system role is not supported\");\n      }\n    case \"tool\":\n      return \"function\";\n    default:\n      return \"user\";\n  }\n}\nfunction convertSchemaProperty(property) {\n  if (!property) {\n    return null;\n  }\n  if (property.type === \"object\") {\n    const nestedProperties = {};\n    Object.keys(property.properties).forEach((key) => {\n      nestedProperties[key] = convertSchemaProperty(property.properties[key]);\n    });\n    return {\n      type: import_generative_ai.FunctionDeclarationSchemaType.OBJECT,\n      properties: nestedProperties,\n      required: property.required\n    };\n  } else if (property.type === \"array\") {\n    return {\n      type: import_generative_ai.FunctionDeclarationSchemaType.ARRAY,\n      items: convertSchemaProperty(property.items)\n    };\n  } else {\n    return {\n      type: import_generative_ai.FunctionDeclarationSchemaType[property.type.toUpperCase()]\n    };\n  }\n}\nfunction toGeminiTool(tool) {\n  const declaration = {\n    name: tool.name.replace(/\\//g, \"__\"),\n    // Gemini throws on '/' in tool name\n    description: tool.description,\n    parameters: convertSchemaProperty(tool.inputSchema)\n  };\n  return declaration;\n}\nfunction toInlineData(part) {\n  const dataUrl = part.media.url;\n  const b64Data = dataUrl.substring(dataUrl.indexOf(\",\") + 1);\n  const contentType = part.media.contentType || dataUrl.substring(dataUrl.indexOf(\":\") + 1, dataUrl.indexOf(\";\"));\n  return { inlineData: { mimeType: contentType, data: b64Data } };\n}\nfunction toFileData(part) {\n  if (!part.media.contentType)\n    throw new Error(\n      \"Must supply a `contentType` when sending File URIs to Gemini.\"\n    );\n  return {\n    fileData: { mimeType: part.media.contentType, fileUri: part.media.url }\n  };\n}\nfunction fromInlineData(inlinePart) {\n  if (!inlinePart.inlineData || !inlinePart.inlineData.hasOwnProperty(\"mimeType\") || !inlinePart.inlineData.hasOwnProperty(\"data\")) {\n    throw new Error(\"Invalid InlineDataPart: missing required properties\");\n  }\n  const { mimeType, data } = inlinePart.inlineData;\n  const dataUrl = `data:${mimeType};base64,${data}`;\n  return {\n    media: {\n      url: dataUrl,\n      contentType: mimeType\n    }\n  };\n}\nfunction toFunctionCall(part) {\n  var _a;\n  if (!((_a = part == null ? void 0 : part.toolRequest) == null ? void 0 : _a.input)) {\n    throw Error(\"Invalid ToolRequestPart: input was missing.\");\n  }\n  return {\n    functionCall: {\n      name: part.toolRequest.name,\n      args: part.toolRequest.input\n    }\n  };\n}\nfunction fromFunctionCall(part) {\n  if (!part.functionCall) {\n    throw Error(\"Invalid FunctionCallPart\");\n  }\n  return {\n    toolRequest: {\n      name: part.functionCall.name,\n      input: part.functionCall.args\n    }\n  };\n}\nfunction toFunctionResponse(part) {\n  var _a;\n  if (!((_a = part == null ? void 0 : part.toolResponse) == null ? void 0 : _a.output)) {\n    throw Error(\"Invalid ToolResponsePart: output was missing.\");\n  }\n  return {\n    functionResponse: {\n      name: part.toolResponse.name,\n      response: {\n        name: part.toolResponse.name,\n        content: part.toolResponse.output\n      }\n    }\n  };\n}\nfunction fromFunctionResponse(part) {\n  if (!part.functionResponse) {\n    throw new Error(\"Invalid FunctionResponsePart.\");\n  }\n  return {\n    toolResponse: {\n      name: part.functionResponse.name.replace(/__/g, \"/\"),\n      // restore slashes\n      output: part.functionResponse.response\n    }\n  };\n}\nfunction fromExecutableCode(part) {\n  if (!part.executableCode) {\n    throw new Error(\"Invalid GeminiPart: missing executableCode\");\n  }\n  return {\n    custom: {\n      executableCode: {\n        language: part.executableCode.language,\n        code: part.executableCode.code\n      }\n    }\n  };\n}\nfunction fromCodeExecutionResult(part) {\n  if (!part.codeExecutionResult) {\n    throw new Error(\"Invalid GeminiPart: missing codeExecutionResult\");\n  }\n  return {\n    custom: {\n      codeExecutionResult: {\n        outcome: part.codeExecutionResult.outcome,\n        output: part.codeExecutionResult.output\n      }\n    }\n  };\n}\nfunction toCustomPart(part) {\n  if (!part.custom) {\n    throw new Error(\"Invalid GeminiPart: missing custom\");\n  }\n  if (part.custom.codeExecutionResult) {\n    return { codeExecutionResult: part.custom.codeExecutionResult };\n  }\n  if (part.custom.executableCode) {\n    return { executableCode: part.custom.executableCode };\n  }\n  throw new Error(\"Unsupported Custom Part type\");\n}\nfunction toGeminiPart(part) {\n  if (part.text !== void 0)\n    return { text: part.text };\n  if (part.media) {\n    if (part.media.url.startsWith(\"data:\"))\n      return toInlineData(part);\n    return toFileData(part);\n  }\n  if (part.toolRequest)\n    return toFunctionCall(part);\n  if (part.toolResponse)\n    return toFunctionResponse(part);\n  if (part.custom)\n    return toCustomPart(part);\n  throw new Error(\"Unsupported Part type\");\n}\nfunction fromGeminiPart(part, jsonMode) {\n  if (jsonMode && part.text !== void 0) {\n    return { data: (0, import_extract.extractJson)(part.text) };\n  }\n  if (part.text !== void 0)\n    return { text: part.text };\n  if (part.inlineData)\n    return fromInlineData(part);\n  if (part.functionCall)\n    return fromFunctionCall(part);\n  if (part.functionResponse)\n    return fromFunctionResponse(part);\n  if (part.executableCode)\n    return fromExecutableCode(part);\n  if (part.codeExecutionResult)\n    return fromCodeExecutionResult(part);\n  throw new Error(\"Unsupported GeminiPart type\");\n}\nfunction toGeminiMessage(message, model) {\n  return {\n    role: toGeminiRole(message.role, model),\n    parts: message.content.map(toGeminiPart)\n  };\n}\nfunction toGeminiSystemInstruction(message) {\n  return {\n    role: \"user\",\n    parts: message.content.map(toGeminiPart)\n  };\n}\nfunction fromGeminiFinishReason(reason) {\n  if (!reason)\n    return \"unknown\";\n  switch (reason) {\n    case \"STOP\":\n      return \"stop\";\n    case \"MAX_TOKENS\":\n      return \"length\";\n    case \"SAFETY\":\n    case \"RECITATION\":\n      return \"blocked\";\n    default:\n      return \"unknown\";\n  }\n}\nfunction fromGeminiCandidate(candidate, jsonMode = false) {\n  var _a;\n  return {\n    index: candidate.index || 0,\n    // reasonable default?\n    message: {\n      role: \"model\",\n      content: (((_a = candidate.content) == null ? void 0 : _a.parts) || []).map(\n        (part) => fromGeminiPart(part, jsonMode)\n      )\n    },\n    finishReason: fromGeminiFinishReason(candidate.finishReason),\n    finishMessage: candidate.finishMessage,\n    custom: {\n      safetyRatings: candidate.safetyRatings,\n      citationMetadata: candidate.citationMetadata\n    }\n  };\n}\nfunction googleAIModel(name, apiKey, apiVersion, baseUrl) {\n  var _a, _b;\n  const modelName = `googleai/${name}`;\n  if (!apiKey) {\n    apiKey = import_process.default.env.GOOGLE_GENAI_API_KEY || import_process.default.env.GOOGLE_API_KEY;\n  }\n  if (!apiKey) {\n    throw new Error(\n      \"Please pass in the API key or set the GOOGLE_GENAI_API_KEY or GOOGLE_API_KEY environment variable.\\nFor more details see https://firebase.google.com/docs/genkit/plugins/google-genai\"\n    );\n  }\n  const model = SUPPORTED_MODELS[name];\n  if (!model)\n    throw new Error(`Unsupported model: ${name}`);\n  const middleware = [];\n  if (SUPPORTED_V1_MODELS[name]) {\n    middleware.push((0, import_middleware.simulateSystemPrompt)());\n  }\n  if ((_b = (_a = model == null ? void 0 : model.info) == null ? void 0 : _a.supports) == null ? void 0 : _b.media) {\n    middleware.push(\n      (0, import_middleware.downloadRequestMedia)({\n        maxBytes: 1024 * 1024 * 10,\n        // don't downlaod files that have been uploaded using the Files API\n        filter: (part) => !part.media.url.startsWith(\n          \"https://generativelanguage.googleapis.com/\"\n        )\n      })\n    );\n  }\n  return (0, import_model.defineModel)(\n    __spreadProps(__spreadValues({\n      name: modelName\n    }, model.info), {\n      configSchema: model.configSchema,\n      use: middleware\n    }),\n    (request, streamingCallback) => __async(this, null, function* () {\n      var _a2, _b2, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s;\n      const options = { apiClient: import_core.GENKIT_CLIENT_HEADER };\n      if (apiVersion) {\n        options.apiVersion = apiVersion;\n      }\n      if (apiVersion) {\n        options.baseUrl = baseUrl;\n      }\n      const client = new import_generative_ai.GoogleGenerativeAI(apiKey).getGenerativeModel(\n        {\n          model: ((_a2 = request.config) == null ? void 0 : _a2.version) || model.version || name\n        },\n        options\n      );\n      const messages = [...request.messages];\n      if (messages.length === 0)\n        throw new Error(\"No messages provided.\");\n      let systemInstruction = void 0;\n      if (SUPPORTED_V15_MODELS[name]) {\n        const systemMessage = messages.find((m) => m.role === \"system\");\n        if (systemMessage) {\n          messages.splice(messages.indexOf(systemMessage), 1);\n          systemInstruction = toGeminiSystemInstruction(systemMessage);\n        }\n      }\n      const tools = [];\n      if ((_b2 = request.tools) == null ? void 0 : _b2.length) {\n        tools.push({\n          functionDeclarations: request.tools.map(toGeminiTool)\n        });\n      }\n      if ((_c = request.config) == null ? void 0 : _c.codeExecution) {\n        tools.push({\n          codeExecution: request.config.codeExecution === true ? {} : request.config.codeExecution\n        });\n      }\n      const jsonMode = (((_d = request.output) == null ? void 0 : _d.format) === \"json\" || !!((_e = request.output) == null ? void 0 : _e.schema)) && tools.length === 0;\n      const generationConfig = {\n        candidateCount: request.candidates || void 0,\n        temperature: (_f = request.config) == null ? void 0 : _f.temperature,\n        maxOutputTokens: (_g = request.config) == null ? void 0 : _g.maxOutputTokens,\n        topK: (_h = request.config) == null ? void 0 : _h.topK,\n        topP: (_i = request.config) == null ? void 0 : _i.topP,\n        stopSequences: (_j = request.config) == null ? void 0 : _j.stopSequences,\n        responseMimeType: jsonMode ? \"application/json\" : void 0\n      };\n      const chatRequest = {\n        systemInstruction,\n        generationConfig,\n        tools,\n        history: messages.slice(0, -1).map((message) => toGeminiMessage(message, model)),\n        safetySettings: (_k = request.config) == null ? void 0 : _k.safetySettings\n      };\n      const msg = toGeminiMessage(messages[messages.length - 1], model);\n      const fromJSONModeScopedGeminiCandidate = (candidate) => {\n        return fromGeminiCandidate(candidate, jsonMode);\n      };\n      if (streamingCallback) {\n        const result = yield client.startChat(chatRequest).sendMessageStream(msg.parts, options);\n        try {\n          for (var iter = __forAwait(result.stream), more, temp, error; more = !(temp = yield iter.next()).done; more = false) {\n            const item = temp.value;\n            (_l = item.candidates) == null ? void 0 : _l.forEach((candidate) => {\n              const c = fromJSONModeScopedGeminiCandidate(candidate);\n              streamingCallback({\n                index: c.index,\n                content: c.message.content\n              });\n            });\n          }\n        } catch (temp) {\n          error = [temp];\n        } finally {\n          try {\n            more && (temp = iter.return) && (yield temp.call(iter));\n          } finally {\n            if (error)\n              throw error[0];\n          }\n        }\n        const response = yield result.response;\n        if (!((_m = response.candidates) == null ? void 0 : _m.length)) {\n          throw new Error(\"No valid candidates returned.\");\n        }\n        return {\n          candidates: ((_n = response.candidates) == null ? void 0 : _n.map(fromJSONModeScopedGeminiCandidate)) || [],\n          custom: response\n        };\n      } else {\n        const result = yield client.startChat(chatRequest).sendMessage(msg.parts, options);\n        if (!((_o = result.response.candidates) == null ? void 0 : _o.length))\n          throw new Error(\"No valid candidates returned.\");\n        const responseCandidates = ((_p = result.response.candidates) == null ? void 0 : _p.map(fromJSONModeScopedGeminiCandidate)) || [];\n        return {\n          candidates: responseCandidates,\n          custom: result.response,\n          usage: __spreadProps(__spreadValues({}, (0, import_model.getBasicUsageStats)(request.messages, responseCandidates)), {\n            inputTokens: (_q = result.response.usageMetadata) == null ? void 0 : _q.promptTokenCount,\n            outputTokens: (_r = result.response.usageMetadata) == null ? void 0 : _r.candidatesTokenCount,\n            totalTokens: (_s = result.response.usageMetadata) == null ? void 0 : _s.totalTokenCount\n          })\n        };\n      }\n    })\n  );\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=gemini.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/gemini.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/chunk-7OAPEGJQ.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/chunk-7OAPEGJQ.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __async: () => (/* binding */ __async),\n/* harmony export */   __asyncGenerator: () => (/* binding */ __asyncGenerator),\n/* harmony export */   __await: () => (/* binding */ __await),\n/* harmony export */   __spreadProps: () => (/* binding */ __spreadProps),\n/* harmony export */   __spreadValues: () => (/* binding */ __spreadValues)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __knownSymbol = (name, symbol) => {\n  return (symbol = Symbol[name]) ? symbol : Symbol.for(\"Symbol.\" + name);\n};\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar __await = function(promise, isYieldStar) {\n  this[0] = promise;\n  this[1] = isYieldStar;\n};\nvar __asyncGenerator = (__this, __arguments, generator) => {\n  var resume = (k, v, yes, no) => {\n    try {\n      var x = generator[k](v), isAwait = (v = x.value) instanceof __await, done = x.done;\n      Promise.resolve(isAwait ? v[0] : v).then((y) => isAwait ? resume(k === \"return\" ? k : \"next\", v[1] ? { done: y.done, value: y.value } : y, yes, no) : yes({ value: y, done })).catch((e) => resume(\"throw\", e, yes, no));\n    } catch (e) {\n      no(e);\n    }\n  };\n  var method = (k) => it[k] = (x) => new Promise((yes, no) => resume(k, x, yes, no));\n  var it = {};\n  return generator = generator.apply(__this, __arguments), it[__knownSymbol(\"asyncIterator\")] = () => it, method(\"next\"), method(\"throw\"), method(\"return\"), it;\n};\n\n\n//# sourceMappingURL=chunk-7OAPEGJQ.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9jaHVuay03T0FQRUdKUS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RUFBOEUsNkRBQTZEO0FBQzNJO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2R0FBNkcsK0JBQStCLHNCQUFzQixnQkFBZ0I7QUFDbEwsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQVFFO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25hc3RlcnkzNjAvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9saWIvY2h1bmstN09BUEVHSlEubWpzP2VmYTAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2RlZlByb3BzID0gT2JqZWN0LmRlZmluZVByb3BlcnRpZXM7XG52YXIgX19nZXRPd25Qcm9wRGVzY3MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycztcbnZhciBfX2dldE93blByb3BTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fcHJvcElzRW51bSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgX19rbm93blN5bWJvbCA9IChuYW1lLCBzeW1ib2wpID0+IHtcbiAgcmV0dXJuIChzeW1ib2wgPSBTeW1ib2xbbmFtZV0pID8gc3ltYm9sIDogU3ltYm9sLmZvcihcIlN5bWJvbC5cIiArIG5hbWUpO1xufTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3NwcmVhZFZhbHVlcyA9IChhLCBiKSA9PiB7XG4gIGZvciAodmFyIHByb3AgaW4gYiB8fCAoYiA9IHt9KSlcbiAgICBpZiAoX19oYXNPd25Qcm9wLmNhbGwoYiwgcHJvcCkpXG4gICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XG4gIGlmIChfX2dldE93blByb3BTeW1ib2xzKVxuICAgIGZvciAodmFyIHByb3Agb2YgX19nZXRPd25Qcm9wU3ltYm9scyhiKSkge1xuICAgICAgaWYgKF9fcHJvcElzRW51bS5jYWxsKGIsIHByb3ApKVxuICAgICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XG4gICAgfVxuICByZXR1cm4gYTtcbn07XG52YXIgX19zcHJlYWRQcm9wcyA9IChhLCBiKSA9PiBfX2RlZlByb3BzKGEsIF9fZ2V0T3duUHJvcERlc2NzKGIpKTtcbnZhciBfX2FzeW5jID0gKF9fdGhpcywgX19hcmd1bWVudHMsIGdlbmVyYXRvcikgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHZhciBmdWxmaWxsZWQgPSAodmFsdWUpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHJlamVjdGVkID0gKHZhbHVlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvci50aHJvdyh2YWx1ZSkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgc3RlcCA9ICh4KSA9PiB4LmRvbmUgPyByZXNvbHZlKHgudmFsdWUpIDogUHJvbWlzZS5yZXNvbHZlKHgudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7XG4gICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KF9fdGhpcywgX19hcmd1bWVudHMpKS5uZXh0KCkpO1xuICB9KTtcbn07XG52YXIgX19hd2FpdCA9IGZ1bmN0aW9uKHByb21pc2UsIGlzWWllbGRTdGFyKSB7XG4gIHRoaXNbMF0gPSBwcm9taXNlO1xuICB0aGlzWzFdID0gaXNZaWVsZFN0YXI7XG59O1xudmFyIF9fYXN5bmNHZW5lcmF0b3IgPSAoX190aGlzLCBfX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSA9PiB7XG4gIHZhciByZXN1bWUgPSAoaywgdiwgeWVzLCBubykgPT4ge1xuICAgIHRyeSB7XG4gICAgICB2YXIgeCA9IGdlbmVyYXRvcltrXSh2KSwgaXNBd2FpdCA9ICh2ID0geC52YWx1ZSkgaW5zdGFuY2VvZiBfX2F3YWl0LCBkb25lID0geC5kb25lO1xuICAgICAgUHJvbWlzZS5yZXNvbHZlKGlzQXdhaXQgPyB2WzBdIDogdikudGhlbigoeSkgPT4gaXNBd2FpdCA/IHJlc3VtZShrID09PSBcInJldHVyblwiID8gayA6IFwibmV4dFwiLCB2WzFdID8geyBkb25lOiB5LmRvbmUsIHZhbHVlOiB5LnZhbHVlIH0gOiB5LCB5ZXMsIG5vKSA6IHllcyh7IHZhbHVlOiB5LCBkb25lIH0pKS5jYXRjaCgoZSkgPT4gcmVzdW1lKFwidGhyb3dcIiwgZSwgeWVzLCBubykpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIG5vKGUpO1xuICAgIH1cbiAgfTtcbiAgdmFyIG1ldGhvZCA9IChrKSA9PiBpdFtrXSA9ICh4KSA9PiBuZXcgUHJvbWlzZSgoeWVzLCBubykgPT4gcmVzdW1lKGssIHgsIHllcywgbm8pKTtcbiAgdmFyIGl0ID0ge307XG4gIHJldHVybiBnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkoX190aGlzLCBfX2FyZ3VtZW50cyksIGl0W19fa25vd25TeW1ib2woXCJhc3luY0l0ZXJhdG9yXCIpXSA9ICgpID0+IGl0LCBtZXRob2QoXCJuZXh0XCIpLCBtZXRob2QoXCJ0aHJvd1wiKSwgbWV0aG9kKFwicmV0dXJuXCIpLCBpdDtcbn07XG5cbmV4cG9ydCB7XG4gIF9fc3ByZWFkVmFsdWVzLFxuICBfX3NwcmVhZFByb3BzLFxuICBfX2FzeW5jLFxuICBfX2F3YWl0LFxuICBfX2FzeW5jR2VuZXJhdG9yXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2h1bmstN09BUEVHSlEubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/chunk-7OAPEGJQ.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/index.mjs":
/*!**************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/index.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Candidate: () => (/* reexport safe */ _generate_js__WEBPACK_IMPORTED_MODULE_2__.Candidate),\n/* harmony export */   GenerateRequest: () => (/* reexport safe */ _model_js__WEBPACK_IMPORTED_MODULE_3__.GenerateRequest),\n/* harmony export */   GenerateRequestData: () => (/* reexport safe */ _model_js__WEBPACK_IMPORTED_MODULE_3__.GenerateRequestData),\n/* harmony export */   GenerateResponse: () => (/* reexport safe */ _generate_js__WEBPACK_IMPORTED_MODULE_2__.GenerateResponse),\n/* harmony export */   GenerateResponseData: () => (/* reexport safe */ _model_js__WEBPACK_IMPORTED_MODULE_3__.GenerateResponseData),\n/* harmony export */   GenerationUsage: () => (/* reexport safe */ _model_js__WEBPACK_IMPORTED_MODULE_3__.GenerationUsage),\n/* harmony export */   MediaPart: () => (/* reexport safe */ _model_js__WEBPACK_IMPORTED_MODULE_3__.MediaPart),\n/* harmony export */   Message: () => (/* reexport safe */ _generate_js__WEBPACK_IMPORTED_MODULE_2__.Message),\n/* harmony export */   NoValidCandidatesError: () => (/* reexport safe */ _generate_js__WEBPACK_IMPORTED_MODULE_2__.NoValidCandidatesError),\n/* harmony export */   Part: () => (/* reexport safe */ _model_js__WEBPACK_IMPORTED_MODULE_3__.Part),\n/* harmony export */   ToolRequestPart: () => (/* reexport safe */ _model_js__WEBPACK_IMPORTED_MODULE_3__.ToolRequestPart),\n/* harmony export */   ToolResponsePart: () => (/* reexport safe */ _model_js__WEBPACK_IMPORTED_MODULE_3__.ToolResponsePart),\n/* harmony export */   asTool: () => (/* reexport safe */ _tool_js__WEBPACK_IMPORTED_MODULE_6__.asTool),\n/* harmony export */   definePrompt: () => (/* reexport safe */ _prompt_js__WEBPACK_IMPORTED_MODULE_4__.definePrompt),\n/* harmony export */   defineTool: () => (/* reexport safe */ _tool_js__WEBPACK_IMPORTED_MODULE_6__.defineTool),\n/* harmony export */   evaluate: () => (/* reexport safe */ _evaluator_js__WEBPACK_IMPORTED_MODULE_1__.evaluate),\n/* harmony export */   evaluatorRef: () => (/* reexport safe */ _evaluator_js__WEBPACK_IMPORTED_MODULE_1__.evaluatorRef),\n/* harmony export */   generate: () => (/* reexport safe */ _generate_js__WEBPACK_IMPORTED_MODULE_2__.generate),\n/* harmony export */   generateStream: () => (/* reexport safe */ _generate_js__WEBPACK_IMPORTED_MODULE_2__.generateStream),\n/* harmony export */   index: () => (/* reexport safe */ _retriever_js__WEBPACK_IMPORTED_MODULE_5__.index),\n/* harmony export */   indexerRef: () => (/* reexport safe */ _retriever_js__WEBPACK_IMPORTED_MODULE_5__.indexerRef),\n/* harmony export */   renderPrompt: () => (/* reexport safe */ _prompt_js__WEBPACK_IMPORTED_MODULE_4__.renderPrompt),\n/* harmony export */   retrieve: () => (/* reexport safe */ _retriever_js__WEBPACK_IMPORTED_MODULE_5__.retrieve),\n/* harmony export */   retrieverRef: () => (/* reexport safe */ _retriever_js__WEBPACK_IMPORTED_MODULE_5__.retrieverRef),\n/* harmony export */   toGenerateRequest: () => (/* reexport safe */ _generate_js__WEBPACK_IMPORTED_MODULE_2__.toGenerateRequest)\n/* harmony export */ });\n/* harmony import */ var _chunk_7OAPEGJQ_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-7OAPEGJQ.mjs */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/chunk-7OAPEGJQ.mjs\");\n/* harmony import */ var _evaluator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./evaluator.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/evaluator.js\");\n/* harmony import */ var _generate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./generate.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate.js\");\n/* harmony import */ var _model_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./model.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model.js\");\n/* harmony import */ var _prompt_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./prompt.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/prompt.js\");\n/* harmony import */ var _retriever_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./retriever.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/retriever.js\");\n/* harmony import */ var _tool_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tool.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/tool.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./types.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/types.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _types_js__WEBPACK_IMPORTED_MODULE_7__) if([\"default\",\"Candidate\",\"GenerateRequest\",\"GenerateRequestData\",\"GenerateResponse\",\"GenerateResponseData\",\"GenerationUsage\",\"MediaPart\",\"Message\",\"NoValidCandidatesError\",\"Part\",\"ToolRequestPart\",\"ToolResponsePart\",\"asTool\",\"definePrompt\",\"defineTool\",\"evaluate\",\"evaluatorRef\",\"generate\",\"generateStream\",\"index\",\"indexerRef\",\"renderPrompt\",\"retrieve\",\"retrieverRef\",\"toGenerateRequest\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _types_js__WEBPACK_IMPORTED_MODULE_7__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQThCO0FBSU47QUFTRDtBQVVIO0FBQ3FDO0FBTWpDO0FBQ3VCO0FBQ3BCO0FBMkJ6QjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9uYXN0ZXJ5MzYwLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvYWkvbGliL2luZGV4Lm1qcz85ZWVjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4vY2h1bmstN09BUEVHSlEubWpzXCI7XG5pbXBvcnQge1xuICBldmFsdWF0ZSxcbiAgZXZhbHVhdG9yUmVmXG59IGZyb20gXCIuL2V2YWx1YXRvci5qc1wiO1xuaW1wb3J0IHtcbiAgQ2FuZGlkYXRlLFxuICBHZW5lcmF0ZVJlc3BvbnNlLFxuICBNZXNzYWdlLFxuICBOb1ZhbGlkQ2FuZGlkYXRlc0Vycm9yLFxuICBnZW5lcmF0ZSxcbiAgZ2VuZXJhdGVTdHJlYW0sXG4gIHRvR2VuZXJhdGVSZXF1ZXN0XG59IGZyb20gXCIuL2dlbmVyYXRlLmpzXCI7XG5pbXBvcnQge1xuICBHZW5lcmF0ZVJlcXVlc3QsXG4gIEdlbmVyYXRlUmVxdWVzdERhdGEsXG4gIEdlbmVyYXRlUmVzcG9uc2VEYXRhLFxuICBHZW5lcmF0aW9uVXNhZ2UsXG4gIE1lZGlhUGFydCxcbiAgUGFydCxcbiAgVG9vbFJlcXVlc3RQYXJ0LFxuICBUb29sUmVzcG9uc2VQYXJ0XG59IGZyb20gXCIuL21vZGVsLmpzXCI7XG5pbXBvcnQgeyBkZWZpbmVQcm9tcHQsIHJlbmRlclByb21wdCB9IGZyb20gXCIuL3Byb21wdC5qc1wiO1xuaW1wb3J0IHtcbiAgaW5kZXgsXG4gIGluZGV4ZXJSZWYsXG4gIHJldHJpZXZlLFxuICByZXRyaWV2ZXJSZWZcbn0gZnJvbSBcIi4vcmV0cmlldmVyLmpzXCI7XG5pbXBvcnQgeyBhc1Rvb2wsIGRlZmluZVRvb2wgfSBmcm9tIFwiLi90b29sLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90eXBlcy5qc1wiO1xuZXhwb3J0IHtcbiAgQ2FuZGlkYXRlLFxuICBHZW5lcmF0ZVJlcXVlc3QsXG4gIEdlbmVyYXRlUmVxdWVzdERhdGEsXG4gIEdlbmVyYXRlUmVzcG9uc2UsXG4gIEdlbmVyYXRlUmVzcG9uc2VEYXRhLFxuICBHZW5lcmF0aW9uVXNhZ2UsXG4gIE1lZGlhUGFydCxcbiAgTWVzc2FnZSxcbiAgTm9WYWxpZENhbmRpZGF0ZXNFcnJvcixcbiAgUGFydCxcbiAgVG9vbFJlcXVlc3RQYXJ0LFxuICBUb29sUmVzcG9uc2VQYXJ0LFxuICBhc1Rvb2wsXG4gIGRlZmluZVByb21wdCxcbiAgZGVmaW5lVG9vbCxcbiAgZXZhbHVhdGUsXG4gIGV2YWx1YXRvclJlZixcbiAgZ2VuZXJhdGUsXG4gIGdlbmVyYXRlU3RyZWFtLFxuICBpbmRleCxcbiAgaW5kZXhlclJlZixcbiAgcmVuZGVyUHJvbXB0LFxuICByZXRyaWV2ZSxcbiAgcmV0cmlldmVyUmVmLFxuICB0b0dlbmVyYXRlUmVxdWVzdFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/index.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/chunk-XEFTB2OF.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/chunk-XEFTB2OF.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __async: () => (/* binding */ __async),\n/* harmony export */   __spreadValues: () => (/* binding */ __spreadValues)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n\n//# sourceMappingURL=chunk-XEFTB2OF.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2NodW5rLVhFRlRCMk9GLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEVBQThFLDZEQUE2RDtBQUMzSTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUtFO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25hc3RlcnkzNjAvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9jaHVuay1YRUZUQjJPRi5tanM/Y2RhYyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19wcm9wSXNFbnVtID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3NwcmVhZFZhbHVlcyA9IChhLCBiKSA9PiB7XG4gIGZvciAodmFyIHByb3AgaW4gYiB8fCAoYiA9IHt9KSlcbiAgICBpZiAoX19oYXNPd25Qcm9wLmNhbGwoYiwgcHJvcCkpXG4gICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XG4gIGlmIChfX2dldE93blByb3BTeW1ib2xzKVxuICAgIGZvciAodmFyIHByb3Agb2YgX19nZXRPd25Qcm9wU3ltYm9scyhiKSkge1xuICAgICAgaWYgKF9fcHJvcElzRW51bS5jYWxsKGIsIHByb3ApKVxuICAgICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XG4gICAgfVxuICByZXR1cm4gYTtcbn07XG52YXIgX19hc3luYyA9IChfX3RoaXMsIF9fYXJndW1lbnRzLCBnZW5lcmF0b3IpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB2YXIgZnVsZmlsbGVkID0gKHZhbHVlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciByZWplY3RlZCA9ICh2YWx1ZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RlcChnZW5lcmF0b3IudGhyb3codmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHN0ZXAgPSAoeCkgPT4geC5kb25lID8gcmVzb2x2ZSh4LnZhbHVlKSA6IFByb21pc2UucmVzb2x2ZSh4LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpO1xuICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseShfX3RoaXMsIF9fYXJndW1lbnRzKSkubmV4dCgpKTtcbiAgfSk7XG59O1xuXG5leHBvcnQge1xuICBfX3NwcmVhZFZhbHVlcyxcbiAgX19hc3luY1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLVhFRlRCMk9GLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/chunk-XEFTB2OF.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/index.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/index.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GENKIT_CLIENT_HEADER: () => (/* binding */ GENKIT_CLIENT_HEADER),\n/* harmony export */   GENKIT_VERSION: () => (/* binding */ GENKIT_VERSION),\n/* harmony export */   GenkitError: () => (/* reexport safe */ _error_js__WEBPACK_IMPORTED_MODULE_4__.GenkitError),\n/* harmony export */   defineJsonSchema: () => (/* reexport safe */ _schema_js__WEBPACK_IMPORTED_MODULE_6__.defineJsonSchema),\n/* harmony export */   defineSchema: () => (/* reexport safe */ _schema_js__WEBPACK_IMPORTED_MODULE_6__.defineSchema)\n/* harmony export */ });\n/* harmony import */ var _chunk_XEFTB2OF_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-XEFTB2OF.mjs */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/chunk-XEFTB2OF.mjs\");\n/* harmony import */ var _codegen_version_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./__codegen/version.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/__codegen/version.js\");\n/* harmony import */ var _action_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _action_js__WEBPACK_IMPORTED_MODULE_2__) if([\"default\",\"GENKIT_CLIENT_HEADER\",\"GENKIT_VERSION\",\"GenkitError\",\"defineJsonSchema\",\"defineSchema\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _action_js__WEBPACK_IMPORTED_MODULE_2__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./config.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/config.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _config_js__WEBPACK_IMPORTED_MODULE_3__) if([\"default\",\"GENKIT_CLIENT_HEADER\",\"GENKIT_VERSION\",\"GenkitError\",\"defineJsonSchema\",\"defineSchema\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _config_js__WEBPACK_IMPORTED_MODULE_3__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _error_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./error.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\");\n/* harmony import */ var _flowTypes_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./flowTypes.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/flowTypes.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _flowTypes_js__WEBPACK_IMPORTED_MODULE_5__) if([\"default\",\"GENKIT_CLIENT_HEADER\",\"GENKIT_VERSION\",\"GenkitError\",\"defineJsonSchema\",\"defineSchema\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _flowTypes_js__WEBPACK_IMPORTED_MODULE_5__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _schema_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./schema.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\n/* harmony import */ var _telemetryTypes_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./telemetryTypes.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/telemetryTypes.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _telemetryTypes_js__WEBPACK_IMPORTED_MODULE_7__) if([\"default\",\"GENKIT_CLIENT_HEADER\",\"GENKIT_VERSION\",\"GenkitError\",\"defineJsonSchema\",\"defineSchema\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _telemetryTypes_js__WEBPACK_IMPORTED_MODULE_7__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\nconst GENKIT_VERSION = _codegen_version_js__WEBPACK_IMPORTED_MODULE_1__.version;\nconst GENKIT_CLIENT_HEADER = `genkit-node/${GENKIT_VERSION} gl-node/${process.versions.node}`;\n\n\n\n\n\n\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQThCO0FBQ21CO0FBQ2pELHVCQUF1Qix3REFBTztBQUM5Qiw0Q0FBNEMsZ0JBQWdCLFVBQVUsc0JBQXNCO0FBQ2hFO0FBQ0E7QUFDYTtBQUNWO0FBQzhCO0FBQ3pCO0FBT2xDO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb25hc3RlcnkzNjAvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9pbmRleC5tanM/NGJhMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuL2NodW5rLVhFRlRCMk9GLm1qc1wiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL19fY29kZWdlbi92ZXJzaW9uLmpzXCI7XG5jb25zdCBHRU5LSVRfVkVSU0lPTiA9IHZlcnNpb247XG5jb25zdCBHRU5LSVRfQ0xJRU5UX0hFQURFUiA9IGBnZW5raXQtbm9kZS8ke0dFTktJVF9WRVJTSU9OfSBnbC1ub2RlLyR7cHJvY2Vzcy52ZXJzaW9ucy5ub2RlfWA7XG5leHBvcnQgKiBmcm9tIFwiLi9hY3Rpb24uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NvbmZpZy5qc1wiO1xuaW1wb3J0IHsgR2Vua2l0RXJyb3IgfSBmcm9tIFwiLi9lcnJvci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZmxvd1R5cGVzLmpzXCI7XG5pbXBvcnQgeyBkZWZpbmVKc29uU2NoZW1hLCBkZWZpbmVTY2hlbWEgfSBmcm9tIFwiLi9zY2hlbWEuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3RlbGVtZXRyeVR5cGVzLmpzXCI7XG5leHBvcnQge1xuICBHRU5LSVRfQ0xJRU5UX0hFQURFUixcbiAgR0VOS0lUX1ZFUlNJT04sXG4gIEdlbmtpdEVycm9yLFxuICBkZWZpbmVKc29uU2NoZW1hLFxuICBkZWZpbmVTY2hlbWFcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/index.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/chunk-WFI2LP4G.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/chunk-WFI2LP4G.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __async: () => (/* binding */ __async),\n/* harmony export */   __forAwait: () => (/* binding */ __forAwait),\n/* harmony export */   __spreadProps: () => (/* binding */ __spreadProps),\n/* harmony export */   __spreadValues: () => (/* binding */ __spreadValues)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __knownSymbol = (name, symbol) => {\n  return (symbol = Symbol[name]) ? symbol : Symbol.for(\"Symbol.\" + name);\n};\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nvar __forAwait = (obj, it, method) => (it = obj[__knownSymbol(\"asyncIterator\")]) ? it.call(obj) : (obj = obj[__knownSymbol(\"iterator\")](), it = {}, method = (key, fn) => (fn = obj[key]) && (it[key] = (arg) => new Promise((yes, no, done) => (arg = fn.call(obj, arg), done = arg.done, Promise.resolve(arg.value).then((value) => yes({ value, done }), no)))), method(\"next\"), method(\"return\"), it);\n\n\n//# sourceMappingURL=chunk-WFI2LP4G.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZWFpL2xpYi9jaHVuay1XRkkyTFA0Ry5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhFQUE4RSw2REFBNkQ7QUFDM0k7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0Esa0pBQWtKLDBMQUEwTCxhQUFhOztBQU92VjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9uYXN0ZXJ5MzYwLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvZ29vZ2xlYWkvbGliL2NodW5rLVdGSTJMUDRHLm1qcz9hNGJmIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19kZWZQcm9wcyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzO1xudmFyIF9fZ2V0T3duUHJvcERlc2NzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM7XG52YXIgX19nZXRPd25Qcm9wU3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX3Byb3BJc0VudW0gPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIF9fa25vd25TeW1ib2wgPSAobmFtZSwgc3ltYm9sKSA9PiB7XG4gIHJldHVybiAoc3ltYm9sID0gU3ltYm9sW25hbWVdKSA/IHN5bWJvbCA6IFN5bWJvbC5mb3IoXCJTeW1ib2wuXCIgKyBuYW1lKTtcbn07XG52YXIgX19kZWZOb3JtYWxQcm9wID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcChvYmosIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZSB9KSA6IG9ialtrZXldID0gdmFsdWU7XG52YXIgX19zcHJlYWRWYWx1ZXMgPSAoYSwgYikgPT4ge1xuICBmb3IgKHZhciBwcm9wIGluIGIgfHwgKGIgPSB7fSkpXG4gICAgaWYgKF9faGFzT3duUHJvcC5jYWxsKGIsIHByb3ApKVxuICAgICAgX19kZWZOb3JtYWxQcm9wKGEsIHByb3AsIGJbcHJvcF0pO1xuICBpZiAoX19nZXRPd25Qcm9wU3ltYm9scylcbiAgICBmb3IgKHZhciBwcm9wIG9mIF9fZ2V0T3duUHJvcFN5bWJvbHMoYikpIHtcbiAgICAgIGlmIChfX3Byb3BJc0VudW0uY2FsbChiLCBwcm9wKSlcbiAgICAgICAgX19kZWZOb3JtYWxQcm9wKGEsIHByb3AsIGJbcHJvcF0pO1xuICAgIH1cbiAgcmV0dXJuIGE7XG59O1xudmFyIF9fc3ByZWFkUHJvcHMgPSAoYSwgYikgPT4gX19kZWZQcm9wcyhhLCBfX2dldE93blByb3BEZXNjcyhiKSk7XG52YXIgX19hc3luYyA9IChfX3RoaXMsIF9fYXJndW1lbnRzLCBnZW5lcmF0b3IpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB2YXIgZnVsZmlsbGVkID0gKHZhbHVlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciByZWplY3RlZCA9ICh2YWx1ZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RlcChnZW5lcmF0b3IudGhyb3codmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHN0ZXAgPSAoeCkgPT4geC5kb25lID8gcmVzb2x2ZSh4LnZhbHVlKSA6IFByb21pc2UucmVzb2x2ZSh4LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpO1xuICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseShfX3RoaXMsIF9fYXJndW1lbnRzKSkubmV4dCgpKTtcbiAgfSk7XG59O1xudmFyIF9fZm9yQXdhaXQgPSAob2JqLCBpdCwgbWV0aG9kKSA9PiAoaXQgPSBvYmpbX19rbm93blN5bWJvbChcImFzeW5jSXRlcmF0b3JcIildKSA/IGl0LmNhbGwob2JqKSA6IChvYmogPSBvYmpbX19rbm93blN5bWJvbChcIml0ZXJhdG9yXCIpXSgpLCBpdCA9IHt9LCBtZXRob2QgPSAoa2V5LCBmbikgPT4gKGZuID0gb2JqW2tleV0pICYmIChpdFtrZXldID0gKGFyZykgPT4gbmV3IFByb21pc2UoKHllcywgbm8sIGRvbmUpID0+IChhcmcgPSBmbi5jYWxsKG9iaiwgYXJnKSwgZG9uZSA9IGFyZy5kb25lLCBQcm9taXNlLnJlc29sdmUoYXJnLnZhbHVlKS50aGVuKCh2YWx1ZSkgPT4geWVzKHsgdmFsdWUsIGRvbmUgfSksIG5vKSkpKSwgbWV0aG9kKFwibmV4dFwiKSwgbWV0aG9kKFwicmV0dXJuXCIpLCBpdCk7XG5cbmV4cG9ydCB7XG4gIF9fc3ByZWFkVmFsdWVzLFxuICBfX3NwcmVhZFByb3BzLFxuICBfX2FzeW5jLFxuICBfX2ZvckF3YWl0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2h1bmstV0ZJMkxQNEcubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/chunk-WFI2LP4G.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/index.mjs":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/index.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ src_default),\n/* harmony export */   gemini15Flash: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_3__.gemini15Flash),\n/* harmony export */   gemini15Flash8B: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_3__.gemini15Flash8B),\n/* harmony export */   gemini15Pro: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_3__.gemini15Pro),\n/* harmony export */   geminiPro: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_3__.geminiPro),\n/* harmony export */   geminiProVision: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_3__.geminiProVision),\n/* harmony export */   googleAI: () => (/* binding */ googleAI),\n/* harmony export */   textEmbeddingGecko001: () => (/* reexport safe */ _embedder_js__WEBPACK_IMPORTED_MODULE_2__.textEmbeddingGecko001)\n/* harmony export */ });\n/* harmony import */ var _chunk_WFI2LP4G_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-WFI2LP4G.mjs */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/chunk-WFI2LP4G.mjs\");\n/* harmony import */ var _genkit_ai_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.mjs\");\n/* harmony import */ var _embedder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./embedder.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/embedder.js\");\n/* harmony import */ var _gemini_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./gemini.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/gemini.js\");\n\n\n\n\nconst googleAI = (0,_genkit_ai_core__WEBPACK_IMPORTED_MODULE_1__.genkitPlugin)(\n  \"googleai\",\n  (options) => (0,_chunk_WFI2LP4G_mjs__WEBPACK_IMPORTED_MODULE_0__.__async)(void 0, null, function* () {\n    let models;\n    let embedders;\n    let apiVersions = [\"v1\"];\n    if (options == null ? void 0 : options.apiVersion) {\n      if (Array.isArray(options == null ? void 0 : options.apiVersion)) {\n        apiVersions = options == null ? void 0 : options.apiVersion;\n      } else {\n        apiVersions = [options == null ? void 0 : options.apiVersion];\n      }\n    }\n    if (apiVersions.includes(\"v1beta\")) {\n      embedders = [], models = [\n        ...Object.keys(_gemini_js__WEBPACK_IMPORTED_MODULE_3__.SUPPORTED_V15_MODELS).map(\n          (name) => (0,_gemini_js__WEBPACK_IMPORTED_MODULE_3__.googleAIModel)(name, options == null ? void 0 : options.apiKey, \"v1beta\", options == null ? void 0 : options.baseUrl)\n        )\n      ];\n    }\n    if (apiVersions.includes(\"v1\")) {\n      models = [\n        ...Object.keys(_gemini_js__WEBPACK_IMPORTED_MODULE_3__.SUPPORTED_V1_MODELS).map(\n          (name) => (0,_gemini_js__WEBPACK_IMPORTED_MODULE_3__.googleAIModel)(name, options == null ? void 0 : options.apiKey, void 0, options == null ? void 0 : options.baseUrl)\n        ),\n        ...Object.keys(_gemini_js__WEBPACK_IMPORTED_MODULE_3__.SUPPORTED_V15_MODELS).map(\n          (name) => (0,_gemini_js__WEBPACK_IMPORTED_MODULE_3__.googleAIModel)(name, options == null ? void 0 : options.apiKey, void 0, options == null ? void 0 : options.baseUrl)\n        )\n      ];\n      embedders = [\n        ...Object.keys(_embedder_js__WEBPACK_IMPORTED_MODULE_2__.SUPPORTED_MODELS).map(\n          (name) => (0,_embedder_js__WEBPACK_IMPORTED_MODULE_2__.textEmbeddingGeckoEmbedder)(name, { apiKey: options == null ? void 0 : options.apiKey })\n        )\n      ];\n    }\n    return {\n      models,\n      embedders\n    };\n  })\n);\nvar src_default = googleAI;\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZWFpL2xpYi9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBRThCO0FBQ2lCO0FBS3hCO0FBVUY7QUFDckIsaUJBQWlCLDZEQUFZO0FBQzdCO0FBQ0EsZUFBZSw0REFBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw0REFBb0I7QUFDM0Msb0JBQW9CLHlEQUFhO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsMkRBQW1CO0FBQzFDLG9CQUFvQix5REFBYTtBQUNqQztBQUNBLHVCQUF1Qiw0REFBb0I7QUFDM0Msb0JBQW9CLHlEQUFhO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QiwwREFBZTtBQUN0QyxvQkFBb0Isd0VBQTBCLFNBQVMsbURBQW1EO0FBQzFHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFVRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9uYXN0ZXJ5MzYwLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvZ29vZ2xlYWkvbGliL2luZGV4Lm1qcz81ZjIzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIF9fYXN5bmNcbn0gZnJvbSBcIi4vY2h1bmstV0ZJMkxQNEcubWpzXCI7XG5pbXBvcnQgeyBnZW5raXRQbHVnaW4gfSBmcm9tIFwiQGdlbmtpdC1haS9jb3JlXCI7XG5pbXBvcnQge1xuICBTVVBQT1JURURfTU9ERUxTIGFzIEVNQkVEREVSX01PREVMUyxcbiAgdGV4dEVtYmVkZGluZ0dlY2tvMDAxLFxuICB0ZXh0RW1iZWRkaW5nR2Vja29FbWJlZGRlclxufSBmcm9tIFwiLi9lbWJlZGRlci5qc1wiO1xuaW1wb3J0IHtcbiAgZ2VtaW5pMTVGbGFzaCxcbiAgZ2VtaW5pMTVGbGFzaDhCLFxuICBnZW1pbmkxNVBybyxcbiAgZ2VtaW5pUHJvLFxuICBnZW1pbmlQcm9WaXNpb24sXG4gIGdvb2dsZUFJTW9kZWwsXG4gIFNVUFBPUlRFRF9WMTVfTU9ERUxTLFxuICBTVVBQT1JURURfVjFfTU9ERUxTXG59IGZyb20gXCIuL2dlbWluaS5qc1wiO1xuY29uc3QgZ29vZ2xlQUkgPSBnZW5raXRQbHVnaW4oXG4gIFwiZ29vZ2xlYWlcIixcbiAgKG9wdGlvbnMpID0+IF9fYXN5bmModm9pZCAwLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgIGxldCBtb2RlbHM7XG4gICAgbGV0IGVtYmVkZGVycztcbiAgICBsZXQgYXBpVmVyc2lvbnMgPSBbXCJ2MVwiXTtcbiAgICBpZiAob3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5hcGlWZXJzaW9uKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLmFwaVZlcnNpb24pKSB7XG4gICAgICAgIGFwaVZlcnNpb25zID0gb3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5hcGlWZXJzaW9uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXBpVmVyc2lvbnMgPSBbb3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5hcGlWZXJzaW9uXTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGFwaVZlcnNpb25zLmluY2x1ZGVzKFwidjFiZXRhXCIpKSB7XG4gICAgICBlbWJlZGRlcnMgPSBbXSwgbW9kZWxzID0gW1xuICAgICAgICAuLi5PYmplY3Qua2V5cyhTVVBQT1JURURfVjE1X01PREVMUykubWFwKFxuICAgICAgICAgIChuYW1lKSA9PiBnb29nbGVBSU1vZGVsKG5hbWUsIG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuYXBpS2V5LCBcInYxYmV0YVwiLCBvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLmJhc2VVcmwpXG4gICAgICAgIClcbiAgICAgIF07XG4gICAgfVxuICAgIGlmIChhcGlWZXJzaW9ucy5pbmNsdWRlcyhcInYxXCIpKSB7XG4gICAgICBtb2RlbHMgPSBbXG4gICAgICAgIC4uLk9iamVjdC5rZXlzKFNVUFBPUlRFRF9WMV9NT0RFTFMpLm1hcChcbiAgICAgICAgICAobmFtZSkgPT4gZ29vZ2xlQUlNb2RlbChuYW1lLCBvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLmFwaUtleSwgdm9pZCAwLCBvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLmJhc2VVcmwpXG4gICAgICAgICksXG4gICAgICAgIC4uLk9iamVjdC5rZXlzKFNVUFBPUlRFRF9WMTVfTU9ERUxTKS5tYXAoXG4gICAgICAgICAgKG5hbWUpID0+IGdvb2dsZUFJTW9kZWwobmFtZSwgb3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5hcGlLZXksIHZvaWQgMCwgb3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5iYXNlVXJsKVxuICAgICAgICApXG4gICAgICBdO1xuICAgICAgZW1iZWRkZXJzID0gW1xuICAgICAgICAuLi5PYmplY3Qua2V5cyhFTUJFRERFUl9NT0RFTFMpLm1hcChcbiAgICAgICAgICAobmFtZSkgPT4gdGV4dEVtYmVkZGluZ0dlY2tvRW1iZWRkZXIobmFtZSwgeyBhcGlLZXk6IG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuYXBpS2V5IH0pXG4gICAgICAgIClcbiAgICAgIF07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBtb2RlbHMsXG4gICAgICBlbWJlZGRlcnNcbiAgICB9O1xuICB9KVxuKTtcbnZhciBzcmNfZGVmYXVsdCA9IGdvb2dsZUFJO1xuZXhwb3J0IHtcbiAgc3JjX2RlZmF1bHQgYXMgZGVmYXVsdCxcbiAgZ2VtaW5pMTVGbGFzaCxcbiAgZ2VtaW5pMTVGbGFzaDhCLFxuICBnZW1pbmkxNVBybyxcbiAgZ2VtaW5pUHJvLFxuICBnZW1pbmlQcm9WaXNpb24sXG4gIGdvb2dsZUFJLFxuICB0ZXh0RW1iZWRkaW5nR2Vja28wMDFcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/index.mjs\n");

/***/ })

};
;